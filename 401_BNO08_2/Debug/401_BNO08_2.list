
401_BNO08_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ccac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  0800ce50  0800ce50  0001ce50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d39c  0800d39c  000202d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d39c  0800d39c  0001d39c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d3a4  0800d3a4  000202d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d3a4  0800d3a4  0001d3a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d3a8  0800d3a8  0001d3a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d0  20000000  0800d3ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000156c  200002d0  0800d67c  000202d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000183c  0800d67c  0002183c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001511a  00000000  00000000  00020300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000392a  00000000  00000000  0003541a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  00038d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001090  00000000  00000000  00039f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c1ca  00000000  00000000  0003afc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016f22  00000000  00000000  00057192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000967e8  00000000  00000000  0006e0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010489c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c64  00000000  00000000  001048ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d0 	.word	0x200002d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ce34 	.word	0x0800ce34

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d4 	.word	0x200002d4
 80001dc:	0800ce34 	.word	0x0800ce34

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	601a      	str	r2, [r3, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f023 0210 	bic.w	r2, r3, #16
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	431a      	orrs	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	605a      	str	r2, [r3, #4]
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d101      	bne.n	8000f1a <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000f16:	2301      	movs	r3, #1
 8000f18:	e000      	b.n	8000f1c <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	f003 0302 	and.w	r3, r3, #2
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d101      	bne.n	8000f40 <LL_SPI_IsActiveFlag_TXE+0x18>
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e000      	b.n	8000f42 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b083      	sub	sp, #12
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	330c      	adds	r3, #12
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	b2db      	uxtb	r3, r3
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b085      	sub	sp, #20
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	460b      	mov	r3, r1
 8000f74:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	330c      	adds	r3, #12
 8000f7a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	78fa      	ldrb	r2, [r7, #3]
 8000f80:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b083      	sub	sp, #12
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
 8000f96:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	691a      	ldr	r2, [r3, #16]
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	bf0c      	ite	eq
 8000fa6:	2301      	moveq	r3, #1
 8000fa8:	2300      	movne	r3, #0
 8000faa:	b2db      	uxtb	r3, r3
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	619a      	str	r2, [r3, #24]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	041a      	lsls	r2, r3, #16
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	619a      	str	r2, [r3, #24]
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
	...

08000ff4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001000:	4907      	ldr	r1, [pc, #28]	; (8001020 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4313      	orrs	r3, r2
 8001006:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800100a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4013      	ands	r3, r2
 8001010:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001012:	68fb      	ldr	r3, [r7, #12]
}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	40023800 	.word	0x40023800

08001024 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <LL_APB1_GRP1_EnableClock+0x2c>)
 800102e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001030:	4907      	ldr	r1, [pc, #28]	; (8001050 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4313      	orrs	r3, r2
 8001036:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <LL_APB1_GRP1_EnableClock+0x2c>)
 800103a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4013      	ands	r3, r2
 8001040:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001042:	68fb      	ldr	r3, [r7, #12]
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	40023800 	.word	0x40023800

08001054 <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b090      	sub	sp, #64	; 0x40
 8001058:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800105a:	f107 0318 	add.w	r3, r7, #24
 800105e:	2228      	movs	r2, #40	; 0x28
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f008 fada 	bl	800961c <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	463b      	mov	r3, r7
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
 8001074:	611a      	str	r2, [r3, #16]
 8001076:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001078:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800107c:	f7ff ffd2 	bl	8001024 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001080:	2002      	movs	r0, #2
 8001082:	f7ff ffb7 	bl	8000ff4 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001086:	2004      	movs	r0, #4
 8001088:	f7ff ffb4 	bl	8000ff4 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ffb1 	bl	8000ff4 <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8001092:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001096:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001098:	2302      	movs	r3, #2
 800109a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800109c:	2303      	movs	r3, #3
 800109e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010a4:	2300      	movs	r3, #0
 80010a6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80010a8:	2305      	movs	r3, #5
 80010aa:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ac:	463b      	mov	r3, r7
 80010ae:	4619      	mov	r1, r3
 80010b0:	4841      	ldr	r0, [pc, #260]	; (80011b8 <BNO080_GPIO_SPI_Initialization+0x164>)
 80010b2:	f004 f8e8 	bl	8005286 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80010ba:	f44f 7382 	mov.w	r3, #260	; 0x104
 80010be:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80010c0:	2300      	movs	r3, #0
 80010c2:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80010c4:	2302      	movs	r3, #2
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80010c8:	2301      	movs	r3, #1
 80010ca:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80010cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80010d2:	2318      	movs	r3, #24
 80010d4:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80010d6:	2300      	movs	r3, #0
 80010d8:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80010da:	2300      	movs	r3, #0
 80010dc:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 80010de:	230a      	movs	r3, #10
 80010e0:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 80010e2:	f107 0318 	add.w	r3, r7, #24
 80010e6:	4619      	mov	r1, r3
 80010e8:	4834      	ldr	r0, [pc, #208]	; (80011bc <BNO080_GPIO_SPI_Initialization+0x168>)
 80010ea:	f004 f962 	bl	80053b2 <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80010ee:	2100      	movs	r1, #0
 80010f0:	4832      	ldr	r0, [pc, #200]	; (80011bc <BNO080_GPIO_SPI_Initialization+0x168>)
 80010f2:	f7ff fef3 	bl	8000edc <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 80010f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010fa:	4831      	ldr	r0, [pc, #196]	; (80011c0 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80010fc:	f7ff ff6a 	bl	8000fd4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 8001100:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001104:	482c      	ldr	r0, [pc, #176]	; (80011b8 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001106:	f7ff ff65 	bl	8000fd4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 800110a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800110e:	482c      	ldr	r0, [pc, #176]	; (80011c0 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001110:	f7ff ff60 	bl	8000fd4 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 8001114:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001118:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800111a:	2301      	movs	r3, #1
 800111c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800111e:	2303      	movs	r3, #3
 8001120:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 800112a:	463b      	mov	r3, r7
 800112c:	4619      	mov	r1, r3
 800112e:	4822      	ldr	r0, [pc, #136]	; (80011b8 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001130:	f004 f8a9 	bl	8005286 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 8001134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001138:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800113a:	2301      	movs	r3, #1
 800113c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800113e:	2303      	movs	r3, #3
 8001140:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 800114a:	463b      	mov	r3, r7
 800114c:	4619      	mov	r1, r3
 800114e:	481c      	ldr	r0, [pc, #112]	; (80011c0 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001150:	f004 f899 	bl	8005286 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 8001154:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001158:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800115a:	2301      	movs	r3, #1
 800115c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800115e:	2303      	movs	r3, #3
 8001160:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 800116a:	463b      	mov	r3, r7
 800116c:	4619      	mov	r1, r3
 800116e:	4814      	ldr	r0, [pc, #80]	; (80011c0 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001170:	f004 f889 	bl	8005286 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 8001174:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001178:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800117a:	2300      	movs	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800117e:	2301      	movs	r3, #1
 8001180:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 8001182:	463b      	mov	r3, r7
 8001184:	4619      	mov	r1, r3
 8001186:	480e      	ldr	r0, [pc, #56]	; (80011c0 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001188:	f004 f87d 	bl	8005286 <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 800118c:	480b      	ldr	r0, [pc, #44]	; (80011bc <BNO080_GPIO_SPI_Initialization+0x168>)
 800118e:	f7ff fe95 	bl	8000ebc <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 8001192:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001196:	4808      	ldr	r0, [pc, #32]	; (80011b8 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001198:	f7ff ff0e 	bl	8000fb8 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 800119c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011a0:	4807      	ldr	r0, [pc, #28]	; (80011c0 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80011a2:	f7ff ff09 	bl	8000fb8 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 80011a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011aa:	4805      	ldr	r0, [pc, #20]	; (80011c0 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80011ac:	f7ff ff04 	bl	8000fb8 <LL_GPIO_SetOutputPin>
}
 80011b0:	bf00      	nop
 80011b2:	3740      	adds	r7, #64	; 0x40
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40020400 	.word	0x40020400
 80011bc:	40003800 	.word	0x40003800
 80011c0:	40020000 	.word	0x40020000

080011c4 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 80011ca:	f7ff ff43 	bl	8001054 <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 80011ce:	482e      	ldr	r0, [pc, #184]	; (8001288 <BNO080_Initialization+0xc4>)
 80011d0:	f008 fe96 	bl	8009f00 <iprintf>
	
	CHIP_DESELECT(BNO080);
 80011d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011d8:	482c      	ldr	r0, [pc, #176]	; (800128c <BNO080_Initialization+0xc8>)
 80011da:	f7ff feed 	bl	8000fb8 <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 80011de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011e2:	482b      	ldr	r0, [pc, #172]	; (8001290 <BNO080_Initialization+0xcc>)
 80011e4:	f7ff fee8 	bl	8000fb8 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 80011e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ec:	4828      	ldr	r0, [pc, #160]	; (8001290 <BNO080_Initialization+0xcc>)
 80011ee:	f7ff fef1 	bl	8000fd4 <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 80011f2:	20c8      	movs	r0, #200	; 0xc8
 80011f4:	f001 f9d6 	bl	80025a4 <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 80011f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011fc:	4824      	ldr	r0, [pc, #144]	; (8001290 <BNO080_Initialization+0xcc>)
 80011fe:	f7ff fedb 	bl	8000fb8 <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 8001202:	f000 fb23 	bl	800184c <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 8001206:	f000 fb21 	bl	800184c <BNO080_waitForSPI>
	BNO080_receivePacket();
 800120a:	f000 fb43 	bl	8001894 <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 800120e:	f000 fb1d 	bl	800184c <BNO080_waitForSPI>
	BNO080_receivePacket();
 8001212:	f000 fb3f 	bl	8001894 <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8001216:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <BNO080_Initialization+0xd0>)
 8001218:	22f9      	movs	r2, #249	; 0xf9
 800121a:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 800121c:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <BNO080_Initialization+0xd0>)
 800121e:	2200      	movs	r2, #0
 8001220:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 8001222:	2102      	movs	r1, #2
 8001224:	2002      	movs	r0, #2
 8001226:	f000 fba5 	bl	8001974 <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 800122a:	f000 fb0f 	bl	800184c <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 800122e:	f000 fb31 	bl	8001894 <BNO080_receivePacket>
 8001232:	4603      	mov	r3, r0
 8001234:	2b01      	cmp	r3, #1
 8001236:	d11b      	bne.n	8001270 <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 8001238:	4b17      	ldr	r3, [pc, #92]	; (8001298 <BNO080_Initialization+0xd4>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4619      	mov	r1, r3
 800123e:	4b16      	ldr	r3, [pc, #88]	; (8001298 <BNO080_Initialization+0xd4>)
 8001240:	785b      	ldrb	r3, [r3, #1]
 8001242:	461a      	mov	r2, r3
 8001244:	4b14      	ldr	r3, [pc, #80]	; (8001298 <BNO080_Initialization+0xd4>)
 8001246:	789b      	ldrb	r3, [r3, #2]
 8001248:	4618      	mov	r0, r3
 800124a:	4b13      	ldr	r3, [pc, #76]	; (8001298 <BNO080_Initialization+0xd4>)
 800124c:	78db      	ldrb	r3, [r3, #3]
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	4603      	mov	r3, r0
 8001252:	4812      	ldr	r0, [pc, #72]	; (800129c <BNO080_Initialization+0xd8>)
 8001254:	f008 fe54 	bl	8009f00 <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8001258:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <BNO080_Initialization+0xd0>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2bf8      	cmp	r3, #248	; 0xf8
 800125e:	d107      	bne.n	8001270 <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <BNO080_Initialization+0xd0>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	4619      	mov	r1, r3
 8001266:	480e      	ldr	r0, [pc, #56]	; (80012a0 <BNO080_Initialization+0xdc>)
 8001268:	f008 fe4a 	bl	8009f00 <iprintf>
			return (0);
 800126c:	2300      	movs	r3, #0
 800126e:	e007      	b.n	8001280 <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <BNO080_Initialization+0xd0>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	22f8      	movs	r2, #248	; 0xf8
 8001276:	4619      	mov	r1, r3
 8001278:	480a      	ldr	r0, [pc, #40]	; (80012a4 <BNO080_Initialization+0xe0>)
 800127a:	f008 fe41 	bl	8009f00 <iprintf>
	return (1); //Something went wrong
 800127e:	2301      	movs	r3, #1
}
 8001280:	4618      	mov	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	0800ce50 	.word	0x0800ce50
 800128c:	40020400 	.word	0x40020400
 8001290:	40020000 	.word	0x40020000
 8001294:	200002f0 	.word	0x200002f0
 8001298:	200002ec 	.word	0x200002ec
 800129c:	0800ce64 	.word	0x0800ce64
 80012a0:	0800ce7c 	.word	0x0800ce7c
 80012a4:	0800ce9c 	.word	0x0800ce9c

080012a8 <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 80012b2:	bf00      	nop
 80012b4:	480c      	ldr	r0, [pc, #48]	; (80012e8 <SPI2_SendByte+0x40>)
 80012b6:	f7ff fe37 	bl	8000f28 <LL_SPI_IsActiveFlag_TXE>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0f9      	beq.n	80012b4 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	4619      	mov	r1, r3
 80012c4:	4808      	ldr	r0, [pc, #32]	; (80012e8 <SPI2_SendByte+0x40>)
 80012c6:	f7ff fe50 	bl	8000f6a <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 80012ca:	bf00      	nop
 80012cc:	4806      	ldr	r0, [pc, #24]	; (80012e8 <SPI2_SendByte+0x40>)
 80012ce:	f7ff fe18 	bl	8000f02 <LL_SPI_IsActiveFlag_RXNE>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d0f9      	beq.n	80012cc <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 80012d8:	4803      	ldr	r0, [pc, #12]	; (80012e8 <SPI2_SendByte+0x40>)
 80012da:	f7ff fe38 	bl	8000f4e <LL_SPI_ReceiveData8>
 80012de:	4603      	mov	r3, r0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40003800 	.word	0x40003800

080012ec <BNO080_dataAvailable>:
//////////////////////////////////////////////////////////////////////////

//Updates the latest variables if possible
//Returns false if new readings are not available
int BNO080_dataAvailable(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is NULL, then we'll rely on BNO080_receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 80012f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012f4:	4811      	ldr	r0, [pc, #68]	; (800133c <BNO080_dataAvailable+0x50>)
 80012f6:	f7ff fe4a 	bl	8000f8e <LL_GPIO_IsInputPinSet>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d101      	bne.n	8001304 <BNO080_dataAvailable+0x18>
		return (0);
 8001300:	2300      	movs	r3, #0
 8001302:	e019      	b.n	8001338 <BNO080_dataAvailable+0x4c>

	if (BNO080_receivePacket() == 1)
 8001304:	f000 fac6 	bl	8001894 <BNO080_receivePacket>
 8001308:	4603      	mov	r3, r0
 800130a:	2b01      	cmp	r3, #1
 800130c:	d113      	bne.n	8001336 <BNO080_dataAvailable+0x4a>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 800130e:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <BNO080_dataAvailable+0x54>)
 8001310:	789b      	ldrb	r3, [r3, #2]
 8001312:	2b03      	cmp	r3, #3
 8001314:	d107      	bne.n	8001326 <BNO080_dataAvailable+0x3a>
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <BNO080_dataAvailable+0x58>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2bfb      	cmp	r3, #251	; 0xfb
 800131c:	d103      	bne.n	8001326 <BNO080_dataAvailable+0x3a>
		{
			BNO080_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 800131e:	f000 f82f 	bl	8001380 <BNO080_parseInputReport>
			return (1);
 8001322:	2301      	movs	r3, #1
 8001324:	e008      	b.n	8001338 <BNO080_dataAvailable+0x4c>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <BNO080_dataAvailable+0x54>)
 8001328:	789b      	ldrb	r3, [r3, #2]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d103      	bne.n	8001336 <BNO080_dataAvailable+0x4a>
		{
			BNO080_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 800132e:	f000 f80b 	bl	8001348 <BNO080_parseCommandReport>
			return (1);
 8001332:	2301      	movs	r3, #1
 8001334:	e000      	b.n	8001338 <BNO080_dataAvailable+0x4c>
		}
	}
	return (0);
 8001336:	2300      	movs	r3, #0
}
 8001338:	4618      	mov	r0, r3
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40020000 	.word	0x40020000
 8001340:	200002ec 	.word	0x200002ec
 8001344:	200002f0 	.word	0x200002f0

08001348 <BNO080_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void BNO080_parseCommandReport(void)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 800134e:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <BNO080_parseCommandReport+0x30>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2bf1      	cmp	r3, #241	; 0xf1
 8001354:	d109      	bne.n	800136a <BNO080_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <BNO080_parseCommandReport+0x30>)
 8001358:	789b      	ldrb	r3, [r3, #2]
 800135a:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	2b07      	cmp	r3, #7
 8001360:	d103      	bne.n	800136a <BNO080_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 8001362:	4b05      	ldr	r3, [pc, #20]	; (8001378 <BNO080_parseCommandReport+0x30>)
 8001364:	795a      	ldrb	r2, [r3, #5]
 8001366:	4b05      	ldr	r3, [pc, #20]	; (800137c <BNO080_parseCommandReport+0x34>)
 8001368:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	200002f0 	.word	0x200002f0
 800137c:	200003b0 	.word	0x200003b0

08001380 <BNO080_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO080_parseInputReport(void)
{
 8001380:	b480      	push	{r7}
 8001382:	b087      	sub	sp, #28
 8001384:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 8001386:	4b98      	ldr	r3, [pc, #608]	; (80015e8 <BNO080_parseInputReport+0x268>)
 8001388:	785b      	ldrb	r3, [r3, #1]
 800138a:	021b      	lsls	r3, r3, #8
 800138c:	b21a      	sxth	r2, r3
 800138e:	4b96      	ldr	r3, [pc, #600]	; (80015e8 <BNO080_parseInputReport+0x268>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	b21b      	sxth	r3, r3
 8001394:	4313      	orrs	r3, r2
 8001396:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 8001398:	8a3b      	ldrh	r3, [r7, #16]
 800139a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800139e:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 80013a0:	8a3b      	ldrh	r3, [r7, #16]
 80013a2:	3b04      	subs	r3, #4
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 80013a8:	4b90      	ldr	r3, [pc, #576]	; (80015ec <BNO080_parseInputReport+0x26c>)
 80013aa:	791b      	ldrb	r3, [r3, #4]
 80013ac:	061b      	lsls	r3, r3, #24
 80013ae:	4a8f      	ldr	r2, [pc, #572]	; (80015ec <BNO080_parseInputReport+0x26c>)
 80013b0:	78d2      	ldrb	r2, [r2, #3]
 80013b2:	0412      	lsls	r2, r2, #16
 80013b4:	4313      	orrs	r3, r2
 80013b6:	4a8d      	ldr	r2, [pc, #564]	; (80015ec <BNO080_parseInputReport+0x26c>)
 80013b8:	7892      	ldrb	r2, [r2, #2]
 80013ba:	0212      	lsls	r2, r2, #8
 80013bc:	4313      	orrs	r3, r2
 80013be:	4a8b      	ldr	r2, [pc, #556]	; (80015ec <BNO080_parseInputReport+0x26c>)
 80013c0:	7852      	ldrb	r2, [r2, #1]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	4a8a      	ldr	r2, [pc, #552]	; (80015f0 <BNO080_parseInputReport+0x270>)
 80013c6:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 80013c8:	4b88      	ldr	r3, [pc, #544]	; (80015ec <BNO080_parseInputReport+0x26c>)
 80013ca:	79db      	ldrb	r3, [r3, #7]
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 80013d2:	4b86      	ldr	r3, [pc, #536]	; (80015ec <BNO080_parseInputReport+0x26c>)
 80013d4:	7a9b      	ldrb	r3, [r3, #10]
 80013d6:	021b      	lsls	r3, r3, #8
 80013d8:	b21a      	sxth	r2, r3
 80013da:	4b84      	ldr	r3, [pc, #528]	; (80015ec <BNO080_parseInputReport+0x26c>)
 80013dc:	7a5b      	ldrb	r3, [r3, #9]
 80013de:	b21b      	sxth	r3, r3
 80013e0:	4313      	orrs	r3, r2
 80013e2:	b21b      	sxth	r3, r3
 80013e4:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 80013e6:	4b81      	ldr	r3, [pc, #516]	; (80015ec <BNO080_parseInputReport+0x26c>)
 80013e8:	7b1b      	ldrb	r3, [r3, #12]
 80013ea:	021b      	lsls	r3, r3, #8
 80013ec:	b21a      	sxth	r2, r3
 80013ee:	4b7f      	ldr	r3, [pc, #508]	; (80015ec <BNO080_parseInputReport+0x26c>)
 80013f0:	7adb      	ldrb	r3, [r3, #11]
 80013f2:	b21b      	sxth	r3, r3
 80013f4:	4313      	orrs	r3, r2
 80013f6:	b21b      	sxth	r3, r3
 80013f8:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 80013fa:	4b7c      	ldr	r3, [pc, #496]	; (80015ec <BNO080_parseInputReport+0x26c>)
 80013fc:	7b9b      	ldrb	r3, [r3, #14]
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	b21a      	sxth	r2, r3
 8001402:	4b7a      	ldr	r3, [pc, #488]	; (80015ec <BNO080_parseInputReport+0x26c>)
 8001404:	7b5b      	ldrb	r3, [r3, #13]
 8001406:	b21b      	sxth	r3, r3
 8001408:	4313      	orrs	r3, r2
 800140a:	b21b      	sxth	r3, r3
 800140c:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 8001416:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800141a:	2b0e      	cmp	r3, #14
 800141c:	dd09      	ble.n	8001432 <BNO080_parseInputReport+0xb2>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 800141e:	4b73      	ldr	r3, [pc, #460]	; (80015ec <BNO080_parseInputReport+0x26c>)
 8001420:	7c1b      	ldrb	r3, [r3, #16]
 8001422:	021b      	lsls	r3, r3, #8
 8001424:	b21a      	sxth	r2, r3
 8001426:	4b71      	ldr	r3, [pc, #452]	; (80015ec <BNO080_parseInputReport+0x26c>)
 8001428:	7bdb      	ldrb	r3, [r3, #15]
 800142a:	b21b      	sxth	r3, r3
 800142c:	4313      	orrs	r3, r2
 800142e:	b21b      	sxth	r3, r3
 8001430:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 8001432:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001436:	2b10      	cmp	r3, #16
 8001438:	dd09      	ble.n	800144e <BNO080_parseInputReport+0xce>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 800143a:	4b6c      	ldr	r3, [pc, #432]	; (80015ec <BNO080_parseInputReport+0x26c>)
 800143c:	7c9b      	ldrb	r3, [r3, #18]
 800143e:	021b      	lsls	r3, r3, #8
 8001440:	b21a      	sxth	r2, r3
 8001442:	4b6a      	ldr	r3, [pc, #424]	; (80015ec <BNO080_parseInputReport+0x26c>)
 8001444:	7c5b      	ldrb	r3, [r3, #17]
 8001446:	b21b      	sxth	r3, r3
 8001448:	4313      	orrs	r3, r2
 800144a:	b21b      	sxth	r3, r3
 800144c:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 800144e:	4b67      	ldr	r3, [pc, #412]	; (80015ec <BNO080_parseInputReport+0x26c>)
 8001450:	795b      	ldrb	r3, [r3, #5]
 8001452:	2b1e      	cmp	r3, #30
 8001454:	dc46      	bgt.n	80014e4 <BNO080_parseInputReport+0x164>
 8001456:	2b00      	cmp	r3, #0
 8001458:	f340 80bf 	ble.w	80015da <BNO080_parseInputReport+0x25a>
 800145c:	3b01      	subs	r3, #1
 800145e:	2b1d      	cmp	r3, #29
 8001460:	f200 80bb 	bhi.w	80015da <BNO080_parseInputReport+0x25a>
 8001464:	a201      	add	r2, pc, #4	; (adr r2, 800146c <BNO080_parseInputReport+0xec>)
 8001466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800146a:	bf00      	nop
 800146c:	080014eb 	.word	0x080014eb
 8001470:	08001523 	.word	0x08001523
 8001474:	0800153f 	.word	0x0800153f
 8001478:	08001507 	.word	0x08001507
 800147c:	0800155b 	.word	0x0800155b
 8001480:	080015db 	.word	0x080015db
 8001484:	080015db 	.word	0x080015db
 8001488:	0800155b 	.word	0x0800155b
 800148c:	080015db 	.word	0x080015db
 8001490:	080015db 	.word	0x080015db
 8001494:	080015db 	.word	0x080015db
 8001498:	080015db 	.word	0x080015db
 800149c:	080015db 	.word	0x080015db
 80014a0:	080015db 	.word	0x080015db
 80014a4:	080015db 	.word	0x080015db
 80014a8:	080015db 	.word	0x080015db
 80014ac:	08001583 	.word	0x08001583
 80014b0:	080015db 	.word	0x080015db
 80014b4:	0800158b 	.word	0x0800158b
 80014b8:	080015db 	.word	0x080015db
 80014bc:	080015db 	.word	0x080015db
 80014c0:	080015db 	.word	0x080015db
 80014c4:	080015db 	.word	0x080015db
 80014c8:	080015db 	.word	0x080015db
 80014cc:	080015db 	.word	0x080015db
 80014d0:	080015db 	.word	0x080015db
 80014d4:	080015db 	.word	0x080015db
 80014d8:	080015db 	.word	0x080015db
 80014dc:	080015db 	.word	0x080015db
 80014e0:	08001595 	.word	0x08001595
 80014e4:	2bf1      	cmp	r3, #241	; 0xf1
 80014e6:	d06d      	beq.n	80015c4 <BNO080_parseInputReport+0x244>
			//See reference manual to add additional feature reports as needed
		}
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 80014e8:	e077      	b.n	80015da <BNO080_parseInputReport+0x25a>
			accelAccuracy = status;
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	4b41      	ldr	r3, [pc, #260]	; (80015f4 <BNO080_parseInputReport+0x274>)
 80014f0:	801a      	strh	r2, [r3, #0]
			rawAccelX = data1;
 80014f2:	4a41      	ldr	r2, [pc, #260]	; (80015f8 <BNO080_parseInputReport+0x278>)
 80014f4:	89bb      	ldrh	r3, [r7, #12]
 80014f6:	8013      	strh	r3, [r2, #0]
			rawAccelY = data2;
 80014f8:	4a40      	ldr	r2, [pc, #256]	; (80015fc <BNO080_parseInputReport+0x27c>)
 80014fa:	897b      	ldrh	r3, [r7, #10]
 80014fc:	8013      	strh	r3, [r2, #0]
			rawAccelZ = data3;
 80014fe:	4a40      	ldr	r2, [pc, #256]	; (8001600 <BNO080_parseInputReport+0x280>)
 8001500:	893b      	ldrh	r3, [r7, #8]
 8001502:	8013      	strh	r3, [r2, #0]
			break;
 8001504:	e069      	b.n	80015da <BNO080_parseInputReport+0x25a>
			accelLinAccuracy = status;
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	b29a      	uxth	r2, r3
 800150a:	4b3e      	ldr	r3, [pc, #248]	; (8001604 <BNO080_parseInputReport+0x284>)
 800150c:	801a      	strh	r2, [r3, #0]
			rawLinAccelX = data1;
 800150e:	4a3e      	ldr	r2, [pc, #248]	; (8001608 <BNO080_parseInputReport+0x288>)
 8001510:	89bb      	ldrh	r3, [r7, #12]
 8001512:	8013      	strh	r3, [r2, #0]
			rawLinAccelY = data2;
 8001514:	4a3d      	ldr	r2, [pc, #244]	; (800160c <BNO080_parseInputReport+0x28c>)
 8001516:	897b      	ldrh	r3, [r7, #10]
 8001518:	8013      	strh	r3, [r2, #0]
			rawLinAccelZ = data3;
 800151a:	4a3d      	ldr	r2, [pc, #244]	; (8001610 <BNO080_parseInputReport+0x290>)
 800151c:	893b      	ldrh	r3, [r7, #8]
 800151e:	8013      	strh	r3, [r2, #0]
			break;
 8001520:	e05b      	b.n	80015da <BNO080_parseInputReport+0x25a>
			gyroAccuracy = status;
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	b29a      	uxth	r2, r3
 8001526:	4b3b      	ldr	r3, [pc, #236]	; (8001614 <BNO080_parseInputReport+0x294>)
 8001528:	801a      	strh	r2, [r3, #0]
			rawGyroX = data1;
 800152a:	4a3b      	ldr	r2, [pc, #236]	; (8001618 <BNO080_parseInputReport+0x298>)
 800152c:	89bb      	ldrh	r3, [r7, #12]
 800152e:	8013      	strh	r3, [r2, #0]
			rawGyroY = data2;
 8001530:	4a3a      	ldr	r2, [pc, #232]	; (800161c <BNO080_parseInputReport+0x29c>)
 8001532:	897b      	ldrh	r3, [r7, #10]
 8001534:	8013      	strh	r3, [r2, #0]
			rawGyroZ = data3;
 8001536:	4a3a      	ldr	r2, [pc, #232]	; (8001620 <BNO080_parseInputReport+0x2a0>)
 8001538:	893b      	ldrh	r3, [r7, #8]
 800153a:	8013      	strh	r3, [r2, #0]
			break;
 800153c:	e04d      	b.n	80015da <BNO080_parseInputReport+0x25a>
			magAccuracy = status;
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	b29a      	uxth	r2, r3
 8001542:	4b38      	ldr	r3, [pc, #224]	; (8001624 <BNO080_parseInputReport+0x2a4>)
 8001544:	801a      	strh	r2, [r3, #0]
			rawMagX = data1;
 8001546:	4a38      	ldr	r2, [pc, #224]	; (8001628 <BNO080_parseInputReport+0x2a8>)
 8001548:	89bb      	ldrh	r3, [r7, #12]
 800154a:	8013      	strh	r3, [r2, #0]
			rawMagY = data2;
 800154c:	4a37      	ldr	r2, [pc, #220]	; (800162c <BNO080_parseInputReport+0x2ac>)
 800154e:	897b      	ldrh	r3, [r7, #10]
 8001550:	8013      	strh	r3, [r2, #0]
			rawMagZ = data3;
 8001552:	4a37      	ldr	r2, [pc, #220]	; (8001630 <BNO080_parseInputReport+0x2b0>)
 8001554:	893b      	ldrh	r3, [r7, #8]
 8001556:	8013      	strh	r3, [r2, #0]
			break;
 8001558:	e03f      	b.n	80015da <BNO080_parseInputReport+0x25a>
			quatAccuracy = status;
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	b29a      	uxth	r2, r3
 800155e:	4b35      	ldr	r3, [pc, #212]	; (8001634 <BNO080_parseInputReport+0x2b4>)
 8001560:	801a      	strh	r2, [r3, #0]
			rawQuatI = data1;
 8001562:	4a35      	ldr	r2, [pc, #212]	; (8001638 <BNO080_parseInputReport+0x2b8>)
 8001564:	89bb      	ldrh	r3, [r7, #12]
 8001566:	8013      	strh	r3, [r2, #0]
			rawQuatJ = data2;
 8001568:	4a34      	ldr	r2, [pc, #208]	; (800163c <BNO080_parseInputReport+0x2bc>)
 800156a:	897b      	ldrh	r3, [r7, #10]
 800156c:	8013      	strh	r3, [r2, #0]
			rawQuatK = data3;
 800156e:	4a34      	ldr	r2, [pc, #208]	; (8001640 <BNO080_parseInputReport+0x2c0>)
 8001570:	893b      	ldrh	r3, [r7, #8]
 8001572:	8013      	strh	r3, [r2, #0]
			rawQuatReal = data4;
 8001574:	4a33      	ldr	r2, [pc, #204]	; (8001644 <BNO080_parseInputReport+0x2c4>)
 8001576:	8afb      	ldrh	r3, [r7, #22]
 8001578:	8013      	strh	r3, [r2, #0]
			rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 800157a:	4a33      	ldr	r2, [pc, #204]	; (8001648 <BNO080_parseInputReport+0x2c8>)
 800157c:	8abb      	ldrh	r3, [r7, #20]
 800157e:	8013      	strh	r3, [r2, #0]
			break;
 8001580:	e02b      	b.n	80015da <BNO080_parseInputReport+0x25a>
			stepCount = data3; //Bytes 8/9
 8001582:	4a32      	ldr	r2, [pc, #200]	; (800164c <BNO080_parseInputReport+0x2cc>)
 8001584:	893b      	ldrh	r3, [r7, #8]
 8001586:	8013      	strh	r3, [r2, #0]
			break;
 8001588:	e027      	b.n	80015da <BNO080_parseInputReport+0x25a>
			stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 800158a:	4b18      	ldr	r3, [pc, #96]	; (80015ec <BNO080_parseInputReport+0x26c>)
 800158c:	7a5a      	ldrb	r2, [r3, #9]
 800158e:	4b30      	ldr	r3, [pc, #192]	; (8001650 <BNO080_parseInputReport+0x2d0>)
 8001590:	701a      	strb	r2, [r3, #0]
			break;
 8001592:	e022      	b.n	80015da <BNO080_parseInputReport+0x25a>
			activityClassifier = shtpData[5 + 5]; //Most likely state
 8001594:	4b15      	ldr	r3, [pc, #84]	; (80015ec <BNO080_parseInputReport+0x26c>)
 8001596:	7a9a      	ldrb	r2, [r3, #10]
 8001598:	4b2e      	ldr	r3, [pc, #184]	; (8001654 <BNO080_parseInputReport+0x2d4>)
 800159a:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 800159c:	2300      	movs	r3, #0
 800159e:	74fb      	strb	r3, [r7, #19]
 80015a0:	e00c      	b.n	80015bc <BNO080_parseInputReport+0x23c>
				_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 80015a2:	7cfb      	ldrb	r3, [r7, #19]
 80015a4:	f103 020b 	add.w	r2, r3, #11
 80015a8:	4b2b      	ldr	r3, [pc, #172]	; (8001658 <BNO080_parseInputReport+0x2d8>)
 80015aa:	6819      	ldr	r1, [r3, #0]
 80015ac:	7cfb      	ldrb	r3, [r7, #19]
 80015ae:	440b      	add	r3, r1
 80015b0:	490e      	ldr	r1, [pc, #56]	; (80015ec <BNO080_parseInputReport+0x26c>)
 80015b2:	5c8a      	ldrb	r2, [r1, r2]
 80015b4:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 80015b6:	7cfb      	ldrb	r3, [r7, #19]
 80015b8:	3301      	adds	r3, #1
 80015ba:	74fb      	strb	r3, [r7, #19]
 80015bc:	7cfb      	ldrb	r3, [r7, #19]
 80015be:	2b08      	cmp	r3, #8
 80015c0:	d9ef      	bls.n	80015a2 <BNO080_parseInputReport+0x222>
			break;
 80015c2:	e00a      	b.n	80015da <BNO080_parseInputReport+0x25a>
			uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 80015c4:	4b09      	ldr	r3, [pc, #36]	; (80015ec <BNO080_parseInputReport+0x26c>)
 80015c6:	79db      	ldrb	r3, [r3, #7]
 80015c8:	71fb      	strb	r3, [r7, #7]
			if (command == COMMAND_ME_CALIBRATE)
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	2b07      	cmp	r3, #7
 80015ce:	d103      	bne.n	80015d8 <BNO080_parseInputReport+0x258>
				calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <BNO080_parseInputReport+0x26c>)
 80015d2:	7a9a      	ldrb	r2, [r3, #10]
 80015d4:	4b21      	ldr	r3, [pc, #132]	; (800165c <BNO080_parseInputReport+0x2dc>)
 80015d6:	701a      	strb	r2, [r3, #0]
			break;
 80015d8:	bf00      	nop
}
 80015da:	bf00      	nop
 80015dc:	371c      	adds	r7, #28
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	200002ec 	.word	0x200002ec
 80015ec:	200002f0 	.word	0x200002f0
 80015f0:	200003a4 	.word	0x200003a4
 80015f4:	2000037c 	.word	0x2000037c
 80015f8:	20000376 	.word	0x20000376
 80015fc:	20000378 	.word	0x20000378
 8001600:	2000037a 	.word	0x2000037a
 8001604:	20000384 	.word	0x20000384
 8001608:	2000037e 	.word	0x2000037e
 800160c:	20000380 	.word	0x20000380
 8001610:	20000382 	.word	0x20000382
 8001614:	2000038c 	.word	0x2000038c
 8001618:	20000386 	.word	0x20000386
 800161c:	20000388 	.word	0x20000388
 8001620:	2000038a 	.word	0x2000038a
 8001624:	20000394 	.word	0x20000394
 8001628:	2000038e 	.word	0x2000038e
 800162c:	20000390 	.word	0x20000390
 8001630:	20000392 	.word	0x20000392
 8001634:	200003a0 	.word	0x200003a0
 8001638:	20000396 	.word	0x20000396
 800163c:	20000398 	.word	0x20000398
 8001640:	2000039a 	.word	0x2000039a
 8001644:	2000039c 	.word	0x2000039c
 8001648:	2000039e 	.word	0x2000039e
 800164c:	200003a2 	.word	0x200003a2
 8001650:	200003a8 	.word	0x200003a8
 8001654:	200003a9 	.word	0x200003a9
 8001658:	200003ac 	.word	0x200003ac
 800165c:	200003b0 	.word	0x200003b0

08001660 <BNO080_getQuatI>:

//Return the rotation vector quaternion I
float BNO080_getQuatI()
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatI, rotationVector_Q1);
 8001664:	4b07      	ldr	r3, [pc, #28]	; (8001684 <BNO080_getQuatI+0x24>)
 8001666:	881b      	ldrh	r3, [r3, #0]
 8001668:	b21b      	sxth	r3, r3
 800166a:	4a07      	ldr	r2, [pc, #28]	; (8001688 <BNO080_getQuatI+0x28>)
 800166c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001670:	b2d2      	uxtb	r2, r2
 8001672:	4611      	mov	r1, r2
 8001674:	4618      	mov	r0, r3
 8001676:	f000 f861 	bl	800173c <BNO080_qToFloat>
 800167a:	eef0 7a40 	vmov.f32	s15, s0
}
 800167e:	eeb0 0a67 	vmov.f32	s0, s15
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000396 	.word	0x20000396
 8001688:	20000000 	.word	0x20000000

0800168c <BNO080_getQuatJ>:

//Return the rotation vector quaternion J
float BNO080_getQuatJ()
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatJ, rotationVector_Q1);
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <BNO080_getQuatJ+0x24>)
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	b21b      	sxth	r3, r3
 8001696:	4a07      	ldr	r2, [pc, #28]	; (80016b4 <BNO080_getQuatJ+0x28>)
 8001698:	f9b2 2000 	ldrsh.w	r2, [r2]
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	4611      	mov	r1, r2
 80016a0:	4618      	mov	r0, r3
 80016a2:	f000 f84b 	bl	800173c <BNO080_qToFloat>
 80016a6:	eef0 7a40 	vmov.f32	s15, s0
}
 80016aa:	eeb0 0a67 	vmov.f32	s0, s15
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000398 	.word	0x20000398
 80016b4:	20000000 	.word	0x20000000

080016b8 <BNO080_getQuatK>:

//Return the rotation vector quaternion K
float BNO080_getQuatK()
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatK, rotationVector_Q1);
 80016bc:	4b07      	ldr	r3, [pc, #28]	; (80016dc <BNO080_getQuatK+0x24>)
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	b21b      	sxth	r3, r3
 80016c2:	4a07      	ldr	r2, [pc, #28]	; (80016e0 <BNO080_getQuatK+0x28>)
 80016c4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 f835 	bl	800173c <BNO080_qToFloat>
 80016d2:	eef0 7a40 	vmov.f32	s15, s0
}
 80016d6:	eeb0 0a67 	vmov.f32	s0, s15
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	2000039a 	.word	0x2000039a
 80016e0:	20000000 	.word	0x20000000

080016e4 <BNO080_getQuatReal>:

//Return the rotation vector quaternion Real
float BNO080_getQuatReal()
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatReal, rotationVector_Q1);
 80016e8:	4b07      	ldr	r3, [pc, #28]	; (8001708 <BNO080_getQuatReal+0x24>)
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	4a07      	ldr	r2, [pc, #28]	; (800170c <BNO080_getQuatReal+0x28>)
 80016f0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f000 f81f 	bl	800173c <BNO080_qToFloat>
 80016fe:	eef0 7a40 	vmov.f32	s15, s0
}
 8001702:	eeb0 0a67 	vmov.f32	s0, s15
 8001706:	bd80      	pop	{r7, pc}
 8001708:	2000039c 	.word	0x2000039c
 800170c:	20000000 	.word	0x20000000

08001710 <BNO080_getQuatRadianAccuracy>:

//Return the rotation vector accuracy
float BNO080_getQuatRadianAccuracy()
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
 8001714:	4b07      	ldr	r3, [pc, #28]	; (8001734 <BNO080_getQuatRadianAccuracy+0x24>)
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	b21b      	sxth	r3, r3
 800171a:	4a07      	ldr	r2, [pc, #28]	; (8001738 <BNO080_getQuatRadianAccuracy+0x28>)
 800171c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	4611      	mov	r1, r2
 8001724:	4618      	mov	r0, r3
 8001726:	f000 f809 	bl	800173c <BNO080_qToFloat>
 800172a:	eef0 7a40 	vmov.f32	s15, s0
}
 800172e:	eeb0 0a67 	vmov.f32	s0, s15
 8001732:	bd80      	pop	{r7, pc}
 8001734:	2000039e 	.word	0x2000039e
 8001738:	20000000 	.word	0x20000000

0800173c <BNO080_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	ed2d 8b02 	vpush	{d8}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	460a      	mov	r2, r1
 800174a:	80fb      	strh	r3, [r7, #6]
 800174c:	4613      	mov	r3, r2
 800174e:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 8001750:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001754:	ee07 3a90 	vmov	s15, r3
 8001758:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800175c:	797b      	ldrb	r3, [r7, #5]
 800175e:	425b      	negs	r3, r3
 8001760:	ee07 3a90 	vmov	s15, r3
 8001764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001768:	eef0 0a67 	vmov.f32	s1, s15
 800176c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001770:	f00a fd2e 	bl	800c1d0 <powf>
 8001774:	eef0 7a40 	vmov.f32	s15, s0
 8001778:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 800177c:	eeb0 0a67 	vmov.f32	s0, s15
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	ecbd 8b02 	vpop	{d8}
 8001788:	bd80      	pop	{r7, pc}

0800178a <BNO080_enableRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	4603      	mov	r3, r0
 8001792:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 8001794:	88fb      	ldrh	r3, [r7, #6]
 8001796:	2200      	movs	r2, #0
 8001798:	4619      	mov	r1, r3
 800179a:	2005      	movs	r0, #5
 800179c:	f000 f804 	bl	80017a8 <BNO080_setFeatureCommand>
}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <BNO080_setFeatureCommand>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
 80017b4:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 80017b6:	4b24      	ldr	r3, [pc, #144]	; (8001848 <BNO080_setFeatureCommand+0xa0>)
 80017b8:	22fd      	movs	r2, #253	; 0xfd
 80017ba:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 80017bc:	4a22      	ldr	r2, [pc, #136]	; (8001848 <BNO080_setFeatureCommand+0xa0>)
 80017be:	7bfb      	ldrb	r3, [r7, #15]
 80017c0:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 80017c2:	4b21      	ldr	r3, [pc, #132]	; (8001848 <BNO080_setFeatureCommand+0xa0>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 80017c8:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <BNO080_setFeatureCommand+0xa0>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 80017ce:	4b1e      	ldr	r3, [pc, #120]	; (8001848 <BNO080_setFeatureCommand+0xa0>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <BNO080_setFeatureCommand+0xa0>)
 80017da:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	0a1b      	lsrs	r3, r3, #8
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	4b19      	ldr	r3, [pc, #100]	; (8001848 <BNO080_setFeatureCommand+0xa0>)
 80017e4:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	0c1b      	lsrs	r3, r3, #16
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	4b16      	ldr	r3, [pc, #88]	; (8001848 <BNO080_setFeatureCommand+0xa0>)
 80017ee:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	0e1b      	lsrs	r3, r3, #24
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	4b14      	ldr	r3, [pc, #80]	; (8001848 <BNO080_setFeatureCommand+0xa0>)
 80017f8:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 80017fa:	4b13      	ldr	r3, [pc, #76]	; (8001848 <BNO080_setFeatureCommand+0xa0>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8001800:	4b11      	ldr	r3, [pc, #68]	; (8001848 <BNO080_setFeatureCommand+0xa0>)
 8001802:	2200      	movs	r2, #0
 8001804:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <BNO080_setFeatureCommand+0xa0>)
 8001808:	2200      	movs	r2, #0
 800180a:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 800180c:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <BNO080_setFeatureCommand+0xa0>)
 800180e:	2200      	movs	r2, #0
 8001810:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <BNO080_setFeatureCommand+0xa0>)
 8001818:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	0a1b      	lsrs	r3, r3, #8
 800181e:	b2da      	uxtb	r2, r3
 8001820:	4b09      	ldr	r3, [pc, #36]	; (8001848 <BNO080_setFeatureCommand+0xa0>)
 8001822:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	b2da      	uxtb	r2, r3
 800182a:	4b07      	ldr	r3, [pc, #28]	; (8001848 <BNO080_setFeatureCommand+0xa0>)
 800182c:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	0e1b      	lsrs	r3, r3, #24
 8001832:	b2da      	uxtb	r2, r3
 8001834:	4b04      	ldr	r3, [pc, #16]	; (8001848 <BNO080_setFeatureCommand+0xa0>)
 8001836:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8001838:	2111      	movs	r1, #17
 800183a:	2002      	movs	r0, #2
 800183c:	f000 f89a 	bl	8001974 <BNO080_sendPacket>
}
 8001840:	bf00      	nop
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	200002f0 	.word	0x200002f0

0800184c <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001852:	2300      	movs	r3, #0
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	e00c      	b.n	8001872 <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 8001858:	f44f 7100 	mov.w	r1, #512	; 0x200
 800185c:	480b      	ldr	r0, [pc, #44]	; (800188c <BNO080_waitForSPI+0x40>)
 800185e:	f7ff fb96 	bl	8000f8e <LL_GPIO_IsInputPinSet>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 8001868:	2301      	movs	r3, #1
 800186a:	e00a      	b.n	8001882 <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3301      	adds	r3, #1
 8001870:	607b      	str	r3, [r7, #4]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001878:	d1ee      	bne.n	8001858 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 800187a:	4805      	ldr	r0, [pc, #20]	; (8001890 <BNO080_waitForSPI+0x44>)
 800187c:	f008 fbc6 	bl	800a00c <puts>
	return (0);
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40020000 	.word	0x40020000
 8001890:	0800cee8 	.word	0x0800cee8

08001894 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 800189a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800189e:	4831      	ldr	r0, [pc, #196]	; (8001964 <BNO080_receivePacket+0xd0>)
 80018a0:	f7ff fb75 	bl	8000f8e <LL_GPIO_IsInputPinSet>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d101      	bne.n	80018ae <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 80018aa:	2300      	movs	r3, #0
 80018ac:	e056      	b.n	800195c <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 80018ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018b2:	482d      	ldr	r0, [pc, #180]	; (8001968 <BNO080_receivePacket+0xd4>)
 80018b4:	f7ff fb8e 	bl	8000fd4 <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 80018b8:	2000      	movs	r0, #0
 80018ba:	f7ff fcf5 	bl	80012a8 <SPI2_SendByte>
 80018be:	4603      	mov	r3, r0
 80018c0:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 80018c2:	2000      	movs	r0, #0
 80018c4:	f7ff fcf0 	bl	80012a8 <SPI2_SendByte>
 80018c8:	4603      	mov	r3, r0
 80018ca:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 80018cc:	2000      	movs	r0, #0
 80018ce:	f7ff fceb 	bl	80012a8 <SPI2_SendByte>
 80018d2:	4603      	mov	r3, r0
 80018d4:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 80018d6:	2000      	movs	r0, #0
 80018d8:	f7ff fce6 	bl	80012a8 <SPI2_SendByte>
 80018dc:	4603      	mov	r3, r0
 80018de:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 80018e0:	4a22      	ldr	r2, [pc, #136]	; (800196c <BNO080_receivePacket+0xd8>)
 80018e2:	7b7b      	ldrb	r3, [r7, #13]
 80018e4:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 80018e6:	4a21      	ldr	r2, [pc, #132]	; (800196c <BNO080_receivePacket+0xd8>)
 80018e8:	7b3b      	ldrb	r3, [r7, #12]
 80018ea:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 80018ec:	4a1f      	ldr	r2, [pc, #124]	; (800196c <BNO080_receivePacket+0xd8>)
 80018ee:	7afb      	ldrb	r3, [r7, #11]
 80018f0:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 80018f2:	4a1e      	ldr	r2, [pc, #120]	; (800196c <BNO080_receivePacket+0xd8>)
 80018f4:	7abb      	ldrb	r3, [r7, #10]
 80018f6:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 80018f8:	7b3b      	ldrb	r3, [r7, #12]
 80018fa:	021b      	lsls	r3, r3, #8
 80018fc:	b21a      	sxth	r2, r3
 80018fe:	7b7b      	ldrb	r3, [r7, #13]
 8001900:	b21b      	sxth	r3, r3
 8001902:	4313      	orrs	r3, r2
 8001904:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8001906:	893b      	ldrh	r3, [r7, #8]
 8001908:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800190c:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 800190e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 8001916:	2300      	movs	r3, #0
 8001918:	e020      	b.n	800195c <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 800191a:	893b      	ldrh	r3, [r7, #8]
 800191c:	3b04      	subs	r3, #4
 800191e:	b29b      	uxth	r3, r3
 8001920:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001922:	2300      	movs	r3, #0
 8001924:	81fb      	strh	r3, [r7, #14]
 8001926:	e00e      	b.n	8001946 <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 8001928:	20ff      	movs	r0, #255	; 0xff
 800192a:	f7ff fcbd 	bl	80012a8 <SPI2_SendByte>
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8001932:	89fb      	ldrh	r3, [r7, #14]
 8001934:	2b7f      	cmp	r3, #127	; 0x7f
 8001936:	d803      	bhi.n	8001940 <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8001938:	89fb      	ldrh	r3, [r7, #14]
 800193a:	490d      	ldr	r1, [pc, #52]	; (8001970 <BNO080_receivePacket+0xdc>)
 800193c:	79fa      	ldrb	r2, [r7, #7]
 800193e:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001940:	89fb      	ldrh	r3, [r7, #14]
 8001942:	3301      	adds	r3, #1
 8001944:	81fb      	strh	r3, [r7, #14]
 8001946:	89fa      	ldrh	r2, [r7, #14]
 8001948:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800194c:	429a      	cmp	r2, r3
 800194e:	dbeb      	blt.n	8001928 <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8001950:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001954:	4804      	ldr	r0, [pc, #16]	; (8001968 <BNO080_receivePacket+0xd4>)
 8001956:	f7ff fb2f 	bl	8000fb8 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 800195a:	2301      	movs	r3, #1
}
 800195c:	4618      	mov	r0, r3
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40020000 	.word	0x40020000
 8001968:	40020400 	.word	0x40020400
 800196c:	200002ec 	.word	0x200002ec
 8001970:	200002f0 	.word	0x200002f0

08001974 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	460a      	mov	r2, r1
 800197e:	71fb      	strb	r3, [r7, #7]
 8001980:	4613      	mov	r3, r2
 8001982:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8001984:	79bb      	ldrb	r3, [r7, #6]
 8001986:	3304      	adds	r3, #4
 8001988:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 800198a:	f7ff ff5f 	bl	800184c <BNO080_waitForSPI>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 8001994:	2300      	movs	r3, #0
 8001996:	e032      	b.n	80019fe <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 8001998:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800199c:	481a      	ldr	r0, [pc, #104]	; (8001a08 <BNO080_sendPacket+0x94>)
 800199e:	f7ff fb19 	bl	8000fd4 <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 80019a2:	7bbb      	ldrb	r3, [r7, #14]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fc7f 	bl	80012a8 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 80019aa:	7bbb      	ldrb	r3, [r7, #14]
 80019ac:	121b      	asrs	r3, r3, #8
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fc79 	bl	80012a8 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fc75 	bl	80012a8 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	4a12      	ldr	r2, [pc, #72]	; (8001a0c <BNO080_sendPacket+0x98>)
 80019c2:	5cd2      	ldrb	r2, [r2, r3]
 80019c4:	1c51      	adds	r1, r2, #1
 80019c6:	b2c8      	uxtb	r0, r1
 80019c8:	4910      	ldr	r1, [pc, #64]	; (8001a0c <BNO080_sendPacket+0x98>)
 80019ca:	54c8      	strb	r0, [r1, r3]
 80019cc:	4610      	mov	r0, r2
 80019ce:	f7ff fc6b 	bl	80012a8 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 80019d2:	2300      	movs	r3, #0
 80019d4:	73fb      	strb	r3, [r7, #15]
 80019d6:	e008      	b.n	80019ea <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	4a0d      	ldr	r2, [pc, #52]	; (8001a10 <BNO080_sendPacket+0x9c>)
 80019dc:	5cd3      	ldrb	r3, [r2, r3]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff fc62 	bl	80012a8 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
 80019e6:	3301      	adds	r3, #1
 80019e8:	73fb      	strb	r3, [r7, #15]
 80019ea:	7bfa      	ldrb	r2, [r7, #15]
 80019ec:	79bb      	ldrb	r3, [r7, #6]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d3f2      	bcc.n	80019d8 <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 80019f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019f6:	4804      	ldr	r0, [pc, #16]	; (8001a08 <BNO080_sendPacket+0x94>)
 80019f8:	f7ff fade 	bl	8000fb8 <LL_GPIO_SetOutputPin>

	return (1);
 80019fc:	2301      	movs	r3, #1
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40020400 	.word	0x40020400
 8001a0c:	20000370 	.word	0x20000370
 8001a10:	200002f0 	.word	0x200002f0

08001a14 <Quaternion_Update>:
float BNO080_Roll;
float BNO080_Pitch;
float BNO080_Yaw;

void Quaternion_Update(float* q)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b088      	sub	sp, #32
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;
	float norm;

	norm = invSqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);    // normalize quaternion
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	ed93 7a00 	vldr	s14, [r3]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	edd3 7a00 	vldr	s15, [r3]
 8001a28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3304      	adds	r3, #4
 8001a30:	edd3 6a00 	vldr	s13, [r3]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3304      	adds	r3, #4
 8001a38:	edd3 7a00 	vldr	s15, [r3]
 8001a3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3308      	adds	r3, #8
 8001a48:	edd3 6a00 	vldr	s13, [r3]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3308      	adds	r3, #8
 8001a50:	edd3 7a00 	vldr	s15, [r3]
 8001a54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	330c      	adds	r3, #12
 8001a60:	edd3 6a00 	vldr	s13, [r3]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	330c      	adds	r3, #12
 8001a68:	edd3 7a00 	vldr	s15, [r3]
 8001a6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a74:	eeb0 0a67 	vmov.f32	s0, s15
 8001a78:	f000 f90e 	bl	8001c98 <invSqrt>
 8001a7c:	ed87 0a07 	vstr	s0, [r7, #28]
	
	q1 = q[0] * norm; //x
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	edd3 7a00 	vldr	s15, [r3]
 8001a86:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a8e:	edc7 7a06 	vstr	s15, [r7, #24]
	q2 = q[1] * norm; //y
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3304      	adds	r3, #4
 8001a96:	edd3 7a00 	vldr	s15, [r3]
 8001a9a:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa2:	edc7 7a05 	vstr	s15, [r7, #20]
	q3 = q[2] * norm; //z
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	3308      	adds	r3, #8
 8001aaa:	edd3 7a00 	vldr	s15, [r3]
 8001aae:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab6:	edc7 7a04 	vstr	s15, [r7, #16]
	q4 = q[3] * norm; //w
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	330c      	adds	r3, #12
 8001abe:	edd3 7a00 	vldr	s15, [r3]
 8001ac2:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aca:	edc7 7a03 	vstr	s15, [r7, #12]

	BNO080_Pitch = atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 8001ace:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ad2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ad6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ada:	edd7 6a06 	vldr	s13, [r7, #24]
 8001ade:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ae2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ae6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aea:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001aee:	edd7 7a06 	vldr	s15, [r7, #24]
 8001af2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001af6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001afa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001afe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b02:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b06:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b12:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b1a:	eef0 0a67 	vmov.f32	s1, s15
 8001b1e:	eeb0 0a66 	vmov.f32	s0, s13
 8001b22:	f00a fb53 	bl	800c1cc <atan2f>
 8001b26:	eef0 7a40 	vmov.f32	s15, s0
 8001b2a:	4b55      	ldr	r3, [pc, #340]	; (8001c80 <Quaternion_Update+0x26c>)
 8001b2c:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  = -asinf(2.0f * (q2*q4 - q1*q3));
 8001b30:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b34:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b3c:	edd7 6a06 	vldr	s13, [r7, #24]
 8001b40:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b4c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b50:	eeb0 0a67 	vmov.f32	s0, s15
 8001b54:	f00a fb0e 	bl	800c174 <asinf>
 8001b58:	eef0 7a40 	vmov.f32	s15, s0
 8001b5c:	eef1 7a67 	vneg.f32	s15, s15
 8001b60:	4b48      	ldr	r3, [pc, #288]	; (8001c84 <Quaternion_Update+0x270>)
 8001b62:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   = atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 8001b66:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b6a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b72:	edd7 6a04 	vldr	s13, [r7, #16]
 8001b76:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b82:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001b86:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b8a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001b8e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b92:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b9e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ba2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ba6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001baa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001bae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bb2:	eef0 0a67 	vmov.f32	s1, s15
 8001bb6:	eeb0 0a66 	vmov.f32	s0, s13
 8001bba:	f00a fb07 	bl	800c1cc <atan2f>
 8001bbe:	eef0 7a40 	vmov.f32	s15, s0
 8001bc2:	4b31      	ldr	r3, [pc, #196]	; (8001c88 <Quaternion_Update+0x274>)
 8001bc4:	edc3 7a00 	vstr	s15, [r3]

	BNO080_Pitch *= _180_DIV_PI;
 8001bc8:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <Quaternion_Update+0x26c>)
 8001bca:	edd3 7a00 	vldr	s15, [r3]
 8001bce:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001c8c <Quaternion_Update+0x278>
 8001bd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bd6:	4b2a      	ldr	r3, [pc, #168]	; (8001c80 <Quaternion_Update+0x26c>)
 8001bd8:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  *= _180_DIV_PI;
 8001bdc:	4b29      	ldr	r3, [pc, #164]	; (8001c84 <Quaternion_Update+0x270>)
 8001bde:	edd3 7a00 	vldr	s15, [r3]
 8001be2:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001c8c <Quaternion_Update+0x278>
 8001be6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bea:	4b26      	ldr	r3, [pc, #152]	; (8001c84 <Quaternion_Update+0x270>)
 8001bec:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   *= _180_DIV_PI;
 8001bf0:	4b25      	ldr	r3, [pc, #148]	; (8001c88 <Quaternion_Update+0x274>)
 8001bf2:	edd3 7a00 	vldr	s15, [r3]
 8001bf6:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001c8c <Quaternion_Update+0x278>
 8001bfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bfe:	4b22      	ldr	r3, [pc, #136]	; (8001c88 <Quaternion_Update+0x274>)
 8001c00:	edc3 7a00 	vstr	s15, [r3]
	
	if(BNO080_Yaw>=0)
 8001c04:	4b20      	ldr	r3, [pc, #128]	; (8001c88 <Quaternion_Update+0x274>)
 8001c06:	edd3 7a00 	vldr	s15, [r3]
 8001c0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c12:	db0a      	blt.n	8001c2a <Quaternion_Update+0x216>
		BNO080_Yaw = 360.f - BNO080_Yaw;
 8001c14:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <Quaternion_Update+0x274>)
 8001c16:	edd3 7a00 	vldr	s15, [r3]
 8001c1a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001c90 <Quaternion_Update+0x27c>
 8001c1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c22:	4b19      	ldr	r3, [pc, #100]	; (8001c88 <Quaternion_Update+0x274>)
 8001c24:	edc3 7a00 	vstr	s15, [r3]
 8001c28:	e007      	b.n	8001c3a <Quaternion_Update+0x226>
	else	
		BNO080_Yaw = -BNO080_Yaw;
 8001c2a:	4b17      	ldr	r3, [pc, #92]	; (8001c88 <Quaternion_Update+0x274>)
 8001c2c:	edd3 7a00 	vldr	s15, [r3]
 8001c30:	eef1 7a67 	vneg.f32	s15, s15
 8001c34:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <Quaternion_Update+0x274>)
 8001c36:	edc3 7a00 	vstr	s15, [r3]
	
	
	if(BNO080_Pitch>=0)
 8001c3a:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <Quaternion_Update+0x26c>)
 8001c3c:	edd3 7a00 	vldr	s15, [r3]
 8001c40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c48:	db0a      	blt.n	8001c60 <Quaternion_Update+0x24c>
		BNO080_Pitch = 180.f - BNO080_Pitch;
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <Quaternion_Update+0x26c>)
 8001c4c:	edd3 7a00 	vldr	s15, [r3]
 8001c50:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001c94 <Quaternion_Update+0x280>
 8001c54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c58:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <Quaternion_Update+0x26c>)
 8001c5a:	edc3 7a00 	vstr	s15, [r3]
	else
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
}
 8001c5e:	e00b      	b.n	8001c78 <Quaternion_Update+0x264>
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
 8001c60:	4b07      	ldr	r3, [pc, #28]	; (8001c80 <Quaternion_Update+0x26c>)
 8001c62:	edd3 7a00 	vldr	s15, [r3]
 8001c66:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001c94 <Quaternion_Update+0x280>
 8001c6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c6e:	eef1 7a67 	vneg.f32	s15, s15
 8001c72:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <Quaternion_Update+0x26c>)
 8001c74:	edc3 7a00 	vstr	s15, [r3]
}
 8001c78:	bf00      	nop
 8001c7a:	3720      	adds	r7, #32
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	200003b8 	.word	0x200003b8
 8001c84:	200003b4 	.word	0x200003b4
 8001c88:	200003bc 	.word	0x200003bc
 8001c8c:	42652ee1 	.word	0x42652ee1
 8001c90:	43b40000 	.word	0x43b40000
 8001c94:	43340000 	.word	0x43340000

08001c98 <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b087      	sub	sp, #28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8001ca2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ca6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001caa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cae:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8001cb6:	f107 0310 	add.w	r3, r7, #16
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	105a      	asrs	r2, r3, #1
 8001cc2:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <invSqrt+0x74>)
 8001cc4:	1a9b      	subs	r3, r3, r2
 8001cc6:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8001cc8:	f107 030c 	add.w	r3, r7, #12
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8001cd0:	ed97 7a04 	vldr	s14, [r7, #16]
 8001cd4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cdc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ce0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001ce8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cec:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf4:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	ee07 3a90 	vmov	s15, r3
}
 8001cfe:	eeb0 0a67 	vmov.f32	s0, s15
 8001d02:	371c      	adds	r7, #28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	5f3759df 	.word	0x5f3759df

08001d10 <LL_SPI_SetStandard>:
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f023 0210 	bic.w	r2, r3, #16
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	431a      	orrs	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	605a      	str	r2, [r3, #4]
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <LL_GPIO_ResetOutputPin>:
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	041a      	lsls	r2, r3, #16
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	619a      	str	r2, [r3, #24]
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <LL_AHB1_GRP1_EnableClock>:
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001d5c:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001d5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d60:	4907      	ldr	r1, [pc, #28]	; (8001d80 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001d68:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001d6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d72:	68fb      	ldr	r3, [r7, #12]
}
 8001d74:	bf00      	nop
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	40023800 	.word	0x40023800

08001d84 <LL_APB1_GRP1_EnableClock>:
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001d8c:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001d8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d90:	4907      	ldr	r1, [pc, #28]	; (8001db0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001d98:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001d9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001da2:	68fb      	ldr	r3, [r7, #12]
}
 8001da4:	bf00      	nop
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	40023800 	.word	0x40023800

08001db4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001dbc:	1d39      	adds	r1, r7, #4
 8001dbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	4803      	ldr	r0, [pc, #12]	; (8001dd4 <__io_putchar+0x20>)
 8001dc6:	f002 fde4 	bl	8004992 <HAL_UART_Transmit>
  return ch;
 8001dca:	687b      	ldr	r3, [r7, #4]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	200003c0 	.word	0x200003c0

08001dd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dd8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ddc:	b084      	sub	sp, #16
 8001dde:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001de0:	f000 fb6e 	bl	80024c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001de4:	f000 f86c 	bl	8001ec0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001de8:	f000 f952 	bl	8002090 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001dec:	f000 f8d2 	bl	8001f94 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8001df0:	f006 ff00 	bl	8008bf4 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 8001df4:	f000 f922 	bl	800203c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  BNO080_Initialization();
 8001df8:	f7ff f9e4 	bl	80011c4 <BNO080_Initialization>
  BNO080_enableRotationVector(2500); //enable rotation vector at 400Hz
 8001dfc:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8001e00:	f7ff fcc3 	bl	800178a <BNO080_enableRotationVector>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(BNO080_dataAvailable() == 1)
 8001e04:	f7ff fa72 	bl	80012ec <BNO080_dataAvailable>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d1fa      	bne.n	8001e04 <main+0x2c>
	  {
		  q[0] = BNO080_getQuatI();
 8001e0e:	f7ff fc27 	bl	8001660 <BNO080_getQuatI>
 8001e12:	eef0 7a40 	vmov.f32	s15, s0
 8001e16:	4b23      	ldr	r3, [pc, #140]	; (8001ea4 <main+0xcc>)
 8001e18:	edc3 7a00 	vstr	s15, [r3]
		  q[1] = BNO080_getQuatJ();
 8001e1c:	f7ff fc36 	bl	800168c <BNO080_getQuatJ>
 8001e20:	eef0 7a40 	vmov.f32	s15, s0
 8001e24:	4b1f      	ldr	r3, [pc, #124]	; (8001ea4 <main+0xcc>)
 8001e26:	edc3 7a01 	vstr	s15, [r3, #4]
		  q[2] = BNO080_getQuatK();
 8001e2a:	f7ff fc45 	bl	80016b8 <BNO080_getQuatK>
 8001e2e:	eef0 7a40 	vmov.f32	s15, s0
 8001e32:	4b1c      	ldr	r3, [pc, #112]	; (8001ea4 <main+0xcc>)
 8001e34:	edc3 7a02 	vstr	s15, [r3, #8]
		  q[3] = BNO080_getQuatReal();
 8001e38:	f7ff fc54 	bl	80016e4 <BNO080_getQuatReal>
 8001e3c:	eef0 7a40 	vmov.f32	s15, s0
 8001e40:	4b18      	ldr	r3, [pc, #96]	; (8001ea4 <main+0xcc>)
 8001e42:	edc3 7a03 	vstr	s15, [r3, #12]
		  quatRadianAccuracy = BNO080_getQuatRadianAccuracy();
 8001e46:	f7ff fc63 	bl	8001710 <BNO080_getQuatRadianAccuracy>
 8001e4a:	eef0 7a40 	vmov.f32	s15, s0
 8001e4e:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <main+0xd0>)
 8001e50:	edc3 7a00 	vstr	s15, [r3]

		  Quaternion_Update(&q[0]);
 8001e54:	4813      	ldr	r0, [pc, #76]	; (8001ea4 <main+0xcc>)
 8001e56:	f7ff fddd 	bl	8001a14 <Quaternion_Update>

		  printf("%.2f\t%.2f\t%.2f\r\n", BNO080_Roll, BNO080_Pitch, BNO080_Yaw); //print roll, pitch, yaw in degree
 8001e5a:	4b14      	ldr	r3, [pc, #80]	; (8001eac <main+0xd4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe fb7a 	bl	8000558 <__aeabi_f2d>
 8001e64:	4680      	mov	r8, r0
 8001e66:	4689      	mov	r9, r1
 8001e68:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <main+0xd8>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe fb73 	bl	8000558 <__aeabi_f2d>
 8001e72:	4604      	mov	r4, r0
 8001e74:	460d      	mov	r5, r1
 8001e76:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <main+0xdc>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe fb6c 	bl	8000558 <__aeabi_f2d>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001e88:	e9cd 4500 	strd	r4, r5, [sp]
 8001e8c:	4642      	mov	r2, r8
 8001e8e:	464b      	mov	r3, r9
 8001e90:	4809      	ldr	r0, [pc, #36]	; (8001eb8 <main+0xe0>)
 8001e92:	f008 f835 	bl	8009f00 <iprintf>

		  HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 8001e96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e9a:	4808      	ldr	r0, [pc, #32]	; (8001ebc <main+0xe4>)
 8001e9c:	f000 fe3c 	bl	8002b18 <HAL_GPIO_TogglePin>
	  if(BNO080_dataAvailable() == 1)
 8001ea0:	e7b0      	b.n	8001e04 <main+0x2c>
 8001ea2:	bf00      	nop
 8001ea4:	20000404 	.word	0x20000404
 8001ea8:	20000414 	.word	0x20000414
 8001eac:	200003b4 	.word	0x200003b4
 8001eb0:	200003b8 	.word	0x200003b8
 8001eb4:	200003bc 	.word	0x200003bc
 8001eb8:	0800cefc 	.word	0x0800cefc
 8001ebc:	40020800 	.word	0x40020800

08001ec0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b094      	sub	sp, #80	; 0x50
 8001ec4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ec6:	f107 0320 	add.w	r3, r7, #32
 8001eca:	2230      	movs	r2, #48	; 0x30
 8001ecc:	2100      	movs	r1, #0
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f007 fba4 	bl	800961c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ed4:	f107 030c 	add.w	r3, r7, #12
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	4b28      	ldr	r3, [pc, #160]	; (8001f8c <SystemClock_Config+0xcc>)
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	4a27      	ldr	r2, [pc, #156]	; (8001f8c <SystemClock_Config+0xcc>)
 8001eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef4:	4b25      	ldr	r3, [pc, #148]	; (8001f8c <SystemClock_Config+0xcc>)
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f00:	2300      	movs	r3, #0
 8001f02:	607b      	str	r3, [r7, #4]
 8001f04:	4b22      	ldr	r3, [pc, #136]	; (8001f90 <SystemClock_Config+0xd0>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f0c:	4a20      	ldr	r2, [pc, #128]	; (8001f90 <SystemClock_Config+0xd0>)
 8001f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f12:	6013      	str	r3, [r2, #0]
 8001f14:	4b1e      	ldr	r3, [pc, #120]	; (8001f90 <SystemClock_Config+0xd0>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f1c:	607b      	str	r3, [r7, #4]
 8001f1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f20:	2301      	movs	r3, #1
 8001f22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001f34:	230f      	movs	r3, #15
 8001f36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001f38:	2390      	movs	r3, #144	; 0x90
 8001f3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001f40:	2305      	movs	r3, #5
 8001f42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f44:	f107 0320 	add.w	r3, r7, #32
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f002 f87d 	bl	8004048 <HAL_RCC_OscConfig>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001f54:	f000 f908 	bl	8002168 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f58:	230f      	movs	r3, #15
 8001f5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f6c:	f107 030c 	add.w	r3, r7, #12
 8001f70:	2100      	movs	r1, #0
 8001f72:	4618      	mov	r0, r3
 8001f74:	f002 fae0 	bl	8004538 <HAL_RCC_ClockConfig>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001f7e:	f000 f8f3 	bl	8002168 <Error_Handler>
  }
}
 8001f82:	bf00      	nop
 8001f84:	3750      	adds	r7, #80	; 0x50
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40007000 	.word	0x40007000

08001f94 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b090      	sub	sp, #64	; 0x40
 8001f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001f9a:	f107 0318 	add.w	r3, r7, #24
 8001f9e:	2228      	movs	r2, #40	; 0x28
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f007 fb3a 	bl	800961c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa8:	463b      	mov	r3, r7
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	605a      	str	r2, [r3, #4]
 8001fb0:	609a      	str	r2, [r3, #8]
 8001fb2:	60da      	str	r2, [r3, #12]
 8001fb4:	611a      	str	r2, [r3, #16]
 8001fb6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001fb8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001fbc:	f7ff fee2 	bl	8001d84 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001fc0:	2002      	movs	r0, #2
 8001fc2:	f7ff fec7 	bl	8001d54 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8001fc6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001fca:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001fdc:	2305      	movs	r3, #5
 8001fde:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe0:	463b      	mov	r3, r7
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4813      	ldr	r0, [pc, #76]	; (8002034 <MX_SPI2_Init+0xa0>)
 8001fe6:	f003 f94e 	bl	8005286 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001fee:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001ff2:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002000:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002004:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8002006:	2318      	movs	r3, #24
 8002008:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800200a:	2300      	movs	r3, #0
 800200c:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800200e:	2300      	movs	r3, #0
 8002010:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8002012:	230a      	movs	r3, #10
 8002014:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8002016:	f107 0318 	add.w	r3, r7, #24
 800201a:	4619      	mov	r1, r3
 800201c:	4806      	ldr	r0, [pc, #24]	; (8002038 <MX_SPI2_Init+0xa4>)
 800201e:	f003 f9c8 	bl	80053b2 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8002022:	2100      	movs	r1, #0
 8002024:	4804      	ldr	r0, [pc, #16]	; (8002038 <MX_SPI2_Init+0xa4>)
 8002026:	f7ff fe73 	bl	8001d10 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800202a:	bf00      	nop
 800202c:	3740      	adds	r7, #64	; 0x40
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40020400 	.word	0x40020400
 8002038:	40003800 	.word	0x40003800

0800203c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002040:	4b11      	ldr	r3, [pc, #68]	; (8002088 <MX_USART2_UART_Init+0x4c>)
 8002042:	4a12      	ldr	r2, [pc, #72]	; (800208c <MX_USART2_UART_Init+0x50>)
 8002044:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002046:	4b10      	ldr	r3, [pc, #64]	; (8002088 <MX_USART2_UART_Init+0x4c>)
 8002048:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800204c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800204e:	4b0e      	ldr	r3, [pc, #56]	; (8002088 <MX_USART2_UART_Init+0x4c>)
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002054:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <MX_USART2_UART_Init+0x4c>)
 8002056:	2200      	movs	r2, #0
 8002058:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800205a:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <MX_USART2_UART_Init+0x4c>)
 800205c:	2200      	movs	r2, #0
 800205e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002060:	4b09      	ldr	r3, [pc, #36]	; (8002088 <MX_USART2_UART_Init+0x4c>)
 8002062:	220c      	movs	r2, #12
 8002064:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002066:	4b08      	ldr	r3, [pc, #32]	; (8002088 <MX_USART2_UART_Init+0x4c>)
 8002068:	2200      	movs	r2, #0
 800206a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <MX_USART2_UART_Init+0x4c>)
 800206e:	2200      	movs	r2, #0
 8002070:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002072:	4805      	ldr	r0, [pc, #20]	; (8002088 <MX_USART2_UART_Init+0x4c>)
 8002074:	f002 fc40 	bl	80048f8 <HAL_UART_Init>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800207e:	f000 f873 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	200003c0 	.word	0x200003c0
 800208c:	40004400 	.word	0x40004400

08002090 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002096:	463b      	mov	r3, r7
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
 80020a4:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80020a6:	2004      	movs	r0, #4
 80020a8:	f7ff fe54 	bl	8001d54 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80020ac:	2080      	movs	r0, #128	; 0x80
 80020ae:	f7ff fe51 	bl	8001d54 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80020b2:	2001      	movs	r0, #1
 80020b4:	f7ff fe4e 	bl	8001d54 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80020b8:	2002      	movs	r0, #2
 80020ba:	f7ff fe4b 	bl	8001d54 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(USER_LED_GPIO_Port, USER_LED_Pin);
 80020be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020c2:	4826      	ldr	r0, [pc, #152]	; (800215c <MX_GPIO_Init+0xcc>)
 80020c4:	f7ff fe37 	bl	8001d36 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin);
 80020c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020cc:	4824      	ldr	r0, [pc, #144]	; (8002160 <MX_GPIO_Init+0xd0>)
 80020ce:	f7ff fe32 	bl	8001d36 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, PS0_OUTPUT_Pin|RST_OUTPUT_Pin);
 80020d2:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80020d6:	4823      	ldr	r0, [pc, #140]	; (8002164 <MX_GPIO_Init+0xd4>)
 80020d8:	f7ff fe2d 	bl	8001d36 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = USER_LED_Pin;
 80020dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020e0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80020e2:	2301      	movs	r3, #1
 80020e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80020e6:	2300      	movs	r3, #0
 80020e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80020ee:	2300      	movs	r3, #0
 80020f0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 80020f2:	463b      	mov	r3, r7
 80020f4:	4619      	mov	r1, r3
 80020f6:	4819      	ldr	r0, [pc, #100]	; (800215c <MX_GPIO_Init+0xcc>)
 80020f8:	f003 f8c5 	bl	8005286 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 80020fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002100:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002102:	2301      	movs	r3, #1
 8002104:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002106:	2300      	movs	r3, #0
 8002108:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8002112:	463b      	mov	r3, r7
 8002114:	4619      	mov	r1, r3
 8002116:	4812      	ldr	r0, [pc, #72]	; (8002160 <MX_GPIO_Init+0xd0>)
 8002118:	f003 f8b5 	bl	8005286 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PS0_OUTPUT_Pin|RST_OUTPUT_Pin;
 800211c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8002120:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002122:	2301      	movs	r3, #1
 8002124:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002126:	2300      	movs	r3, #0
 8002128:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002132:	463b      	mov	r3, r7
 8002134:	4619      	mov	r1, r3
 8002136:	480b      	ldr	r0, [pc, #44]	; (8002164 <MX_GPIO_Init+0xd4>)
 8002138:	f003 f8a5 	bl	8005286 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = INT_INPUT_Pin;
 800213c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002140:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002142:	2300      	movs	r3, #0
 8002144:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(INT_INPUT_GPIO_Port, &GPIO_InitStruct);
 800214a:	463b      	mov	r3, r7
 800214c:	4619      	mov	r1, r3
 800214e:	4805      	ldr	r0, [pc, #20]	; (8002164 <MX_GPIO_Init+0xd4>)
 8002150:	f003 f899 	bl	8005286 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002154:	bf00      	nop
 8002156:	3718      	adds	r7, #24
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40020800 	.word	0x40020800
 8002160:	40020400 	.word	0x40020400
 8002164:	40020000 	.word	0x40020000

08002168 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800216c:	b672      	cpsid	i
}
 800216e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002170:	e7fe      	b.n	8002170 <Error_Handler+0x8>
	...

08002174 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	607b      	str	r3, [r7, #4]
 800217e:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <HAL_MspInit+0x4c>)
 8002180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002182:	4a0f      	ldr	r2, [pc, #60]	; (80021c0 <HAL_MspInit+0x4c>)
 8002184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002188:	6453      	str	r3, [r2, #68]	; 0x44
 800218a:	4b0d      	ldr	r3, [pc, #52]	; (80021c0 <HAL_MspInit+0x4c>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002192:	607b      	str	r3, [r7, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	603b      	str	r3, [r7, #0]
 800219a:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <HAL_MspInit+0x4c>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	4a08      	ldr	r2, [pc, #32]	; (80021c0 <HAL_MspInit+0x4c>)
 80021a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a4:	6413      	str	r3, [r2, #64]	; 0x40
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <HAL_MspInit+0x4c>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ae:	603b      	str	r3, [r7, #0]
 80021b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40023800 	.word	0x40023800

080021c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08a      	sub	sp, #40	; 0x28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a19      	ldr	r2, [pc, #100]	; (8002248 <HAL_UART_MspInit+0x84>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d12b      	bne.n	800223e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	4b18      	ldr	r3, [pc, #96]	; (800224c <HAL_UART_MspInit+0x88>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	4a17      	ldr	r2, [pc, #92]	; (800224c <HAL_UART_MspInit+0x88>)
 80021f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021f4:	6413      	str	r3, [r2, #64]	; 0x40
 80021f6:	4b15      	ldr	r3, [pc, #84]	; (800224c <HAL_UART_MspInit+0x88>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	4b11      	ldr	r3, [pc, #68]	; (800224c <HAL_UART_MspInit+0x88>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	4a10      	ldr	r2, [pc, #64]	; (800224c <HAL_UART_MspInit+0x88>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	6313      	str	r3, [r2, #48]	; 0x30
 8002212:	4b0e      	ldr	r3, [pc, #56]	; (800224c <HAL_UART_MspInit+0x88>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800221e:	230c      	movs	r3, #12
 8002220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002222:	2302      	movs	r3, #2
 8002224:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222a:	2303      	movs	r3, #3
 800222c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800222e:	2307      	movs	r3, #7
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002232:	f107 0314 	add.w	r3, r7, #20
 8002236:	4619      	mov	r1, r3
 8002238:	4805      	ldr	r0, [pc, #20]	; (8002250 <HAL_UART_MspInit+0x8c>)
 800223a:	f000 fae9 	bl	8002810 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800223e:	bf00      	nop
 8002240:	3728      	adds	r7, #40	; 0x28
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40004400 	.word	0x40004400
 800224c:	40023800 	.word	0x40023800
 8002250:	40020000 	.word	0x40020000

08002254 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002258:	e7fe      	b.n	8002258 <NMI_Handler+0x4>

0800225a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800225a:	b480      	push	{r7}
 800225c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800225e:	e7fe      	b.n	800225e <HardFault_Handler+0x4>

08002260 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002264:	e7fe      	b.n	8002264 <MemManage_Handler+0x4>

08002266 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002266:	b480      	push	{r7}
 8002268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800226a:	e7fe      	b.n	800226a <BusFault_Handler+0x4>

0800226c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002270:	e7fe      	b.n	8002270 <UsageFault_Handler+0x4>

08002272 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022a0:	f000 f960 	bl	8002564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022a4:	bf00      	nop
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80022ac:	4802      	ldr	r0, [pc, #8]	; (80022b8 <OTG_FS_IRQHandler+0x10>)
 80022ae:	f000 fd9d 	bl	8002dec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20001100 	.word	0x20001100

080022bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return 1;
 80022c0:	2301      	movs	r3, #1
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <_kill>:

int _kill(int pid, int sig)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022d6:	f007 f977 	bl	80095c8 <__errno>
 80022da:	4603      	mov	r3, r0
 80022dc:	2216      	movs	r2, #22
 80022de:	601a      	str	r2, [r3, #0]
  return -1;
 80022e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <_exit>:

void _exit (int status)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff ffe7 	bl	80022cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80022fe:	e7fe      	b.n	80022fe <_exit+0x12>

08002300 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	e00a      	b.n	8002328 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002312:	f3af 8000 	nop.w
 8002316:	4601      	mov	r1, r0
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	1c5a      	adds	r2, r3, #1
 800231c:	60ba      	str	r2, [r7, #8]
 800231e:	b2ca      	uxtb	r2, r1
 8002320:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	3301      	adds	r3, #1
 8002326:	617b      	str	r3, [r7, #20]
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	429a      	cmp	r2, r3
 800232e:	dbf0      	blt.n	8002312 <_read+0x12>
  }

  return len;
 8002330:	687b      	ldr	r3, [r7, #4]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b086      	sub	sp, #24
 800233e:	af00      	add	r7, sp, #0
 8002340:	60f8      	str	r0, [r7, #12]
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	e009      	b.n	8002360 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	60ba      	str	r2, [r7, #8]
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fd2d 	bl	8001db4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	3301      	adds	r3, #1
 800235e:	617b      	str	r3, [r7, #20]
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	429a      	cmp	r2, r3
 8002366:	dbf1      	blt.n	800234c <_write+0x12>
  }
  return len;
 8002368:	687b      	ldr	r3, [r7, #4]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <_close>:

int _close(int file)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800237a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800237e:	4618      	mov	r0, r3
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800239a:	605a      	str	r2, [r3, #4]
  return 0;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <_isatty>:

int _isatty(int file)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023b2:	2301      	movs	r3, #1
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
	...

080023dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023e4:	4a14      	ldr	r2, [pc, #80]	; (8002438 <_sbrk+0x5c>)
 80023e6:	4b15      	ldr	r3, [pc, #84]	; (800243c <_sbrk+0x60>)
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023f0:	4b13      	ldr	r3, [pc, #76]	; (8002440 <_sbrk+0x64>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d102      	bne.n	80023fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023f8:	4b11      	ldr	r3, [pc, #68]	; (8002440 <_sbrk+0x64>)
 80023fa:	4a12      	ldr	r2, [pc, #72]	; (8002444 <_sbrk+0x68>)
 80023fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <_sbrk+0x64>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	429a      	cmp	r2, r3
 800240a:	d207      	bcs.n	800241c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800240c:	f007 f8dc 	bl	80095c8 <__errno>
 8002410:	4603      	mov	r3, r0
 8002412:	220c      	movs	r2, #12
 8002414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002416:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800241a:	e009      	b.n	8002430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800241c:	4b08      	ldr	r3, [pc, #32]	; (8002440 <_sbrk+0x64>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002422:	4b07      	ldr	r3, [pc, #28]	; (8002440 <_sbrk+0x64>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	4a05      	ldr	r2, [pc, #20]	; (8002440 <_sbrk+0x64>)
 800242c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800242e:	68fb      	ldr	r3, [r7, #12]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20010000 	.word	0x20010000
 800243c:	00000400 	.word	0x00000400
 8002440:	20000418 	.word	0x20000418
 8002444:	20001840 	.word	0x20001840

08002448 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800244c:	4b06      	ldr	r3, [pc, #24]	; (8002468 <SystemInit+0x20>)
 800244e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002452:	4a05      	ldr	r2, [pc, #20]	; (8002468 <SystemInit+0x20>)
 8002454:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002458:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800246c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002470:	480d      	ldr	r0, [pc, #52]	; (80024a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002472:	490e      	ldr	r1, [pc, #56]	; (80024ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002474:	4a0e      	ldr	r2, [pc, #56]	; (80024b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002478:	e002      	b.n	8002480 <LoopCopyDataInit>

0800247a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800247a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800247c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800247e:	3304      	adds	r3, #4

08002480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002484:	d3f9      	bcc.n	800247a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002486:	4a0b      	ldr	r2, [pc, #44]	; (80024b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002488:	4c0b      	ldr	r4, [pc, #44]	; (80024b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800248a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800248c:	e001      	b.n	8002492 <LoopFillZerobss>

0800248e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800248e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002490:	3204      	adds	r2, #4

08002492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002494:	d3fb      	bcc.n	800248e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002496:	f7ff ffd7 	bl	8002448 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800249a:	f007 f89b 	bl	80095d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800249e:	f7ff fc9b 	bl	8001dd8 <main>
  bx  lr    
 80024a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024a4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80024a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024ac:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 80024b0:	0800d3ac 	.word	0x0800d3ac
  ldr r2, =_sbss
 80024b4:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 80024b8:	2000183c 	.word	0x2000183c

080024bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024bc:	e7fe      	b.n	80024bc <ADC_IRQHandler>
	...

080024c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024c4:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <HAL_Init+0x40>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a0d      	ldr	r2, [pc, #52]	; (8002500 <HAL_Init+0x40>)
 80024ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024d0:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <HAL_Init+0x40>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a0a      	ldr	r2, [pc, #40]	; (8002500 <HAL_Init+0x40>)
 80024d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024dc:	4b08      	ldr	r3, [pc, #32]	; (8002500 <HAL_Init+0x40>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a07      	ldr	r2, [pc, #28]	; (8002500 <HAL_Init+0x40>)
 80024e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024e8:	2003      	movs	r0, #3
 80024ea:	f000 f94f 	bl	800278c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ee:	200f      	movs	r0, #15
 80024f0:	f000 f808 	bl	8002504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024f4:	f7ff fe3e 	bl	8002174 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40023c00 	.word	0x40023c00

08002504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800250c:	4b12      	ldr	r3, [pc, #72]	; (8002558 <HAL_InitTick+0x54>)
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4b12      	ldr	r3, [pc, #72]	; (800255c <HAL_InitTick+0x58>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	4619      	mov	r1, r3
 8002516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800251a:	fbb3 f3f1 	udiv	r3, r3, r1
 800251e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002522:	4618      	mov	r0, r3
 8002524:	f000 f967 	bl	80027f6 <HAL_SYSTICK_Config>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e00e      	b.n	8002550 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b0f      	cmp	r3, #15
 8002536:	d80a      	bhi.n	800254e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002538:	2200      	movs	r2, #0
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002540:	f000 f92f 	bl	80027a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002544:	4a06      	ldr	r2, [pc, #24]	; (8002560 <HAL_InitTick+0x5c>)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800254a:	2300      	movs	r3, #0
 800254c:	e000      	b.n	8002550 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
}
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20000004 	.word	0x20000004
 800255c:	2000000c 	.word	0x2000000c
 8002560:	20000008 	.word	0x20000008

08002564 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002568:	4b06      	ldr	r3, [pc, #24]	; (8002584 <HAL_IncTick+0x20>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	461a      	mov	r2, r3
 800256e:	4b06      	ldr	r3, [pc, #24]	; (8002588 <HAL_IncTick+0x24>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4413      	add	r3, r2
 8002574:	4a04      	ldr	r2, [pc, #16]	; (8002588 <HAL_IncTick+0x24>)
 8002576:	6013      	str	r3, [r2, #0]
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	2000000c 	.word	0x2000000c
 8002588:	2000041c 	.word	0x2000041c

0800258c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  return uwTick;
 8002590:	4b03      	ldr	r3, [pc, #12]	; (80025a0 <HAL_GetTick+0x14>)
 8002592:	681b      	ldr	r3, [r3, #0]
}
 8002594:	4618      	mov	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	2000041c 	.word	0x2000041c

080025a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025ac:	f7ff ffee 	bl	800258c <HAL_GetTick>
 80025b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025bc:	d005      	beq.n	80025ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025be:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <HAL_Delay+0x44>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	461a      	mov	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4413      	add	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025ca:	bf00      	nop
 80025cc:	f7ff ffde 	bl	800258c <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d8f7      	bhi.n	80025cc <HAL_Delay+0x28>
  {
  }
}
 80025dc:	bf00      	nop
 80025de:	bf00      	nop
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	2000000c 	.word	0x2000000c

080025ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025fc:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <__NVIC_SetPriorityGrouping+0x44>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002608:	4013      	ands	r3, r2
 800260a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002614:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800261c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800261e:	4a04      	ldr	r2, [pc, #16]	; (8002630 <__NVIC_SetPriorityGrouping+0x44>)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	60d3      	str	r3, [r2, #12]
}
 8002624:	bf00      	nop
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002638:	4b04      	ldr	r3, [pc, #16]	; (800264c <__NVIC_GetPriorityGrouping+0x18>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	0a1b      	lsrs	r3, r3, #8
 800263e:	f003 0307 	and.w	r3, r3, #7
}
 8002642:	4618      	mov	r0, r3
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265e:	2b00      	cmp	r3, #0
 8002660:	db0b      	blt.n	800267a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002662:	79fb      	ldrb	r3, [r7, #7]
 8002664:	f003 021f 	and.w	r2, r3, #31
 8002668:	4907      	ldr	r1, [pc, #28]	; (8002688 <__NVIC_EnableIRQ+0x38>)
 800266a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	2001      	movs	r0, #1
 8002672:	fa00 f202 	lsl.w	r2, r0, r2
 8002676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	e000e100 	.word	0xe000e100

0800268c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	6039      	str	r1, [r7, #0]
 8002696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269c:	2b00      	cmp	r3, #0
 800269e:	db0a      	blt.n	80026b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	490c      	ldr	r1, [pc, #48]	; (80026d8 <__NVIC_SetPriority+0x4c>)
 80026a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026aa:	0112      	lsls	r2, r2, #4
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	440b      	add	r3, r1
 80026b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026b4:	e00a      	b.n	80026cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	4908      	ldr	r1, [pc, #32]	; (80026dc <__NVIC_SetPriority+0x50>)
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	3b04      	subs	r3, #4
 80026c4:	0112      	lsls	r2, r2, #4
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	440b      	add	r3, r1
 80026ca:	761a      	strb	r2, [r3, #24]
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	e000e100 	.word	0xe000e100
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b089      	sub	sp, #36	; 0x24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f1c3 0307 	rsb	r3, r3, #7
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	bf28      	it	cs
 80026fe:	2304      	movcs	r3, #4
 8002700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	3304      	adds	r3, #4
 8002706:	2b06      	cmp	r3, #6
 8002708:	d902      	bls.n	8002710 <NVIC_EncodePriority+0x30>
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	3b03      	subs	r3, #3
 800270e:	e000      	b.n	8002712 <NVIC_EncodePriority+0x32>
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002714:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43da      	mvns	r2, r3
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	401a      	ands	r2, r3
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002728:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	fa01 f303 	lsl.w	r3, r1, r3
 8002732:	43d9      	mvns	r1, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002738:	4313      	orrs	r3, r2
         );
}
 800273a:	4618      	mov	r0, r3
 800273c:	3724      	adds	r7, #36	; 0x24
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
	...

08002748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3b01      	subs	r3, #1
 8002754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002758:	d301      	bcc.n	800275e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800275a:	2301      	movs	r3, #1
 800275c:	e00f      	b.n	800277e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800275e:	4a0a      	ldr	r2, [pc, #40]	; (8002788 <SysTick_Config+0x40>)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3b01      	subs	r3, #1
 8002764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002766:	210f      	movs	r1, #15
 8002768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800276c:	f7ff ff8e 	bl	800268c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002770:	4b05      	ldr	r3, [pc, #20]	; (8002788 <SysTick_Config+0x40>)
 8002772:	2200      	movs	r2, #0
 8002774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002776:	4b04      	ldr	r3, [pc, #16]	; (8002788 <SysTick_Config+0x40>)
 8002778:	2207      	movs	r2, #7
 800277a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	e000e010 	.word	0xe000e010

0800278c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f7ff ff29 	bl	80025ec <__NVIC_SetPriorityGrouping>
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b086      	sub	sp, #24
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	4603      	mov	r3, r0
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
 80027ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027b4:	f7ff ff3e 	bl	8002634 <__NVIC_GetPriorityGrouping>
 80027b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68b9      	ldr	r1, [r7, #8]
 80027be:	6978      	ldr	r0, [r7, #20]
 80027c0:	f7ff ff8e 	bl	80026e0 <NVIC_EncodePriority>
 80027c4:	4602      	mov	r2, r0
 80027c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ca:	4611      	mov	r1, r2
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff5d 	bl	800268c <__NVIC_SetPriority>
}
 80027d2:	bf00      	nop
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	4603      	mov	r3, r0
 80027e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ff31 	bl	8002650 <__NVIC_EnableIRQ>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff ffa2 	bl	8002748 <SysTick_Config>
 8002804:	4603      	mov	r3, r0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002810:	b480      	push	{r7}
 8002812:	b089      	sub	sp, #36	; 0x24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800281e:	2300      	movs	r3, #0
 8002820:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002822:	2300      	movs	r3, #0
 8002824:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002826:	2300      	movs	r3, #0
 8002828:	61fb      	str	r3, [r7, #28]
 800282a:	e159      	b.n	8002ae0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800282c:	2201      	movs	r2, #1
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	4013      	ands	r3, r2
 800283e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	429a      	cmp	r2, r3
 8002846:	f040 8148 	bne.w	8002ada <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	2b01      	cmp	r3, #1
 8002854:	d005      	beq.n	8002862 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800285e:	2b02      	cmp	r3, #2
 8002860:	d130      	bne.n	80028c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	2203      	movs	r2, #3
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43db      	mvns	r3, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4013      	ands	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002898:	2201      	movs	r2, #1
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	091b      	lsrs	r3, r3, #4
 80028ae:	f003 0201 	and.w	r2, r3, #1
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 0303 	and.w	r3, r3, #3
 80028cc:	2b03      	cmp	r3, #3
 80028ce:	d017      	beq.n	8002900 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	2203      	movs	r2, #3
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d123      	bne.n	8002954 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	08da      	lsrs	r2, r3, #3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3208      	adds	r2, #8
 8002914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002918:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	220f      	movs	r2, #15
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4013      	ands	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	691a      	ldr	r2, [r3, #16]
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4313      	orrs	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	08da      	lsrs	r2, r3, #3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3208      	adds	r2, #8
 800294e:	69b9      	ldr	r1, [r7, #24]
 8002950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	2203      	movs	r2, #3
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f003 0203 	and.w	r2, r3, #3
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4313      	orrs	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 80a2 	beq.w	8002ada <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	4b57      	ldr	r3, [pc, #348]	; (8002af8 <HAL_GPIO_Init+0x2e8>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299e:	4a56      	ldr	r2, [pc, #344]	; (8002af8 <HAL_GPIO_Init+0x2e8>)
 80029a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029a4:	6453      	str	r3, [r2, #68]	; 0x44
 80029a6:	4b54      	ldr	r3, [pc, #336]	; (8002af8 <HAL_GPIO_Init+0x2e8>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029b2:	4a52      	ldr	r2, [pc, #328]	; (8002afc <HAL_GPIO_Init+0x2ec>)
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	089b      	lsrs	r3, r3, #2
 80029b8:	3302      	adds	r3, #2
 80029ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	220f      	movs	r2, #15
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4013      	ands	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a49      	ldr	r2, [pc, #292]	; (8002b00 <HAL_GPIO_Init+0x2f0>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d019      	beq.n	8002a12 <HAL_GPIO_Init+0x202>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a48      	ldr	r2, [pc, #288]	; (8002b04 <HAL_GPIO_Init+0x2f4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d013      	beq.n	8002a0e <HAL_GPIO_Init+0x1fe>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a47      	ldr	r2, [pc, #284]	; (8002b08 <HAL_GPIO_Init+0x2f8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d00d      	beq.n	8002a0a <HAL_GPIO_Init+0x1fa>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a46      	ldr	r2, [pc, #280]	; (8002b0c <HAL_GPIO_Init+0x2fc>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d007      	beq.n	8002a06 <HAL_GPIO_Init+0x1f6>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a45      	ldr	r2, [pc, #276]	; (8002b10 <HAL_GPIO_Init+0x300>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d101      	bne.n	8002a02 <HAL_GPIO_Init+0x1f2>
 80029fe:	2304      	movs	r3, #4
 8002a00:	e008      	b.n	8002a14 <HAL_GPIO_Init+0x204>
 8002a02:	2307      	movs	r3, #7
 8002a04:	e006      	b.n	8002a14 <HAL_GPIO_Init+0x204>
 8002a06:	2303      	movs	r3, #3
 8002a08:	e004      	b.n	8002a14 <HAL_GPIO_Init+0x204>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e002      	b.n	8002a14 <HAL_GPIO_Init+0x204>
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e000      	b.n	8002a14 <HAL_GPIO_Init+0x204>
 8002a12:	2300      	movs	r3, #0
 8002a14:	69fa      	ldr	r2, [r7, #28]
 8002a16:	f002 0203 	and.w	r2, r2, #3
 8002a1a:	0092      	lsls	r2, r2, #2
 8002a1c:	4093      	lsls	r3, r2
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a24:	4935      	ldr	r1, [pc, #212]	; (8002afc <HAL_GPIO_Init+0x2ec>)
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	089b      	lsrs	r3, r3, #2
 8002a2a:	3302      	adds	r3, #2
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a32:	4b38      	ldr	r3, [pc, #224]	; (8002b14 <HAL_GPIO_Init+0x304>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a56:	4a2f      	ldr	r2, [pc, #188]	; (8002b14 <HAL_GPIO_Init+0x304>)
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a5c:	4b2d      	ldr	r3, [pc, #180]	; (8002b14 <HAL_GPIO_Init+0x304>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a80:	4a24      	ldr	r2, [pc, #144]	; (8002b14 <HAL_GPIO_Init+0x304>)
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a86:	4b23      	ldr	r3, [pc, #140]	; (8002b14 <HAL_GPIO_Init+0x304>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4013      	ands	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aaa:	4a1a      	ldr	r2, [pc, #104]	; (8002b14 <HAL_GPIO_Init+0x304>)
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ab0:	4b18      	ldr	r3, [pc, #96]	; (8002b14 <HAL_GPIO_Init+0x304>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ad4:	4a0f      	ldr	r2, [pc, #60]	; (8002b14 <HAL_GPIO_Init+0x304>)
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	3301      	adds	r3, #1
 8002ade:	61fb      	str	r3, [r7, #28]
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	2b0f      	cmp	r3, #15
 8002ae4:	f67f aea2 	bls.w	800282c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ae8:	bf00      	nop
 8002aea:	bf00      	nop
 8002aec:	3724      	adds	r7, #36	; 0x24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40013800 	.word	0x40013800
 8002b00:	40020000 	.word	0x40020000
 8002b04:	40020400 	.word	0x40020400
 8002b08:	40020800 	.word	0x40020800
 8002b0c:	40020c00 	.word	0x40020c00
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40013c00 	.word	0x40013c00

08002b18 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b2a:	887a      	ldrh	r2, [r7, #2]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	041a      	lsls	r2, r3, #16
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	43d9      	mvns	r1, r3
 8002b36:	887b      	ldrh	r3, [r7, #2]
 8002b38:	400b      	ands	r3, r1
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	619a      	str	r2, [r3, #24]
}
 8002b40:	bf00      	nop
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b4e:	b08f      	sub	sp, #60	; 0x3c
 8002b50:	af0a      	add	r7, sp, #40	; 0x28
 8002b52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e10f      	b.n	8002d7e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d106      	bne.n	8002b7e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f006 fa1b 	bl	8008fb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2203      	movs	r2, #3
 8002b82:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d102      	bne.n	8002b98 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f002 fd6e 	bl	800567e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	603b      	str	r3, [r7, #0]
 8002ba8:	687e      	ldr	r6, [r7, #4]
 8002baa:	466d      	mov	r5, sp
 8002bac:	f106 0410 	add.w	r4, r6, #16
 8002bb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bbc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bc0:	1d33      	adds	r3, r6, #4
 8002bc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bc4:	6838      	ldr	r0, [r7, #0]
 8002bc6:	f002 fc46 	bl	8005456 <USB_CoreInit>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0d0      	b.n	8002d7e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2100      	movs	r1, #0
 8002be2:	4618      	mov	r0, r3
 8002be4:	f002 fd5c 	bl	80056a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002be8:	2300      	movs	r3, #0
 8002bea:	73fb      	strb	r3, [r7, #15]
 8002bec:	e04a      	b.n	8002c84 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bee:	7bfa      	ldrb	r2, [r7, #15]
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	333d      	adds	r3, #61	; 0x3d
 8002bfe:	2201      	movs	r2, #1
 8002c00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c02:	7bfa      	ldrb	r2, [r7, #15]
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	440b      	add	r3, r1
 8002c10:	333c      	adds	r3, #60	; 0x3c
 8002c12:	7bfa      	ldrb	r2, [r7, #15]
 8002c14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c16:	7bfa      	ldrb	r2, [r7, #15]
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
 8002c1a:	b298      	uxth	r0, r3
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	4413      	add	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	3344      	adds	r3, #68	; 0x44
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c2e:	7bfa      	ldrb	r2, [r7, #15]
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	4413      	add	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	3340      	adds	r3, #64	; 0x40
 8002c3e:	2200      	movs	r2, #0
 8002c40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c42:	7bfa      	ldrb	r2, [r7, #15]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	3348      	adds	r3, #72	; 0x48
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c56:	7bfa      	ldrb	r2, [r7, #15]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	4413      	add	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	334c      	adds	r3, #76	; 0x4c
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c6a:	7bfa      	ldrb	r2, [r7, #15]
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	4413      	add	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	440b      	add	r3, r1
 8002c78:	3354      	adds	r3, #84	; 0x54
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
 8002c80:	3301      	adds	r3, #1
 8002c82:	73fb      	strb	r3, [r7, #15]
 8002c84:	7bfa      	ldrb	r2, [r7, #15]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d3af      	bcc.n	8002bee <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c8e:	2300      	movs	r3, #0
 8002c90:	73fb      	strb	r3, [r7, #15]
 8002c92:	e044      	b.n	8002d1e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c94:	7bfa      	ldrb	r2, [r7, #15]
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002caa:	7bfa      	ldrb	r2, [r7, #15]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002cbc:	7bfa      	ldrb	r2, [r7, #15]
 8002cbe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cc0:	7bfa      	ldrb	r2, [r7, #15]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	4413      	add	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cd6:	7bfa      	ldrb	r2, [r7, #15]
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	4413      	add	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cec:	7bfa      	ldrb	r2, [r7, #15]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d02:	7bfa      	ldrb	r2, [r7, #15]
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	73fb      	strb	r3, [r7, #15]
 8002d1e:	7bfa      	ldrb	r2, [r7, #15]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d3b5      	bcc.n	8002c94 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	603b      	str	r3, [r7, #0]
 8002d2e:	687e      	ldr	r6, [r7, #4]
 8002d30:	466d      	mov	r5, sp
 8002d32:	f106 0410 	add.w	r4, r6, #16
 8002d36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d42:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d46:	1d33      	adds	r3, r6, #4
 8002d48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d4a:	6838      	ldr	r0, [r7, #0]
 8002d4c:	f002 fcf4 	bl	8005738 <USB_DevInit>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d005      	beq.n	8002d62 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2202      	movs	r2, #2
 8002d5a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e00d      	b.n	8002d7e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f003 fe43 	bl	8006a02 <USB_DevDisconnect>

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d86 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b084      	sub	sp, #16
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <HAL_PCD_Start+0x1c>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e020      	b.n	8002de4 <HAL_PCD_Start+0x5e>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d109      	bne.n	8002dc6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d005      	beq.n	8002dc6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dbe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f002 fc46 	bl	800565c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f003 fdf3 	bl	80069c0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002dec:	b590      	push	{r4, r7, lr}
 8002dee:	b08d      	sub	sp, #52	; 0x34
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f003 feb1 	bl	8006b6a <USB_GetMode>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f040 848a 	bne.w	8003724 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f003 fe15 	bl	8006a44 <USB_ReadInterrupts>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 8480 	beq.w	8003722 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	0a1b      	lsrs	r3, r3, #8
 8002e2c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f003 fe02 	bl	8006a44 <USB_ReadInterrupts>
 8002e40:	4603      	mov	r3, r0
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d107      	bne.n	8002e5a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	695a      	ldr	r2, [r3, #20]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f002 0202 	and.w	r2, r2, #2
 8002e58:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f003 fdf0 	bl	8006a44 <USB_ReadInterrupts>
 8002e64:	4603      	mov	r3, r0
 8002e66:	f003 0310 	and.w	r3, r3, #16
 8002e6a:	2b10      	cmp	r3, #16
 8002e6c:	d161      	bne.n	8002f32 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	699a      	ldr	r2, [r3, #24]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 0210 	bic.w	r2, r2, #16
 8002e7c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	f003 020f 	and.w	r2, r3, #15
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	4413      	add	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	4413      	add	r3, r2
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	0c5b      	lsrs	r3, r3, #17
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d124      	bne.n	8002ef4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d035      	beq.n	8002f22 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	091b      	lsrs	r3, r3, #4
 8002ebe:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ec0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	6a38      	ldr	r0, [r7, #32]
 8002eca:	f003 fc27 	bl	800671c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	691a      	ldr	r2, [r3, #16]
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	091b      	lsrs	r3, r3, #4
 8002ed6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002eda:	441a      	add	r2, r3
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	6a1a      	ldr	r2, [r3, #32]
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	091b      	lsrs	r3, r3, #4
 8002ee8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002eec:	441a      	add	r2, r3
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	621a      	str	r2, [r3, #32]
 8002ef2:	e016      	b.n	8002f22 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	0c5b      	lsrs	r3, r3, #17
 8002ef8:	f003 030f 	and.w	r3, r3, #15
 8002efc:	2b06      	cmp	r3, #6
 8002efe:	d110      	bne.n	8002f22 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f06:	2208      	movs	r2, #8
 8002f08:	4619      	mov	r1, r3
 8002f0a:	6a38      	ldr	r0, [r7, #32]
 8002f0c:	f003 fc06 	bl	800671c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	6a1a      	ldr	r2, [r3, #32]
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	091b      	lsrs	r3, r3, #4
 8002f18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f1c:	441a      	add	r2, r3
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699a      	ldr	r2, [r3, #24]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f042 0210 	orr.w	r2, r2, #16
 8002f30:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f003 fd84 	bl	8006a44 <USB_ReadInterrupts>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f42:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f46:	f040 80a7 	bne.w	8003098 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f003 fd89 	bl	8006a6a <USB_ReadDevAllOutEpInterrupt>
 8002f58:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002f5a:	e099      	b.n	8003090 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 808e 	beq.w	8003084 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	4611      	mov	r1, r2
 8002f72:	4618      	mov	r0, r3
 8002f74:	f003 fdad 	bl	8006ad2 <USB_ReadDevOutEPInterrupt>
 8002f78:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00c      	beq.n	8002f9e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	015a      	lsls	r2, r3, #5
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f90:	461a      	mov	r2, r3
 8002f92:	2301      	movs	r3, #1
 8002f94:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002f96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 fec3 	bl	8003d24 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00c      	beq.n	8002fc2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	015a      	lsls	r2, r3, #5
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	4413      	add	r3, r2
 8002fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	2308      	movs	r3, #8
 8002fb8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002fba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 ff99 	bl	8003ef4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	f003 0310 	and.w	r3, r3, #16
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d008      	beq.n	8002fde <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	015a      	lsls	r2, r3, #5
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fd8:	461a      	mov	r2, r3
 8002fda:	2310      	movs	r3, #16
 8002fdc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d030      	beq.n	800304a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff0:	2b80      	cmp	r3, #128	; 0x80
 8002ff2:	d109      	bne.n	8003008 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	69fa      	ldr	r2, [r7, #28]
 8002ffe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003002:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003006:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800300a:	4613      	mov	r3, r2
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	4413      	add	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	4413      	add	r3, r2
 800301a:	3304      	adds	r3, #4
 800301c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	78db      	ldrb	r3, [r3, #3]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d108      	bne.n	8003038 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	2200      	movs	r2, #0
 800302a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	b2db      	uxtb	r3, r3
 8003030:	4619      	mov	r1, r3
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f006 f8ba 	bl	80091ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	015a      	lsls	r2, r3, #5
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	4413      	add	r3, r2
 8003040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003044:	461a      	mov	r2, r3
 8003046:	2302      	movs	r3, #2
 8003048:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	f003 0320 	and.w	r3, r3, #32
 8003050:	2b00      	cmp	r3, #0
 8003052:	d008      	beq.n	8003066 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	4413      	add	r3, r2
 800305c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003060:	461a      	mov	r2, r3
 8003062:	2320      	movs	r3, #32
 8003064:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d009      	beq.n	8003084 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003072:	015a      	lsls	r2, r3, #5
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	4413      	add	r3, r2
 8003078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800307c:	461a      	mov	r2, r3
 800307e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003082:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003086:	3301      	adds	r3, #1
 8003088:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800308a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308c:	085b      	lsrs	r3, r3, #1
 800308e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003092:	2b00      	cmp	r3, #0
 8003094:	f47f af62 	bne.w	8002f5c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f003 fcd1 	bl	8006a44 <USB_ReadInterrupts>
 80030a2:	4603      	mov	r3, r0
 80030a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030ac:	f040 80db 	bne.w	8003266 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f003 fcf2 	bl	8006a9e <USB_ReadDevAllInEpInterrupt>
 80030ba:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80030c0:	e0cd      	b.n	800325e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80030c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 80c2 	beq.w	8003252 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	4611      	mov	r1, r2
 80030d8:	4618      	mov	r0, r3
 80030da:	f003 fd18 	bl	8006b0e <USB_ReadDevInEPInterrupt>
 80030de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d057      	beq.n	800319a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	f003 030f 	and.w	r3, r3, #15
 80030f0:	2201      	movs	r2, #1
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	43db      	mvns	r3, r3
 8003104:	69f9      	ldr	r1, [r7, #28]
 8003106:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800310a:	4013      	ands	r3, r2
 800310c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	015a      	lsls	r2, r3, #5
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	4413      	add	r3, r2
 8003116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800311a:	461a      	mov	r2, r3
 800311c:	2301      	movs	r3, #1
 800311e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d132      	bne.n	800318e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800312c:	4613      	mov	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	4413      	add	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	334c      	adds	r3, #76	; 0x4c
 8003138:	6819      	ldr	r1, [r3, #0]
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800313e:	4613      	mov	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	4413      	add	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4403      	add	r3, r0
 8003148:	3348      	adds	r3, #72	; 0x48
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4419      	add	r1, r3
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003152:	4613      	mov	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	4413      	add	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4403      	add	r3, r0
 800315c:	334c      	adds	r3, #76	; 0x4c
 800315e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	2b00      	cmp	r3, #0
 8003164:	d113      	bne.n	800318e <HAL_PCD_IRQHandler+0x3a2>
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316a:	4613      	mov	r3, r2
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	4413      	add	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	440b      	add	r3, r1
 8003174:	3354      	adds	r3, #84	; 0x54
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d108      	bne.n	800318e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6818      	ldr	r0, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003186:	461a      	mov	r2, r3
 8003188:	2101      	movs	r1, #1
 800318a:	f003 fd1f 	bl	8006bcc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	b2db      	uxtb	r3, r3
 8003192:	4619      	mov	r1, r3
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f005 ff8e 	bl	80090b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	f003 0308 	and.w	r3, r3, #8
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d008      	beq.n	80031b6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	015a      	lsls	r2, r3, #5
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	4413      	add	r3, r2
 80031ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031b0:	461a      	mov	r2, r3
 80031b2:	2308      	movs	r3, #8
 80031b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f003 0310 	and.w	r3, r3, #16
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d008      	beq.n	80031d2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	015a      	lsls	r2, r3, #5
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031cc:	461a      	mov	r2, r3
 80031ce:	2310      	movs	r3, #16
 80031d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d008      	beq.n	80031ee <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031e8:	461a      	mov	r2, r3
 80031ea:	2340      	movs	r3, #64	; 0x40
 80031ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d023      	beq.n	8003240 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80031f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031fa:	6a38      	ldr	r0, [r7, #32]
 80031fc:	f002 fc00 	bl	8005a00 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003202:	4613      	mov	r3, r2
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	4413      	add	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	3338      	adds	r3, #56	; 0x38
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	4413      	add	r3, r2
 8003210:	3304      	adds	r3, #4
 8003212:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	78db      	ldrb	r3, [r3, #3]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d108      	bne.n	800322e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	2200      	movs	r2, #0
 8003220:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	b2db      	uxtb	r3, r3
 8003226:	4619      	mov	r1, r3
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f005 ffd1 	bl	80091d0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	015a      	lsls	r2, r3, #5
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	4413      	add	r3, r2
 8003236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800323a:	461a      	mov	r2, r3
 800323c:	2302      	movs	r3, #2
 800323e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800324a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 fcdb 	bl	8003c08 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	3301      	adds	r3, #1
 8003256:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325a:	085b      	lsrs	r3, r3, #1
 800325c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800325e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003260:	2b00      	cmp	r3, #0
 8003262:	f47f af2e 	bne.w	80030c2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f003 fbea 	bl	8006a44 <USB_ReadInterrupts>
 8003270:	4603      	mov	r3, r0
 8003272:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003276:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800327a:	d122      	bne.n	80032c2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	69fa      	ldr	r2, [r7, #28]
 8003286:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800328a:	f023 0301 	bic.w	r3, r3, #1
 800328e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003296:	2b01      	cmp	r3, #1
 8003298:	d108      	bne.n	80032ac <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80032a2:	2100      	movs	r1, #0
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 fec3 	bl	8004030 <HAL_PCDEx_LPM_Callback>
 80032aa:	e002      	b.n	80032b2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f005 ff6f 	bl	8009190 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	695a      	ldr	r2, [r3, #20]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80032c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f003 fbbc 	bl	8006a44 <USB_ReadInterrupts>
 80032cc:	4603      	mov	r3, r0
 80032ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032d6:	d112      	bne.n	80032fe <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d102      	bne.n	80032ee <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f005 ff2b 	bl	8009144 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695a      	ldr	r2, [r3, #20]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80032fc:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f003 fb9e 	bl	8006a44 <USB_ReadInterrupts>
 8003308:	4603      	mov	r3, r0
 800330a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800330e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003312:	f040 80b7 	bne.w	8003484 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	69fa      	ldr	r2, [r7, #28]
 8003320:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003324:	f023 0301 	bic.w	r3, r3, #1
 8003328:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2110      	movs	r1, #16
 8003330:	4618      	mov	r0, r3
 8003332:	f002 fb65 	bl	8005a00 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003336:	2300      	movs	r3, #0
 8003338:	62fb      	str	r3, [r7, #44]	; 0x2c
 800333a:	e046      	b.n	80033ca <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800333c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333e:	015a      	lsls	r2, r3, #5
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	4413      	add	r3, r2
 8003344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003348:	461a      	mov	r2, r3
 800334a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800334e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	4413      	add	r3, r2
 8003358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003360:	0151      	lsls	r1, r2, #5
 8003362:	69fa      	ldr	r2, [r7, #28]
 8003364:	440a      	add	r2, r1
 8003366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800336a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800336e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003372:	015a      	lsls	r2, r3, #5
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	4413      	add	r3, r2
 8003378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800337c:	461a      	mov	r2, r3
 800337e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003382:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003386:	015a      	lsls	r2, r3, #5
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	4413      	add	r3, r2
 800338c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003394:	0151      	lsls	r1, r2, #5
 8003396:	69fa      	ldr	r2, [r7, #28]
 8003398:	440a      	add	r2, r1
 800339a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800339e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033a2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a6:	015a      	lsls	r2, r3, #5
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	4413      	add	r3, r2
 80033ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033b4:	0151      	lsls	r1, r2, #5
 80033b6:	69fa      	ldr	r2, [r7, #28]
 80033b8:	440a      	add	r2, r1
 80033ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033c2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c6:	3301      	adds	r3, #1
 80033c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d3b3      	bcc.n	800333c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	69fa      	ldr	r2, [r7, #28]
 80033de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033e2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80033e6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d016      	beq.n	800341e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033fa:	69fa      	ldr	r2, [r7, #28]
 80033fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003400:	f043 030b 	orr.w	r3, r3, #11
 8003404:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800340e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003410:	69fa      	ldr	r2, [r7, #28]
 8003412:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003416:	f043 030b 	orr.w	r3, r3, #11
 800341a:	6453      	str	r3, [r2, #68]	; 0x44
 800341c:	e015      	b.n	800344a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	69fa      	ldr	r2, [r7, #28]
 8003428:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800342c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003430:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003434:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	69fa      	ldr	r2, [r7, #28]
 8003440:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003444:	f043 030b 	orr.w	r3, r3, #11
 8003448:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	69fa      	ldr	r2, [r7, #28]
 8003454:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003458:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800345c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6818      	ldr	r0, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800346e:	461a      	mov	r2, r3
 8003470:	f003 fbac 	bl	8006bcc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	695a      	ldr	r2, [r3, #20]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003482:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f003 fadb 	bl	8006a44 <USB_ReadInterrupts>
 800348e:	4603      	mov	r3, r0
 8003490:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003494:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003498:	d124      	bne.n	80034e4 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f003 fb71 	bl	8006b86 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f002 fb26 	bl	8005afa <USB_GetDevSpeed>
 80034ae:	4603      	mov	r3, r0
 80034b0:	461a      	mov	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681c      	ldr	r4, [r3, #0]
 80034ba:	f001 f9e9 	bl	8004890 <HAL_RCC_GetHCLKFreq>
 80034be:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	461a      	mov	r2, r3
 80034c8:	4620      	mov	r0, r4
 80034ca:	f002 f825 	bl	8005518 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f005 fe19 	bl	8009106 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695a      	ldr	r2, [r3, #20]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80034e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f003 faab 	bl	8006a44 <USB_ReadInterrupts>
 80034ee:	4603      	mov	r3, r0
 80034f0:	f003 0308 	and.w	r3, r3, #8
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d10a      	bne.n	800350e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f005 fdf6 	bl	80090ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	695a      	ldr	r2, [r3, #20]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f002 0208 	and.w	r2, r2, #8
 800350c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f003 fa96 	bl	8006a44 <USB_ReadInterrupts>
 8003518:	4603      	mov	r3, r0
 800351a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351e:	2b80      	cmp	r3, #128	; 0x80
 8003520:	d122      	bne.n	8003568 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800352e:	2301      	movs	r3, #1
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
 8003532:	e014      	b.n	800355e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003538:	4613      	mov	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	4413      	add	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d105      	bne.n	8003558 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	b2db      	uxtb	r3, r3
 8003550:	4619      	mov	r1, r3
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 fb27 	bl	8003ba6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	3301      	adds	r3, #1
 800355c:	627b      	str	r3, [r7, #36]	; 0x24
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003564:	429a      	cmp	r2, r3
 8003566:	d3e5      	bcc.n	8003534 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4618      	mov	r0, r3
 800356e:	f003 fa69 	bl	8006a44 <USB_ReadInterrupts>
 8003572:	4603      	mov	r3, r0
 8003574:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003578:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800357c:	d13b      	bne.n	80035f6 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800357e:	2301      	movs	r3, #1
 8003580:	627b      	str	r3, [r7, #36]	; 0x24
 8003582:	e02b      	b.n	80035dc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	4413      	add	r3, r2
 800358c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003598:	4613      	mov	r3, r2
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	4413      	add	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	440b      	add	r3, r1
 80035a2:	3340      	adds	r3, #64	; 0x40
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d115      	bne.n	80035d6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80035aa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	da12      	bge.n	80035d6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b4:	4613      	mov	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	4413      	add	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	333f      	adds	r3, #63	; 0x3f
 80035c0:	2201      	movs	r2, #1
 80035c2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	4619      	mov	r1, r3
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 fae8 	bl	8003ba6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	3301      	adds	r3, #1
 80035da:	627b      	str	r3, [r7, #36]	; 0x24
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d3ce      	bcc.n	8003584 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	695a      	ldr	r2, [r3, #20]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80035f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f003 fa22 	bl	8006a44 <USB_ReadInterrupts>
 8003600:	4603      	mov	r3, r0
 8003602:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003606:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800360a:	d155      	bne.n	80036b8 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800360c:	2301      	movs	r3, #1
 800360e:	627b      	str	r3, [r7, #36]	; 0x24
 8003610:	e045      	b.n	800369e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	015a      	lsls	r2, r3, #5
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	4413      	add	r3, r2
 800361a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003626:	4613      	mov	r3, r2
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	4413      	add	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	440b      	add	r3, r1
 8003630:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d12e      	bne.n	8003698 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800363a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800363c:	2b00      	cmp	r3, #0
 800363e:	da2b      	bge.n	8003698 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800364c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003650:	429a      	cmp	r2, r3
 8003652:	d121      	bne.n	8003698 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003658:	4613      	mov	r3, r2
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	4413      	add	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003666:	2201      	movs	r2, #1
 8003668:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10a      	bne.n	8003698 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	69fa      	ldr	r2, [r7, #28]
 800368c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003690:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003694:	6053      	str	r3, [r2, #4]
            break;
 8003696:	e007      	b.n	80036a8 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	3301      	adds	r3, #1
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d3b4      	bcc.n	8003612 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	695a      	ldr	r2, [r3, #20]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80036b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4618      	mov	r0, r3
 80036be:	f003 f9c1 	bl	8006a44 <USB_ReadInterrupts>
 80036c2:	4603      	mov	r3, r0
 80036c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80036c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036cc:	d10a      	bne.n	80036e4 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f005 fd90 	bl	80091f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695a      	ldr	r2, [r3, #20]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80036e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f003 f9ab 	bl	8006a44 <USB_ReadInterrupts>
 80036ee:	4603      	mov	r3, r0
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b04      	cmp	r3, #4
 80036f6:	d115      	bne.n	8003724 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	2b00      	cmp	r3, #0
 8003708:	d002      	beq.n	8003710 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f005 fd80 	bl	8009210 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6859      	ldr	r1, [r3, #4]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	430a      	orrs	r2, r1
 800371e:	605a      	str	r2, [r3, #4]
 8003720:	e000      	b.n	8003724 <HAL_PCD_IRQHandler+0x938>
      return;
 8003722:	bf00      	nop
    }
  }
}
 8003724:	3734      	adds	r7, #52	; 0x34
 8003726:	46bd      	mov	sp, r7
 8003728:	bd90      	pop	{r4, r7, pc}

0800372a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b082      	sub	sp, #8
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	460b      	mov	r3, r1
 8003734:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800373c:	2b01      	cmp	r3, #1
 800373e:	d101      	bne.n	8003744 <HAL_PCD_SetAddress+0x1a>
 8003740:	2302      	movs	r3, #2
 8003742:	e013      	b.n	800376c <HAL_PCD_SetAddress+0x42>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	78fa      	ldrb	r2, [r7, #3]
 8003750:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	78fa      	ldrb	r2, [r7, #3]
 800375a:	4611      	mov	r1, r2
 800375c:	4618      	mov	r0, r3
 800375e:	f003 f909 	bl	8006974 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	4608      	mov	r0, r1
 800377e:	4611      	mov	r1, r2
 8003780:	461a      	mov	r2, r3
 8003782:	4603      	mov	r3, r0
 8003784:	70fb      	strb	r3, [r7, #3]
 8003786:	460b      	mov	r3, r1
 8003788:	803b      	strh	r3, [r7, #0]
 800378a:	4613      	mov	r3, r2
 800378c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800378e:	2300      	movs	r3, #0
 8003790:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003792:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003796:	2b00      	cmp	r3, #0
 8003798:	da0f      	bge.n	80037ba <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800379a:	78fb      	ldrb	r3, [r7, #3]
 800379c:	f003 020f 	and.w	r2, r3, #15
 80037a0:	4613      	mov	r3, r2
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	4413      	add	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	3338      	adds	r3, #56	; 0x38
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	4413      	add	r3, r2
 80037ae:	3304      	adds	r3, #4
 80037b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2201      	movs	r2, #1
 80037b6:	705a      	strb	r2, [r3, #1]
 80037b8:	e00f      	b.n	80037da <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037ba:	78fb      	ldrb	r3, [r7, #3]
 80037bc:	f003 020f 	and.w	r2, r3, #15
 80037c0:	4613      	mov	r3, r2
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	4413      	add	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	4413      	add	r3, r2
 80037d0:	3304      	adds	r3, #4
 80037d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80037da:	78fb      	ldrb	r3, [r7, #3]
 80037dc:	f003 030f 	and.w	r3, r3, #15
 80037e0:	b2da      	uxtb	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80037e6:	883a      	ldrh	r2, [r7, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	78ba      	ldrb	r2, [r7, #2]
 80037f0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	785b      	ldrb	r3, [r3, #1]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d004      	beq.n	8003804 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003804:	78bb      	ldrb	r3, [r7, #2]
 8003806:	2b02      	cmp	r3, #2
 8003808:	d102      	bne.n	8003810 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <HAL_PCD_EP_Open+0xaa>
 800381a:	2302      	movs	r3, #2
 800381c:	e00e      	b.n	800383c <HAL_PCD_EP_Open+0xc8>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68f9      	ldr	r1, [r7, #12]
 800382c:	4618      	mov	r0, r3
 800382e:	f002 f989 	bl	8005b44 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800383a:	7afb      	ldrb	r3, [r7, #11]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	460b      	mov	r3, r1
 800384e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003850:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003854:	2b00      	cmp	r3, #0
 8003856:	da0f      	bge.n	8003878 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003858:	78fb      	ldrb	r3, [r7, #3]
 800385a:	f003 020f 	and.w	r2, r3, #15
 800385e:	4613      	mov	r3, r2
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	4413      	add	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	3338      	adds	r3, #56	; 0x38
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	4413      	add	r3, r2
 800386c:	3304      	adds	r3, #4
 800386e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2201      	movs	r2, #1
 8003874:	705a      	strb	r2, [r3, #1]
 8003876:	e00f      	b.n	8003898 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003878:	78fb      	ldrb	r3, [r7, #3]
 800387a:	f003 020f 	and.w	r2, r3, #15
 800387e:	4613      	mov	r3, r2
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	4413      	add	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	4413      	add	r3, r2
 800388e:	3304      	adds	r3, #4
 8003890:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003898:	78fb      	ldrb	r3, [r7, #3]
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	b2da      	uxtb	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d101      	bne.n	80038b2 <HAL_PCD_EP_Close+0x6e>
 80038ae:	2302      	movs	r3, #2
 80038b0:	e00e      	b.n	80038d0 <HAL_PCD_EP_Close+0x8c>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68f9      	ldr	r1, [r7, #12]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f002 f9c7 	bl	8005c54 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	607a      	str	r2, [r7, #4]
 80038e2:	603b      	str	r3, [r7, #0]
 80038e4:	460b      	mov	r3, r1
 80038e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038e8:	7afb      	ldrb	r3, [r7, #11]
 80038ea:	f003 020f 	and.w	r2, r3, #15
 80038ee:	4613      	mov	r3, r2
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	4413      	add	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	4413      	add	r3, r2
 80038fe:	3304      	adds	r3, #4
 8003900:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	2200      	movs	r2, #0
 8003912:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	2200      	movs	r2, #0
 8003918:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800391a:	7afb      	ldrb	r3, [r7, #11]
 800391c:	f003 030f 	and.w	r3, r3, #15
 8003920:	b2da      	uxtb	r2, r3
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d102      	bne.n	8003934 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003934:	7afb      	ldrb	r3, [r7, #11]
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	2b00      	cmp	r3, #0
 800393c:	d109      	bne.n	8003952 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6818      	ldr	r0, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	b2db      	uxtb	r3, r3
 8003948:	461a      	mov	r2, r3
 800394a:	6979      	ldr	r1, [r7, #20]
 800394c:	f002 fca6 	bl	800629c <USB_EP0StartXfer>
 8003950:	e008      	b.n	8003964 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6818      	ldr	r0, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	b2db      	uxtb	r3, r3
 800395c:	461a      	mov	r2, r3
 800395e:	6979      	ldr	r1, [r7, #20]
 8003960:	f002 fa54 	bl	8005e0c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
 8003976:	460b      	mov	r3, r1
 8003978:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800397a:	78fb      	ldrb	r3, [r7, #3]
 800397c:	f003 020f 	and.w	r2, r3, #15
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	4613      	mov	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	4413      	add	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	440b      	add	r3, r1
 800398c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003990:	681b      	ldr	r3, [r3, #0]
}
 8003992:	4618      	mov	r0, r3
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b086      	sub	sp, #24
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	60f8      	str	r0, [r7, #12]
 80039a6:	607a      	str	r2, [r7, #4]
 80039a8:	603b      	str	r3, [r7, #0]
 80039aa:	460b      	mov	r3, r1
 80039ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039ae:	7afb      	ldrb	r3, [r7, #11]
 80039b0:	f003 020f 	and.w	r2, r3, #15
 80039b4:	4613      	mov	r3, r2
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	4413      	add	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	3338      	adds	r3, #56	; 0x38
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	4413      	add	r3, r2
 80039c2:	3304      	adds	r3, #4
 80039c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2200      	movs	r2, #0
 80039d6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2201      	movs	r2, #1
 80039dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039de:	7afb      	ldrb	r3, [r7, #11]
 80039e0:	f003 030f 	and.w	r3, r3, #15
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d102      	bne.n	80039f8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039f8:	7afb      	ldrb	r3, [r7, #11]
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d109      	bne.n	8003a16 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6818      	ldr	r0, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	6979      	ldr	r1, [r7, #20]
 8003a10:	f002 fc44 	bl	800629c <USB_EP0StartXfer>
 8003a14:	e008      	b.n	8003a28 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6818      	ldr	r0, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	461a      	mov	r2, r3
 8003a22:	6979      	ldr	r1, [r7, #20]
 8003a24:	f002 f9f2 	bl	8005e0c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3718      	adds	r7, #24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b084      	sub	sp, #16
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a3e:	78fb      	ldrb	r3, [r7, #3]
 8003a40:	f003 020f 	and.w	r2, r3, #15
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d901      	bls.n	8003a50 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e050      	b.n	8003af2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	da0f      	bge.n	8003a78 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a58:	78fb      	ldrb	r3, [r7, #3]
 8003a5a:	f003 020f 	and.w	r2, r3, #15
 8003a5e:	4613      	mov	r3, r2
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	4413      	add	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	3338      	adds	r3, #56	; 0x38
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2201      	movs	r2, #1
 8003a74:	705a      	strb	r2, [r3, #1]
 8003a76:	e00d      	b.n	8003a94 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a78:	78fa      	ldrb	r2, [r7, #3]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	4413      	add	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	4413      	add	r3, r2
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2201      	movs	r2, #1
 8003a98:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a9a:	78fb      	ldrb	r3, [r7, #3]
 8003a9c:	f003 030f 	and.w	r3, r3, #15
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <HAL_PCD_EP_SetStall+0x82>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e01e      	b.n	8003af2 <HAL_PCD_EP_SetStall+0xc0>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68f9      	ldr	r1, [r7, #12]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f002 fe82 	bl	80067cc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ac8:	78fb      	ldrb	r3, [r7, #3]
 8003aca:	f003 030f 	and.w	r3, r3, #15
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10a      	bne.n	8003ae8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6818      	ldr	r0, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	b2d9      	uxtb	r1, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	f003 f872 	bl	8006bcc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b084      	sub	sp, #16
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	460b      	mov	r3, r1
 8003b04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b06:	78fb      	ldrb	r3, [r7, #3]
 8003b08:	f003 020f 	and.w	r2, r3, #15
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d901      	bls.n	8003b18 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e042      	b.n	8003b9e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	da0f      	bge.n	8003b40 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b20:	78fb      	ldrb	r3, [r7, #3]
 8003b22:	f003 020f 	and.w	r2, r3, #15
 8003b26:	4613      	mov	r3, r2
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	4413      	add	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	3338      	adds	r3, #56	; 0x38
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	4413      	add	r3, r2
 8003b34:	3304      	adds	r3, #4
 8003b36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	705a      	strb	r2, [r3, #1]
 8003b3e:	e00f      	b.n	8003b60 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b40:	78fb      	ldrb	r3, [r7, #3]
 8003b42:	f003 020f 	and.w	r2, r3, #15
 8003b46:	4613      	mov	r3, r2
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	4413      	add	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	4413      	add	r3, r2
 8003b56:	3304      	adds	r3, #4
 8003b58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b66:	78fb      	ldrb	r3, [r7, #3]
 8003b68:	f003 030f 	and.w	r3, r3, #15
 8003b6c:	b2da      	uxtb	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d101      	bne.n	8003b80 <HAL_PCD_EP_ClrStall+0x86>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	e00e      	b.n	8003b9e <HAL_PCD_EP_ClrStall+0xa4>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68f9      	ldr	r1, [r7, #12]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f002 fe8a 	bl	80068a8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b084      	sub	sp, #16
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	460b      	mov	r3, r1
 8003bb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003bb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	da0c      	bge.n	8003bd4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bba:	78fb      	ldrb	r3, [r7, #3]
 8003bbc:	f003 020f 	and.w	r2, r3, #15
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	4413      	add	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	3338      	adds	r3, #56	; 0x38
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	4413      	add	r3, r2
 8003bce:	3304      	adds	r3, #4
 8003bd0:	60fb      	str	r3, [r7, #12]
 8003bd2:	e00c      	b.n	8003bee <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bd4:	78fb      	ldrb	r3, [r7, #3]
 8003bd6:	f003 020f 	and.w	r2, r3, #15
 8003bda:	4613      	mov	r3, r2
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	4413      	add	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	4413      	add	r3, r2
 8003bea:	3304      	adds	r3, #4
 8003bec:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68f9      	ldr	r1, [r7, #12]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f002 fca9 	bl	800654c <USB_EPStopXfer>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003bfe:	7afb      	ldrb	r3, [r7, #11]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b08a      	sub	sp, #40	; 0x28
 8003c0c:	af02      	add	r7, sp, #8
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	4413      	add	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	3338      	adds	r3, #56	; 0x38
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6a1a      	ldr	r2, [r3, #32]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d901      	bls.n	8003c40 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e06c      	b.n	8003d1a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	699a      	ldr	r2, [r3, #24]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	69fa      	ldr	r2, [r7, #28]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d902      	bls.n	8003c5c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	3303      	adds	r3, #3
 8003c60:	089b      	lsrs	r3, r3, #2
 8003c62:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c64:	e02b      	b.n	8003cbe <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	699a      	ldr	r2, [r3, #24]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	69fa      	ldr	r2, [r7, #28]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d902      	bls.n	8003c82 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	3303      	adds	r3, #3
 8003c86:	089b      	lsrs	r3, r3, #2
 8003c88:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6919      	ldr	r1, [r3, #16]
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	6978      	ldr	r0, [r7, #20]
 8003ca2:	f002 fcfd 	bl	80066a0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	691a      	ldr	r2, [r3, #16]
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	441a      	add	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6a1a      	ldr	r2, [r3, #32]
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	441a      	add	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	015a      	lsls	r2, r3, #5
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d809      	bhi.n	8003ce8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6a1a      	ldr	r2, [r3, #32]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d203      	bcs.n	8003ce8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1be      	bne.n	8003c66 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	699a      	ldr	r2, [r3, #24]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d811      	bhi.n	8003d18 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	6939      	ldr	r1, [r7, #16]
 8003d10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d14:	4013      	ands	r3, r2
 8003d16:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3720      	adds	r7, #32
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
	...

08003d24 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b088      	sub	sp, #32
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	333c      	adds	r3, #60	; 0x3c
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d17b      	bne.n	8003e52 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	f003 0308 	and.w	r3, r3, #8
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d015      	beq.n	8003d90 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	4a61      	ldr	r2, [pc, #388]	; (8003eec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	f240 80b9 	bls.w	8003ee0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 80b3 	beq.w	8003ee0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	015a      	lsls	r2, r3, #5
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	4413      	add	r3, r2
 8003d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d86:	461a      	mov	r2, r3
 8003d88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d8c:	6093      	str	r3, [r2, #8]
 8003d8e:	e0a7      	b.n	8003ee0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	f003 0320 	and.w	r3, r3, #32
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d009      	beq.n	8003dae <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	015a      	lsls	r2, r3, #5
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	4413      	add	r3, r2
 8003da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003da6:	461a      	mov	r2, r3
 8003da8:	2320      	movs	r3, #32
 8003daa:	6093      	str	r3, [r2, #8]
 8003dac:	e098      	b.n	8003ee0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f040 8093 	bne.w	8003ee0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	4a4b      	ldr	r2, [pc, #300]	; (8003eec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d90f      	bls.n	8003de2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00a      	beq.n	8003de2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	015a      	lsls	r2, r3, #5
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd8:	461a      	mov	r2, r3
 8003dda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dde:	6093      	str	r3, [r2, #8]
 8003de0:	e07e      	b.n	8003ee0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	4613      	mov	r3, r2
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	4413      	add	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	4413      	add	r3, r2
 8003df4:	3304      	adds	r3, #4
 8003df6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	69da      	ldr	r2, [r3, #28]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	0159      	lsls	r1, r3, #5
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	440b      	add	r3, r1
 8003e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e0e:	1ad2      	subs	r2, r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d114      	bne.n	8003e44 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d109      	bne.n	8003e36 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6818      	ldr	r0, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	2101      	movs	r1, #1
 8003e30:	f002 fecc 	bl	8006bcc <USB_EP0_OutStart>
 8003e34:	e006      	b.n	8003e44 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	691a      	ldr	r2, [r3, #16]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	441a      	add	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	4619      	mov	r1, r3
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f005 f918 	bl	8009080 <HAL_PCD_DataOutStageCallback>
 8003e50:	e046      	b.n	8003ee0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	4a26      	ldr	r2, [pc, #152]	; (8003ef0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d124      	bne.n	8003ea4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00a      	beq.n	8003e7a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e70:	461a      	mov	r2, r3
 8003e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e76:	6093      	str	r3, [r2, #8]
 8003e78:	e032      	b.n	8003ee0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	f003 0320 	and.w	r3, r3, #32
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d008      	beq.n	8003e96 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	015a      	lsls	r2, r3, #5
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e90:	461a      	mov	r2, r3
 8003e92:	2320      	movs	r3, #32
 8003e94:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f005 f8ef 	bl	8009080 <HAL_PCD_DataOutStageCallback>
 8003ea2:	e01d      	b.n	8003ee0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d114      	bne.n	8003ed4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003eaa:	6879      	ldr	r1, [r7, #4]
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	4413      	add	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	440b      	add	r3, r1
 8003eb8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d108      	bne.n	8003ed4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6818      	ldr	r0, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ecc:	461a      	mov	r2, r3
 8003ece:	2100      	movs	r1, #0
 8003ed0:	f002 fe7c 	bl	8006bcc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	4619      	mov	r1, r3
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f005 f8d0 	bl	8009080 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3720      	adds	r7, #32
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	4f54300a 	.word	0x4f54300a
 8003ef0:	4f54310a 	.word	0x4f54310a

08003ef4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	333c      	adds	r3, #60	; 0x3c
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	015a      	lsls	r2, r3, #5
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	4413      	add	r3, r2
 8003f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	4a15      	ldr	r2, [pc, #84]	; (8003f7c <PCD_EP_OutSetupPacket_int+0x88>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d90e      	bls.n	8003f48 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d009      	beq.n	8003f48 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f40:	461a      	mov	r2, r3
 8003f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f46:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f005 f887 	bl	800905c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	4a0a      	ldr	r2, [pc, #40]	; (8003f7c <PCD_EP_OutSetupPacket_int+0x88>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d90c      	bls.n	8003f70 <PCD_EP_OutSetupPacket_int+0x7c>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d108      	bne.n	8003f70 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6818      	ldr	r0, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f68:	461a      	mov	r2, r3
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	f002 fe2e 	bl	8006bcc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	4f54300a 	.word	0x4f54300a

08003f80 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	460b      	mov	r3, r1
 8003f8a:	70fb      	strb	r3, [r7, #3]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003f98:	78fb      	ldrb	r3, [r7, #3]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d107      	bne.n	8003fae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003f9e:	883b      	ldrh	r3, [r7, #0]
 8003fa0:	0419      	lsls	r1, r3, #16
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	629a      	str	r2, [r3, #40]	; 0x28
 8003fac:	e028      	b.n	8004000 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb4:	0c1b      	lsrs	r3, r3, #16
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	4413      	add	r3, r2
 8003fba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	73fb      	strb	r3, [r7, #15]
 8003fc0:	e00d      	b.n	8003fde <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	7bfb      	ldrb	r3, [r7, #15]
 8003fc8:	3340      	adds	r3, #64	; 0x40
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	0c1b      	lsrs	r3, r3, #16
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003fd8:	7bfb      	ldrb	r3, [r7, #15]
 8003fda:	3301      	adds	r3, #1
 8003fdc:	73fb      	strb	r3, [r7, #15]
 8003fde:	7bfa      	ldrb	r2, [r7, #15]
 8003fe0:	78fb      	ldrb	r3, [r7, #3]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d3ec      	bcc.n	8003fc2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003fe8:	883b      	ldrh	r3, [r7, #0]
 8003fea:	0418      	lsls	r0, r3, #16
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6819      	ldr	r1, [r3, #0]
 8003ff0:	78fb      	ldrb	r3, [r7, #3]
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	4302      	orrs	r2, r0
 8003ff8:	3340      	adds	r3, #64	; 0x40
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800400e:	b480      	push	{r7}
 8004010:	b083      	sub	sp, #12
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
 8004016:	460b      	mov	r3, r1
 8004018:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	887a      	ldrh	r2, [r7, #2]
 8004020:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e267      	b.n	800452a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d075      	beq.n	8004152 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004066:	4b88      	ldr	r3, [pc, #544]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 030c 	and.w	r3, r3, #12
 800406e:	2b04      	cmp	r3, #4
 8004070:	d00c      	beq.n	800408c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004072:	4b85      	ldr	r3, [pc, #532]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800407a:	2b08      	cmp	r3, #8
 800407c:	d112      	bne.n	80040a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800407e:	4b82      	ldr	r3, [pc, #520]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004086:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800408a:	d10b      	bne.n	80040a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800408c:	4b7e      	ldr	r3, [pc, #504]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d05b      	beq.n	8004150 <HAL_RCC_OscConfig+0x108>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d157      	bne.n	8004150 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e242      	b.n	800452a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ac:	d106      	bne.n	80040bc <HAL_RCC_OscConfig+0x74>
 80040ae:	4b76      	ldr	r3, [pc, #472]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a75      	ldr	r2, [pc, #468]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 80040b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b8:	6013      	str	r3, [r2, #0]
 80040ba:	e01d      	b.n	80040f8 <HAL_RCC_OscConfig+0xb0>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040c4:	d10c      	bne.n	80040e0 <HAL_RCC_OscConfig+0x98>
 80040c6:	4b70      	ldr	r3, [pc, #448]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a6f      	ldr	r2, [pc, #444]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 80040cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040d0:	6013      	str	r3, [r2, #0]
 80040d2:	4b6d      	ldr	r3, [pc, #436]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a6c      	ldr	r2, [pc, #432]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 80040d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040dc:	6013      	str	r3, [r2, #0]
 80040de:	e00b      	b.n	80040f8 <HAL_RCC_OscConfig+0xb0>
 80040e0:	4b69      	ldr	r3, [pc, #420]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a68      	ldr	r2, [pc, #416]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 80040e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ea:	6013      	str	r3, [r2, #0]
 80040ec:	4b66      	ldr	r3, [pc, #408]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a65      	ldr	r2, [pc, #404]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 80040f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d013      	beq.n	8004128 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004100:	f7fe fa44 	bl	800258c <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004108:	f7fe fa40 	bl	800258c <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b64      	cmp	r3, #100	; 0x64
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e207      	b.n	800452a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800411a:	4b5b      	ldr	r3, [pc, #364]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0f0      	beq.n	8004108 <HAL_RCC_OscConfig+0xc0>
 8004126:	e014      	b.n	8004152 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004128:	f7fe fa30 	bl	800258c <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004130:	f7fe fa2c 	bl	800258c <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b64      	cmp	r3, #100	; 0x64
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e1f3      	b.n	800452a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004142:	4b51      	ldr	r3, [pc, #324]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1f0      	bne.n	8004130 <HAL_RCC_OscConfig+0xe8>
 800414e:	e000      	b.n	8004152 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004150:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d063      	beq.n	8004226 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800415e:	4b4a      	ldr	r3, [pc, #296]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 030c 	and.w	r3, r3, #12
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00b      	beq.n	8004182 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800416a:	4b47      	ldr	r3, [pc, #284]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004172:	2b08      	cmp	r3, #8
 8004174:	d11c      	bne.n	80041b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004176:	4b44      	ldr	r3, [pc, #272]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d116      	bne.n	80041b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004182:	4b41      	ldr	r3, [pc, #260]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d005      	beq.n	800419a <HAL_RCC_OscConfig+0x152>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d001      	beq.n	800419a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e1c7      	b.n	800452a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800419a:	4b3b      	ldr	r3, [pc, #236]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	4937      	ldr	r1, [pc, #220]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ae:	e03a      	b.n	8004226 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d020      	beq.n	80041fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041b8:	4b34      	ldr	r3, [pc, #208]	; (800428c <HAL_RCC_OscConfig+0x244>)
 80041ba:	2201      	movs	r2, #1
 80041bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041be:	f7fe f9e5 	bl	800258c <HAL_GetTick>
 80041c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c4:	e008      	b.n	80041d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041c6:	f7fe f9e1 	bl	800258c <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e1a8      	b.n	800452a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d8:	4b2b      	ldr	r3, [pc, #172]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0f0      	beq.n	80041c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041e4:	4b28      	ldr	r3, [pc, #160]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	4925      	ldr	r1, [pc, #148]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	600b      	str	r3, [r1, #0]
 80041f8:	e015      	b.n	8004226 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041fa:	4b24      	ldr	r3, [pc, #144]	; (800428c <HAL_RCC_OscConfig+0x244>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004200:	f7fe f9c4 	bl	800258c <HAL_GetTick>
 8004204:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004208:	f7fe f9c0 	bl	800258c <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e187      	b.n	800452a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800421a:	4b1b      	ldr	r3, [pc, #108]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1f0      	bne.n	8004208 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b00      	cmp	r3, #0
 8004230:	d036      	beq.n	80042a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d016      	beq.n	8004268 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800423a:	4b15      	ldr	r3, [pc, #84]	; (8004290 <HAL_RCC_OscConfig+0x248>)
 800423c:	2201      	movs	r2, #1
 800423e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004240:	f7fe f9a4 	bl	800258c <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004248:	f7fe f9a0 	bl	800258c <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e167      	b.n	800452a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800425a:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 800425c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d0f0      	beq.n	8004248 <HAL_RCC_OscConfig+0x200>
 8004266:	e01b      	b.n	80042a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004268:	4b09      	ldr	r3, [pc, #36]	; (8004290 <HAL_RCC_OscConfig+0x248>)
 800426a:	2200      	movs	r2, #0
 800426c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800426e:	f7fe f98d 	bl	800258c <HAL_GetTick>
 8004272:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004274:	e00e      	b.n	8004294 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004276:	f7fe f989 	bl	800258c <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b02      	cmp	r3, #2
 8004282:	d907      	bls.n	8004294 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e150      	b.n	800452a <HAL_RCC_OscConfig+0x4e2>
 8004288:	40023800 	.word	0x40023800
 800428c:	42470000 	.word	0x42470000
 8004290:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004294:	4b88      	ldr	r3, [pc, #544]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 8004296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1ea      	bne.n	8004276 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0304 	and.w	r3, r3, #4
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 8097 	beq.w	80043dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ae:	2300      	movs	r3, #0
 80042b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042b2:	4b81      	ldr	r3, [pc, #516]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10f      	bne.n	80042de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042be:	2300      	movs	r3, #0
 80042c0:	60bb      	str	r3, [r7, #8]
 80042c2:	4b7d      	ldr	r3, [pc, #500]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	4a7c      	ldr	r2, [pc, #496]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 80042c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042cc:	6413      	str	r3, [r2, #64]	; 0x40
 80042ce:	4b7a      	ldr	r3, [pc, #488]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 80042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d6:	60bb      	str	r3, [r7, #8]
 80042d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042da:	2301      	movs	r3, #1
 80042dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042de:	4b77      	ldr	r3, [pc, #476]	; (80044bc <HAL_RCC_OscConfig+0x474>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d118      	bne.n	800431c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042ea:	4b74      	ldr	r3, [pc, #464]	; (80044bc <HAL_RCC_OscConfig+0x474>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a73      	ldr	r2, [pc, #460]	; (80044bc <HAL_RCC_OscConfig+0x474>)
 80042f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042f6:	f7fe f949 	bl	800258c <HAL_GetTick>
 80042fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042fc:	e008      	b.n	8004310 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042fe:	f7fe f945 	bl	800258c <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e10c      	b.n	800452a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004310:	4b6a      	ldr	r3, [pc, #424]	; (80044bc <HAL_RCC_OscConfig+0x474>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0f0      	beq.n	80042fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d106      	bne.n	8004332 <HAL_RCC_OscConfig+0x2ea>
 8004324:	4b64      	ldr	r3, [pc, #400]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 8004326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004328:	4a63      	ldr	r2, [pc, #396]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 800432a:	f043 0301 	orr.w	r3, r3, #1
 800432e:	6713      	str	r3, [r2, #112]	; 0x70
 8004330:	e01c      	b.n	800436c <HAL_RCC_OscConfig+0x324>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	2b05      	cmp	r3, #5
 8004338:	d10c      	bne.n	8004354 <HAL_RCC_OscConfig+0x30c>
 800433a:	4b5f      	ldr	r3, [pc, #380]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 800433c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433e:	4a5e      	ldr	r2, [pc, #376]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 8004340:	f043 0304 	orr.w	r3, r3, #4
 8004344:	6713      	str	r3, [r2, #112]	; 0x70
 8004346:	4b5c      	ldr	r3, [pc, #368]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 8004348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434a:	4a5b      	ldr	r2, [pc, #364]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 800434c:	f043 0301 	orr.w	r3, r3, #1
 8004350:	6713      	str	r3, [r2, #112]	; 0x70
 8004352:	e00b      	b.n	800436c <HAL_RCC_OscConfig+0x324>
 8004354:	4b58      	ldr	r3, [pc, #352]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 8004356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004358:	4a57      	ldr	r2, [pc, #348]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 800435a:	f023 0301 	bic.w	r3, r3, #1
 800435e:	6713      	str	r3, [r2, #112]	; 0x70
 8004360:	4b55      	ldr	r3, [pc, #340]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 8004362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004364:	4a54      	ldr	r2, [pc, #336]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 8004366:	f023 0304 	bic.w	r3, r3, #4
 800436a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d015      	beq.n	80043a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004374:	f7fe f90a 	bl	800258c <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800437a:	e00a      	b.n	8004392 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800437c:	f7fe f906 	bl	800258c <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	f241 3288 	movw	r2, #5000	; 0x1388
 800438a:	4293      	cmp	r3, r2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e0cb      	b.n	800452a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004392:	4b49      	ldr	r3, [pc, #292]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 8004394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0ee      	beq.n	800437c <HAL_RCC_OscConfig+0x334>
 800439e:	e014      	b.n	80043ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043a0:	f7fe f8f4 	bl	800258c <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043a6:	e00a      	b.n	80043be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043a8:	f7fe f8f0 	bl	800258c <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e0b5      	b.n	800452a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043be:	4b3e      	ldr	r3, [pc, #248]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 80043c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1ee      	bne.n	80043a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043ca:	7dfb      	ldrb	r3, [r7, #23]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d105      	bne.n	80043dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043d0:	4b39      	ldr	r3, [pc, #228]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 80043d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d4:	4a38      	ldr	r2, [pc, #224]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 80043d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 80a1 	beq.w	8004528 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043e6:	4b34      	ldr	r3, [pc, #208]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 030c 	and.w	r3, r3, #12
 80043ee:	2b08      	cmp	r3, #8
 80043f0:	d05c      	beq.n	80044ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d141      	bne.n	800447e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043fa:	4b31      	ldr	r3, [pc, #196]	; (80044c0 <HAL_RCC_OscConfig+0x478>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004400:	f7fe f8c4 	bl	800258c <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004408:	f7fe f8c0 	bl	800258c <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e087      	b.n	800452a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800441a:	4b27      	ldr	r3, [pc, #156]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1f0      	bne.n	8004408 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69da      	ldr	r2, [r3, #28]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	019b      	lsls	r3, r3, #6
 8004436:	431a      	orrs	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443c:	085b      	lsrs	r3, r3, #1
 800443e:	3b01      	subs	r3, #1
 8004440:	041b      	lsls	r3, r3, #16
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004448:	061b      	lsls	r3, r3, #24
 800444a:	491b      	ldr	r1, [pc, #108]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 800444c:	4313      	orrs	r3, r2
 800444e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004450:	4b1b      	ldr	r3, [pc, #108]	; (80044c0 <HAL_RCC_OscConfig+0x478>)
 8004452:	2201      	movs	r2, #1
 8004454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004456:	f7fe f899 	bl	800258c <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800445e:	f7fe f895 	bl	800258c <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e05c      	b.n	800452a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004470:	4b11      	ldr	r3, [pc, #68]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0f0      	beq.n	800445e <HAL_RCC_OscConfig+0x416>
 800447c:	e054      	b.n	8004528 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800447e:	4b10      	ldr	r3, [pc, #64]	; (80044c0 <HAL_RCC_OscConfig+0x478>)
 8004480:	2200      	movs	r2, #0
 8004482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004484:	f7fe f882 	bl	800258c <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800448c:	f7fe f87e 	bl	800258c <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e045      	b.n	800452a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800449e:	4b06      	ldr	r3, [pc, #24]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1f0      	bne.n	800448c <HAL_RCC_OscConfig+0x444>
 80044aa:	e03d      	b.n	8004528 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d107      	bne.n	80044c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e038      	b.n	800452a <HAL_RCC_OscConfig+0x4e2>
 80044b8:	40023800 	.word	0x40023800
 80044bc:	40007000 	.word	0x40007000
 80044c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044c4:	4b1b      	ldr	r3, [pc, #108]	; (8004534 <HAL_RCC_OscConfig+0x4ec>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d028      	beq.n	8004524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044dc:	429a      	cmp	r2, r3
 80044de:	d121      	bne.n	8004524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d11a      	bne.n	8004524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044f4:	4013      	ands	r3, r2
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d111      	bne.n	8004524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450a:	085b      	lsrs	r3, r3, #1
 800450c:	3b01      	subs	r3, #1
 800450e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004510:	429a      	cmp	r2, r3
 8004512:	d107      	bne.n	8004524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004520:	429a      	cmp	r2, r3
 8004522:	d001      	beq.n	8004528 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e000      	b.n	800452a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3718      	adds	r7, #24
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	40023800 	.word	0x40023800

08004538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e0cc      	b.n	80046e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800454c:	4b68      	ldr	r3, [pc, #416]	; (80046f0 <HAL_RCC_ClockConfig+0x1b8>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0307 	and.w	r3, r3, #7
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	429a      	cmp	r2, r3
 8004558:	d90c      	bls.n	8004574 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800455a:	4b65      	ldr	r3, [pc, #404]	; (80046f0 <HAL_RCC_ClockConfig+0x1b8>)
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004562:	4b63      	ldr	r3, [pc, #396]	; (80046f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0307 	and.w	r3, r3, #7
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	429a      	cmp	r2, r3
 800456e:	d001      	beq.n	8004574 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e0b8      	b.n	80046e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d020      	beq.n	80045c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	2b00      	cmp	r3, #0
 800458a:	d005      	beq.n	8004598 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800458c:	4b59      	ldr	r3, [pc, #356]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	4a58      	ldr	r2, [pc, #352]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004592:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004596:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0308 	and.w	r3, r3, #8
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d005      	beq.n	80045b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045a4:	4b53      	ldr	r3, [pc, #332]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	4a52      	ldr	r2, [pc, #328]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 80045aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045b0:	4b50      	ldr	r3, [pc, #320]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	494d      	ldr	r1, [pc, #308]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d044      	beq.n	8004658 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d107      	bne.n	80045e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d6:	4b47      	ldr	r3, [pc, #284]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d119      	bne.n	8004616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e07f      	b.n	80046e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d003      	beq.n	80045f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045f2:	2b03      	cmp	r3, #3
 80045f4:	d107      	bne.n	8004606 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045f6:	4b3f      	ldr	r3, [pc, #252]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d109      	bne.n	8004616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e06f      	b.n	80046e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004606:	4b3b      	ldr	r3, [pc, #236]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e067      	b.n	80046e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004616:	4b37      	ldr	r3, [pc, #220]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f023 0203 	bic.w	r2, r3, #3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	4934      	ldr	r1, [pc, #208]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004624:	4313      	orrs	r3, r2
 8004626:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004628:	f7fd ffb0 	bl	800258c <HAL_GetTick>
 800462c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800462e:	e00a      	b.n	8004646 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004630:	f7fd ffac 	bl	800258c <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	f241 3288 	movw	r2, #5000	; 0x1388
 800463e:	4293      	cmp	r3, r2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e04f      	b.n	80046e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004646:	4b2b      	ldr	r3, [pc, #172]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 020c 	and.w	r2, r3, #12
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	429a      	cmp	r2, r3
 8004656:	d1eb      	bne.n	8004630 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004658:	4b25      	ldr	r3, [pc, #148]	; (80046f0 <HAL_RCC_ClockConfig+0x1b8>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	429a      	cmp	r2, r3
 8004664:	d20c      	bcs.n	8004680 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004666:	4b22      	ldr	r3, [pc, #136]	; (80046f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	b2d2      	uxtb	r2, r2
 800466c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800466e:	4b20      	ldr	r3, [pc, #128]	; (80046f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	429a      	cmp	r2, r3
 800467a:	d001      	beq.n	8004680 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e032      	b.n	80046e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b00      	cmp	r3, #0
 800468a:	d008      	beq.n	800469e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800468c:	4b19      	ldr	r3, [pc, #100]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	4916      	ldr	r1, [pc, #88]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 800469a:	4313      	orrs	r3, r2
 800469c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d009      	beq.n	80046be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046aa:	4b12      	ldr	r3, [pc, #72]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	490e      	ldr	r1, [pc, #56]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046be:	f000 f821 	bl	8004704 <HAL_RCC_GetSysClockFreq>
 80046c2:	4602      	mov	r2, r0
 80046c4:	4b0b      	ldr	r3, [pc, #44]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	091b      	lsrs	r3, r3, #4
 80046ca:	f003 030f 	and.w	r3, r3, #15
 80046ce:	490a      	ldr	r1, [pc, #40]	; (80046f8 <HAL_RCC_ClockConfig+0x1c0>)
 80046d0:	5ccb      	ldrb	r3, [r1, r3]
 80046d2:	fa22 f303 	lsr.w	r3, r2, r3
 80046d6:	4a09      	ldr	r2, [pc, #36]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 80046d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046da:	4b09      	ldr	r3, [pc, #36]	; (8004700 <HAL_RCC_ClockConfig+0x1c8>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fd ff10 	bl	8002504 <HAL_InitTick>

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	40023c00 	.word	0x40023c00
 80046f4:	40023800 	.word	0x40023800
 80046f8:	0800cf58 	.word	0x0800cf58
 80046fc:	20000004 	.word	0x20000004
 8004700:	20000008 	.word	0x20000008

08004704 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004704:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004708:	b090      	sub	sp, #64	; 0x40
 800470a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	637b      	str	r3, [r7, #52]	; 0x34
 8004710:	2300      	movs	r3, #0
 8004712:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004714:	2300      	movs	r3, #0
 8004716:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004718:	2300      	movs	r3, #0
 800471a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800471c:	4b59      	ldr	r3, [pc, #356]	; (8004884 <HAL_RCC_GetSysClockFreq+0x180>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f003 030c 	and.w	r3, r3, #12
 8004724:	2b08      	cmp	r3, #8
 8004726:	d00d      	beq.n	8004744 <HAL_RCC_GetSysClockFreq+0x40>
 8004728:	2b08      	cmp	r3, #8
 800472a:	f200 80a1 	bhi.w	8004870 <HAL_RCC_GetSysClockFreq+0x16c>
 800472e:	2b00      	cmp	r3, #0
 8004730:	d002      	beq.n	8004738 <HAL_RCC_GetSysClockFreq+0x34>
 8004732:	2b04      	cmp	r3, #4
 8004734:	d003      	beq.n	800473e <HAL_RCC_GetSysClockFreq+0x3a>
 8004736:	e09b      	b.n	8004870 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004738:	4b53      	ldr	r3, [pc, #332]	; (8004888 <HAL_RCC_GetSysClockFreq+0x184>)
 800473a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800473c:	e09b      	b.n	8004876 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800473e:	4b53      	ldr	r3, [pc, #332]	; (800488c <HAL_RCC_GetSysClockFreq+0x188>)
 8004740:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004742:	e098      	b.n	8004876 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004744:	4b4f      	ldr	r3, [pc, #316]	; (8004884 <HAL_RCC_GetSysClockFreq+0x180>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800474c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800474e:	4b4d      	ldr	r3, [pc, #308]	; (8004884 <HAL_RCC_GetSysClockFreq+0x180>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d028      	beq.n	80047ac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800475a:	4b4a      	ldr	r3, [pc, #296]	; (8004884 <HAL_RCC_GetSysClockFreq+0x180>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	099b      	lsrs	r3, r3, #6
 8004760:	2200      	movs	r2, #0
 8004762:	623b      	str	r3, [r7, #32]
 8004764:	627a      	str	r2, [r7, #36]	; 0x24
 8004766:	6a3b      	ldr	r3, [r7, #32]
 8004768:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800476c:	2100      	movs	r1, #0
 800476e:	4b47      	ldr	r3, [pc, #284]	; (800488c <HAL_RCC_GetSysClockFreq+0x188>)
 8004770:	fb03 f201 	mul.w	r2, r3, r1
 8004774:	2300      	movs	r3, #0
 8004776:	fb00 f303 	mul.w	r3, r0, r3
 800477a:	4413      	add	r3, r2
 800477c:	4a43      	ldr	r2, [pc, #268]	; (800488c <HAL_RCC_GetSysClockFreq+0x188>)
 800477e:	fba0 1202 	umull	r1, r2, r0, r2
 8004782:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004784:	460a      	mov	r2, r1
 8004786:	62ba      	str	r2, [r7, #40]	; 0x28
 8004788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800478a:	4413      	add	r3, r2
 800478c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800478e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004790:	2200      	movs	r2, #0
 8004792:	61bb      	str	r3, [r7, #24]
 8004794:	61fa      	str	r2, [r7, #28]
 8004796:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800479a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800479e:	f7fc fa0b 	bl	8000bb8 <__aeabi_uldivmod>
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	4613      	mov	r3, r2
 80047a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047aa:	e053      	b.n	8004854 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047ac:	4b35      	ldr	r3, [pc, #212]	; (8004884 <HAL_RCC_GetSysClockFreq+0x180>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	099b      	lsrs	r3, r3, #6
 80047b2:	2200      	movs	r2, #0
 80047b4:	613b      	str	r3, [r7, #16]
 80047b6:	617a      	str	r2, [r7, #20]
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80047be:	f04f 0b00 	mov.w	fp, #0
 80047c2:	4652      	mov	r2, sl
 80047c4:	465b      	mov	r3, fp
 80047c6:	f04f 0000 	mov.w	r0, #0
 80047ca:	f04f 0100 	mov.w	r1, #0
 80047ce:	0159      	lsls	r1, r3, #5
 80047d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047d4:	0150      	lsls	r0, r2, #5
 80047d6:	4602      	mov	r2, r0
 80047d8:	460b      	mov	r3, r1
 80047da:	ebb2 080a 	subs.w	r8, r2, sl
 80047de:	eb63 090b 	sbc.w	r9, r3, fp
 80047e2:	f04f 0200 	mov.w	r2, #0
 80047e6:	f04f 0300 	mov.w	r3, #0
 80047ea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80047ee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80047f2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80047f6:	ebb2 0408 	subs.w	r4, r2, r8
 80047fa:	eb63 0509 	sbc.w	r5, r3, r9
 80047fe:	f04f 0200 	mov.w	r2, #0
 8004802:	f04f 0300 	mov.w	r3, #0
 8004806:	00eb      	lsls	r3, r5, #3
 8004808:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800480c:	00e2      	lsls	r2, r4, #3
 800480e:	4614      	mov	r4, r2
 8004810:	461d      	mov	r5, r3
 8004812:	eb14 030a 	adds.w	r3, r4, sl
 8004816:	603b      	str	r3, [r7, #0]
 8004818:	eb45 030b 	adc.w	r3, r5, fp
 800481c:	607b      	str	r3, [r7, #4]
 800481e:	f04f 0200 	mov.w	r2, #0
 8004822:	f04f 0300 	mov.w	r3, #0
 8004826:	e9d7 4500 	ldrd	r4, r5, [r7]
 800482a:	4629      	mov	r1, r5
 800482c:	028b      	lsls	r3, r1, #10
 800482e:	4621      	mov	r1, r4
 8004830:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004834:	4621      	mov	r1, r4
 8004836:	028a      	lsls	r2, r1, #10
 8004838:	4610      	mov	r0, r2
 800483a:	4619      	mov	r1, r3
 800483c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800483e:	2200      	movs	r2, #0
 8004840:	60bb      	str	r3, [r7, #8]
 8004842:	60fa      	str	r2, [r7, #12]
 8004844:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004848:	f7fc f9b6 	bl	8000bb8 <__aeabi_uldivmod>
 800484c:	4602      	mov	r2, r0
 800484e:	460b      	mov	r3, r1
 8004850:	4613      	mov	r3, r2
 8004852:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004854:	4b0b      	ldr	r3, [pc, #44]	; (8004884 <HAL_RCC_GetSysClockFreq+0x180>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	0c1b      	lsrs	r3, r3, #16
 800485a:	f003 0303 	and.w	r3, r3, #3
 800485e:	3301      	adds	r3, #1
 8004860:	005b      	lsls	r3, r3, #1
 8004862:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004864:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004868:	fbb2 f3f3 	udiv	r3, r2, r3
 800486c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800486e:	e002      	b.n	8004876 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004870:	4b05      	ldr	r3, [pc, #20]	; (8004888 <HAL_RCC_GetSysClockFreq+0x184>)
 8004872:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004874:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004878:	4618      	mov	r0, r3
 800487a:	3740      	adds	r7, #64	; 0x40
 800487c:	46bd      	mov	sp, r7
 800487e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004882:	bf00      	nop
 8004884:	40023800 	.word	0x40023800
 8004888:	00f42400 	.word	0x00f42400
 800488c:	017d7840 	.word	0x017d7840

08004890 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004894:	4b03      	ldr	r3, [pc, #12]	; (80048a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004896:	681b      	ldr	r3, [r3, #0]
}
 8004898:	4618      	mov	r0, r3
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	20000004 	.word	0x20000004

080048a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048ac:	f7ff fff0 	bl	8004890 <HAL_RCC_GetHCLKFreq>
 80048b0:	4602      	mov	r2, r0
 80048b2:	4b05      	ldr	r3, [pc, #20]	; (80048c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	0a9b      	lsrs	r3, r3, #10
 80048b8:	f003 0307 	and.w	r3, r3, #7
 80048bc:	4903      	ldr	r1, [pc, #12]	; (80048cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80048be:	5ccb      	ldrb	r3, [r1, r3]
 80048c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	40023800 	.word	0x40023800
 80048cc:	0800cf68 	.word	0x0800cf68

080048d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80048d4:	f7ff ffdc 	bl	8004890 <HAL_RCC_GetHCLKFreq>
 80048d8:	4602      	mov	r2, r0
 80048da:	4b05      	ldr	r3, [pc, #20]	; (80048f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	0b5b      	lsrs	r3, r3, #13
 80048e0:	f003 0307 	and.w	r3, r3, #7
 80048e4:	4903      	ldr	r1, [pc, #12]	; (80048f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048e6:	5ccb      	ldrb	r3, [r1, r3]
 80048e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40023800 	.word	0x40023800
 80048f4:	0800cf68 	.word	0x0800cf68

080048f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e03f      	b.n	800498a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d106      	bne.n	8004924 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7fd fc50 	bl	80021c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2224      	movs	r2, #36	; 0x24
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68da      	ldr	r2, [r3, #12]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800493a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 f929 	bl	8004b94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	691a      	ldr	r2, [r3, #16]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004950:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	695a      	ldr	r2, [r3, #20]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004960:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68da      	ldr	r2, [r3, #12]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004970:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2220      	movs	r2, #32
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2220      	movs	r2, #32
 8004984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004992:	b580      	push	{r7, lr}
 8004994:	b08a      	sub	sp, #40	; 0x28
 8004996:	af02      	add	r7, sp, #8
 8004998:	60f8      	str	r0, [r7, #12]
 800499a:	60b9      	str	r1, [r7, #8]
 800499c:	603b      	str	r3, [r7, #0]
 800499e:	4613      	mov	r3, r2
 80049a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80049a2:	2300      	movs	r3, #0
 80049a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b20      	cmp	r3, #32
 80049b0:	d17c      	bne.n	8004aac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d002      	beq.n	80049be <HAL_UART_Transmit+0x2c>
 80049b8:	88fb      	ldrh	r3, [r7, #6]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e075      	b.n	8004aae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d101      	bne.n	80049d0 <HAL_UART_Transmit+0x3e>
 80049cc:	2302      	movs	r3, #2
 80049ce:	e06e      	b.n	8004aae <HAL_UART_Transmit+0x11c>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2221      	movs	r2, #33	; 0x21
 80049e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049e6:	f7fd fdd1 	bl	800258c <HAL_GetTick>
 80049ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	88fa      	ldrh	r2, [r7, #6]
 80049f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	88fa      	ldrh	r2, [r7, #6]
 80049f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a00:	d108      	bne.n	8004a14 <HAL_UART_Transmit+0x82>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d104      	bne.n	8004a14 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	61bb      	str	r3, [r7, #24]
 8004a12:	e003      	b.n	8004a1c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004a24:	e02a      	b.n	8004a7c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	2180      	movs	r1, #128	; 0x80
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f000 f840 	bl	8004ab6 <UART_WaitOnFlagUntilTimeout>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d001      	beq.n	8004a40 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e036      	b.n	8004aae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10b      	bne.n	8004a5e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	881b      	ldrh	r3, [r3, #0]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	3302      	adds	r3, #2
 8004a5a:	61bb      	str	r3, [r7, #24]
 8004a5c:	e007      	b.n	8004a6e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	781a      	ldrb	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	3b01      	subs	r3, #1
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1cf      	bne.n	8004a26 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	2140      	movs	r1, #64	; 0x40
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 f810 	bl	8004ab6 <UART_WaitOnFlagUntilTimeout>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e006      	b.n	8004aae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	e000      	b.n	8004aae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004aac:	2302      	movs	r3, #2
  }
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3720      	adds	r7, #32
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b090      	sub	sp, #64	; 0x40
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	60f8      	str	r0, [r7, #12]
 8004abe:	60b9      	str	r1, [r7, #8]
 8004ac0:	603b      	str	r3, [r7, #0]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ac6:	e050      	b.n	8004b6a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ace:	d04c      	beq.n	8004b6a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d007      	beq.n	8004ae6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ad6:	f7fd fd59 	bl	800258c <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d241      	bcs.n	8004b6a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	330c      	adds	r3, #12
 8004aec:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af0:	e853 3f00 	ldrex	r3, [r3]
 8004af4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004afc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	330c      	adds	r3, #12
 8004b04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b06:	637a      	str	r2, [r7, #52]	; 0x34
 8004b08:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b0e:	e841 2300 	strex	r3, r2, [r1]
 8004b12:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1e5      	bne.n	8004ae6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	3314      	adds	r3, #20
 8004b20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	e853 3f00 	ldrex	r3, [r3]
 8004b28:	613b      	str	r3, [r7, #16]
   return(result);
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	f023 0301 	bic.w	r3, r3, #1
 8004b30:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3314      	adds	r3, #20
 8004b38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b3a:	623a      	str	r2, [r7, #32]
 8004b3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3e:	69f9      	ldr	r1, [r7, #28]
 8004b40:	6a3a      	ldr	r2, [r7, #32]
 8004b42:	e841 2300 	strex	r3, r2, [r1]
 8004b46:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1e5      	bne.n	8004b1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e00f      	b.n	8004b8a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	4013      	ands	r3, r2
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	bf0c      	ite	eq
 8004b7a:	2301      	moveq	r3, #1
 8004b7c:	2300      	movne	r3, #0
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	461a      	mov	r2, r3
 8004b82:	79fb      	ldrb	r3, [r7, #7]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d09f      	beq.n	8004ac8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3740      	adds	r7, #64	; 0x40
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
	...

08004b94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b98:	b0c0      	sub	sp, #256	; 0x100
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb0:	68d9      	ldr	r1, [r3, #12]
 8004bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	ea40 0301 	orr.w	r3, r0, r1
 8004bbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004bec:	f021 010c 	bic.w	r1, r1, #12
 8004bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004bfa:	430b      	orrs	r3, r1
 8004bfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c0e:	6999      	ldr	r1, [r3, #24]
 8004c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	ea40 0301 	orr.w	r3, r0, r1
 8004c1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	4b8f      	ldr	r3, [pc, #572]	; (8004e60 <UART_SetConfig+0x2cc>)
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d005      	beq.n	8004c34 <UART_SetConfig+0xa0>
 8004c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	4b8d      	ldr	r3, [pc, #564]	; (8004e64 <UART_SetConfig+0x2d0>)
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d104      	bne.n	8004c3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c34:	f7ff fe4c 	bl	80048d0 <HAL_RCC_GetPCLK2Freq>
 8004c38:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004c3c:	e003      	b.n	8004c46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c3e:	f7ff fe33 	bl	80048a8 <HAL_RCC_GetPCLK1Freq>
 8004c42:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c50:	f040 810c 	bne.w	8004e6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c5e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004c62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004c66:	4622      	mov	r2, r4
 8004c68:	462b      	mov	r3, r5
 8004c6a:	1891      	adds	r1, r2, r2
 8004c6c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c6e:	415b      	adcs	r3, r3
 8004c70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c76:	4621      	mov	r1, r4
 8004c78:	eb12 0801 	adds.w	r8, r2, r1
 8004c7c:	4629      	mov	r1, r5
 8004c7e:	eb43 0901 	adc.w	r9, r3, r1
 8004c82:	f04f 0200 	mov.w	r2, #0
 8004c86:	f04f 0300 	mov.w	r3, #0
 8004c8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c96:	4690      	mov	r8, r2
 8004c98:	4699      	mov	r9, r3
 8004c9a:	4623      	mov	r3, r4
 8004c9c:	eb18 0303 	adds.w	r3, r8, r3
 8004ca0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ca4:	462b      	mov	r3, r5
 8004ca6:	eb49 0303 	adc.w	r3, r9, r3
 8004caa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004cba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004cbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	18db      	adds	r3, r3, r3
 8004cc6:	653b      	str	r3, [r7, #80]	; 0x50
 8004cc8:	4613      	mov	r3, r2
 8004cca:	eb42 0303 	adc.w	r3, r2, r3
 8004cce:	657b      	str	r3, [r7, #84]	; 0x54
 8004cd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004cd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004cd8:	f7fb ff6e 	bl	8000bb8 <__aeabi_uldivmod>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4b61      	ldr	r3, [pc, #388]	; (8004e68 <UART_SetConfig+0x2d4>)
 8004ce2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ce6:	095b      	lsrs	r3, r3, #5
 8004ce8:	011c      	lsls	r4, r3, #4
 8004cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004cf4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004cf8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004cfc:	4642      	mov	r2, r8
 8004cfe:	464b      	mov	r3, r9
 8004d00:	1891      	adds	r1, r2, r2
 8004d02:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d04:	415b      	adcs	r3, r3
 8004d06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d0c:	4641      	mov	r1, r8
 8004d0e:	eb12 0a01 	adds.w	sl, r2, r1
 8004d12:	4649      	mov	r1, r9
 8004d14:	eb43 0b01 	adc.w	fp, r3, r1
 8004d18:	f04f 0200 	mov.w	r2, #0
 8004d1c:	f04f 0300 	mov.w	r3, #0
 8004d20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d2c:	4692      	mov	sl, r2
 8004d2e:	469b      	mov	fp, r3
 8004d30:	4643      	mov	r3, r8
 8004d32:	eb1a 0303 	adds.w	r3, sl, r3
 8004d36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d3a:	464b      	mov	r3, r9
 8004d3c:	eb4b 0303 	adc.w	r3, fp, r3
 8004d40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d50:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004d54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	18db      	adds	r3, r3, r3
 8004d5c:	643b      	str	r3, [r7, #64]	; 0x40
 8004d5e:	4613      	mov	r3, r2
 8004d60:	eb42 0303 	adc.w	r3, r2, r3
 8004d64:	647b      	str	r3, [r7, #68]	; 0x44
 8004d66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004d6e:	f7fb ff23 	bl	8000bb8 <__aeabi_uldivmod>
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	4611      	mov	r1, r2
 8004d78:	4b3b      	ldr	r3, [pc, #236]	; (8004e68 <UART_SetConfig+0x2d4>)
 8004d7a:	fba3 2301 	umull	r2, r3, r3, r1
 8004d7e:	095b      	lsrs	r3, r3, #5
 8004d80:	2264      	movs	r2, #100	; 0x64
 8004d82:	fb02 f303 	mul.w	r3, r2, r3
 8004d86:	1acb      	subs	r3, r1, r3
 8004d88:	00db      	lsls	r3, r3, #3
 8004d8a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004d8e:	4b36      	ldr	r3, [pc, #216]	; (8004e68 <UART_SetConfig+0x2d4>)
 8004d90:	fba3 2302 	umull	r2, r3, r3, r2
 8004d94:	095b      	lsrs	r3, r3, #5
 8004d96:	005b      	lsls	r3, r3, #1
 8004d98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d9c:	441c      	add	r4, r3
 8004d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004da2:	2200      	movs	r2, #0
 8004da4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004da8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004dac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004db0:	4642      	mov	r2, r8
 8004db2:	464b      	mov	r3, r9
 8004db4:	1891      	adds	r1, r2, r2
 8004db6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004db8:	415b      	adcs	r3, r3
 8004dba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004dc0:	4641      	mov	r1, r8
 8004dc2:	1851      	adds	r1, r2, r1
 8004dc4:	6339      	str	r1, [r7, #48]	; 0x30
 8004dc6:	4649      	mov	r1, r9
 8004dc8:	414b      	adcs	r3, r1
 8004dca:	637b      	str	r3, [r7, #52]	; 0x34
 8004dcc:	f04f 0200 	mov.w	r2, #0
 8004dd0:	f04f 0300 	mov.w	r3, #0
 8004dd4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004dd8:	4659      	mov	r1, fp
 8004dda:	00cb      	lsls	r3, r1, #3
 8004ddc:	4651      	mov	r1, sl
 8004dde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004de2:	4651      	mov	r1, sl
 8004de4:	00ca      	lsls	r2, r1, #3
 8004de6:	4610      	mov	r0, r2
 8004de8:	4619      	mov	r1, r3
 8004dea:	4603      	mov	r3, r0
 8004dec:	4642      	mov	r2, r8
 8004dee:	189b      	adds	r3, r3, r2
 8004df0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004df4:	464b      	mov	r3, r9
 8004df6:	460a      	mov	r2, r1
 8004df8:	eb42 0303 	adc.w	r3, r2, r3
 8004dfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e0c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004e10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004e14:	460b      	mov	r3, r1
 8004e16:	18db      	adds	r3, r3, r3
 8004e18:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	eb42 0303 	adc.w	r3, r2, r3
 8004e20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004e2a:	f7fb fec5 	bl	8000bb8 <__aeabi_uldivmod>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	460b      	mov	r3, r1
 8004e32:	4b0d      	ldr	r3, [pc, #52]	; (8004e68 <UART_SetConfig+0x2d4>)
 8004e34:	fba3 1302 	umull	r1, r3, r3, r2
 8004e38:	095b      	lsrs	r3, r3, #5
 8004e3a:	2164      	movs	r1, #100	; 0x64
 8004e3c:	fb01 f303 	mul.w	r3, r1, r3
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	3332      	adds	r3, #50	; 0x32
 8004e46:	4a08      	ldr	r2, [pc, #32]	; (8004e68 <UART_SetConfig+0x2d4>)
 8004e48:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4c:	095b      	lsrs	r3, r3, #5
 8004e4e:	f003 0207 	and.w	r2, r3, #7
 8004e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4422      	add	r2, r4
 8004e5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e5c:	e105      	b.n	800506a <UART_SetConfig+0x4d6>
 8004e5e:	bf00      	nop
 8004e60:	40011000 	.word	0x40011000
 8004e64:	40011400 	.word	0x40011400
 8004e68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e70:	2200      	movs	r2, #0
 8004e72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004e76:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004e7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004e7e:	4642      	mov	r2, r8
 8004e80:	464b      	mov	r3, r9
 8004e82:	1891      	adds	r1, r2, r2
 8004e84:	6239      	str	r1, [r7, #32]
 8004e86:	415b      	adcs	r3, r3
 8004e88:	627b      	str	r3, [r7, #36]	; 0x24
 8004e8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e8e:	4641      	mov	r1, r8
 8004e90:	1854      	adds	r4, r2, r1
 8004e92:	4649      	mov	r1, r9
 8004e94:	eb43 0501 	adc.w	r5, r3, r1
 8004e98:	f04f 0200 	mov.w	r2, #0
 8004e9c:	f04f 0300 	mov.w	r3, #0
 8004ea0:	00eb      	lsls	r3, r5, #3
 8004ea2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ea6:	00e2      	lsls	r2, r4, #3
 8004ea8:	4614      	mov	r4, r2
 8004eaa:	461d      	mov	r5, r3
 8004eac:	4643      	mov	r3, r8
 8004eae:	18e3      	adds	r3, r4, r3
 8004eb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004eb4:	464b      	mov	r3, r9
 8004eb6:	eb45 0303 	adc.w	r3, r5, r3
 8004eba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004eca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ece:	f04f 0200 	mov.w	r2, #0
 8004ed2:	f04f 0300 	mov.w	r3, #0
 8004ed6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004eda:	4629      	mov	r1, r5
 8004edc:	008b      	lsls	r3, r1, #2
 8004ede:	4621      	mov	r1, r4
 8004ee0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ee4:	4621      	mov	r1, r4
 8004ee6:	008a      	lsls	r2, r1, #2
 8004ee8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004eec:	f7fb fe64 	bl	8000bb8 <__aeabi_uldivmod>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4b60      	ldr	r3, [pc, #384]	; (8005078 <UART_SetConfig+0x4e4>)
 8004ef6:	fba3 2302 	umull	r2, r3, r3, r2
 8004efa:	095b      	lsrs	r3, r3, #5
 8004efc:	011c      	lsls	r4, r3, #4
 8004efe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f02:	2200      	movs	r2, #0
 8004f04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f08:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004f10:	4642      	mov	r2, r8
 8004f12:	464b      	mov	r3, r9
 8004f14:	1891      	adds	r1, r2, r2
 8004f16:	61b9      	str	r1, [r7, #24]
 8004f18:	415b      	adcs	r3, r3
 8004f1a:	61fb      	str	r3, [r7, #28]
 8004f1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f20:	4641      	mov	r1, r8
 8004f22:	1851      	adds	r1, r2, r1
 8004f24:	6139      	str	r1, [r7, #16]
 8004f26:	4649      	mov	r1, r9
 8004f28:	414b      	adcs	r3, r1
 8004f2a:	617b      	str	r3, [r7, #20]
 8004f2c:	f04f 0200 	mov.w	r2, #0
 8004f30:	f04f 0300 	mov.w	r3, #0
 8004f34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f38:	4659      	mov	r1, fp
 8004f3a:	00cb      	lsls	r3, r1, #3
 8004f3c:	4651      	mov	r1, sl
 8004f3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f42:	4651      	mov	r1, sl
 8004f44:	00ca      	lsls	r2, r1, #3
 8004f46:	4610      	mov	r0, r2
 8004f48:	4619      	mov	r1, r3
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	4642      	mov	r2, r8
 8004f4e:	189b      	adds	r3, r3, r2
 8004f50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f54:	464b      	mov	r3, r9
 8004f56:	460a      	mov	r2, r1
 8004f58:	eb42 0303 	adc.w	r3, r2, r3
 8004f5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f6a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f6c:	f04f 0200 	mov.w	r2, #0
 8004f70:	f04f 0300 	mov.w	r3, #0
 8004f74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004f78:	4649      	mov	r1, r9
 8004f7a:	008b      	lsls	r3, r1, #2
 8004f7c:	4641      	mov	r1, r8
 8004f7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f82:	4641      	mov	r1, r8
 8004f84:	008a      	lsls	r2, r1, #2
 8004f86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004f8a:	f7fb fe15 	bl	8000bb8 <__aeabi_uldivmod>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	460b      	mov	r3, r1
 8004f92:	4b39      	ldr	r3, [pc, #228]	; (8005078 <UART_SetConfig+0x4e4>)
 8004f94:	fba3 1302 	umull	r1, r3, r3, r2
 8004f98:	095b      	lsrs	r3, r3, #5
 8004f9a:	2164      	movs	r1, #100	; 0x64
 8004f9c:	fb01 f303 	mul.w	r3, r1, r3
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	011b      	lsls	r3, r3, #4
 8004fa4:	3332      	adds	r3, #50	; 0x32
 8004fa6:	4a34      	ldr	r2, [pc, #208]	; (8005078 <UART_SetConfig+0x4e4>)
 8004fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fac:	095b      	lsrs	r3, r3, #5
 8004fae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fb2:	441c      	add	r4, r3
 8004fb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fb8:	2200      	movs	r2, #0
 8004fba:	673b      	str	r3, [r7, #112]	; 0x70
 8004fbc:	677a      	str	r2, [r7, #116]	; 0x74
 8004fbe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004fc2:	4642      	mov	r2, r8
 8004fc4:	464b      	mov	r3, r9
 8004fc6:	1891      	adds	r1, r2, r2
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	415b      	adcs	r3, r3
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fd2:	4641      	mov	r1, r8
 8004fd4:	1851      	adds	r1, r2, r1
 8004fd6:	6039      	str	r1, [r7, #0]
 8004fd8:	4649      	mov	r1, r9
 8004fda:	414b      	adcs	r3, r1
 8004fdc:	607b      	str	r3, [r7, #4]
 8004fde:	f04f 0200 	mov.w	r2, #0
 8004fe2:	f04f 0300 	mov.w	r3, #0
 8004fe6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fea:	4659      	mov	r1, fp
 8004fec:	00cb      	lsls	r3, r1, #3
 8004fee:	4651      	mov	r1, sl
 8004ff0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ff4:	4651      	mov	r1, sl
 8004ff6:	00ca      	lsls	r2, r1, #3
 8004ff8:	4610      	mov	r0, r2
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	4642      	mov	r2, r8
 8005000:	189b      	adds	r3, r3, r2
 8005002:	66bb      	str	r3, [r7, #104]	; 0x68
 8005004:	464b      	mov	r3, r9
 8005006:	460a      	mov	r2, r1
 8005008:	eb42 0303 	adc.w	r3, r2, r3
 800500c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800500e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	663b      	str	r3, [r7, #96]	; 0x60
 8005018:	667a      	str	r2, [r7, #100]	; 0x64
 800501a:	f04f 0200 	mov.w	r2, #0
 800501e:	f04f 0300 	mov.w	r3, #0
 8005022:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005026:	4649      	mov	r1, r9
 8005028:	008b      	lsls	r3, r1, #2
 800502a:	4641      	mov	r1, r8
 800502c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005030:	4641      	mov	r1, r8
 8005032:	008a      	lsls	r2, r1, #2
 8005034:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005038:	f7fb fdbe 	bl	8000bb8 <__aeabi_uldivmod>
 800503c:	4602      	mov	r2, r0
 800503e:	460b      	mov	r3, r1
 8005040:	4b0d      	ldr	r3, [pc, #52]	; (8005078 <UART_SetConfig+0x4e4>)
 8005042:	fba3 1302 	umull	r1, r3, r3, r2
 8005046:	095b      	lsrs	r3, r3, #5
 8005048:	2164      	movs	r1, #100	; 0x64
 800504a:	fb01 f303 	mul.w	r3, r1, r3
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	011b      	lsls	r3, r3, #4
 8005052:	3332      	adds	r3, #50	; 0x32
 8005054:	4a08      	ldr	r2, [pc, #32]	; (8005078 <UART_SetConfig+0x4e4>)
 8005056:	fba2 2303 	umull	r2, r3, r2, r3
 800505a:	095b      	lsrs	r3, r3, #5
 800505c:	f003 020f 	and.w	r2, r3, #15
 8005060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4422      	add	r2, r4
 8005068:	609a      	str	r2, [r3, #8]
}
 800506a:	bf00      	nop
 800506c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005070:	46bd      	mov	sp, r7
 8005072:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005076:	bf00      	nop
 8005078:	51eb851f 	.word	0x51eb851f

0800507c <LL_GPIO_SetPinMode>:
{
 800507c:	b480      	push	{r7}
 800507e:	b089      	sub	sp, #36	; 0x24
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	fa93 f3a3 	rbit	r3, r3
 8005096:	613b      	str	r3, [r7, #16]
  return result;
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	fab3 f383 	clz	r3, r3
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	2103      	movs	r1, #3
 80050a4:	fa01 f303 	lsl.w	r3, r1, r3
 80050a8:	43db      	mvns	r3, r3
 80050aa:	401a      	ands	r2, r3
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	fa93 f3a3 	rbit	r3, r3
 80050b6:	61bb      	str	r3, [r7, #24]
  return result;
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	fab3 f383 	clz	r3, r3
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	005b      	lsls	r3, r3, #1
 80050c2:	6879      	ldr	r1, [r7, #4]
 80050c4:	fa01 f303 	lsl.w	r3, r1, r3
 80050c8:	431a      	orrs	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	601a      	str	r2, [r3, #0]
}
 80050ce:	bf00      	nop
 80050d0:	3724      	adds	r7, #36	; 0x24
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <LL_GPIO_SetPinOutputType>:
{
 80050da:	b480      	push	{r7}
 80050dc:	b085      	sub	sp, #20
 80050de:	af00      	add	r7, sp, #0
 80050e0:	60f8      	str	r0, [r7, #12]
 80050e2:	60b9      	str	r1, [r7, #8]
 80050e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	43db      	mvns	r3, r3
 80050ee:	401a      	ands	r2, r3
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	6879      	ldr	r1, [r7, #4]
 80050f4:	fb01 f303 	mul.w	r3, r1, r3
 80050f8:	431a      	orrs	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	605a      	str	r2, [r3, #4]
}
 80050fe:	bf00      	nop
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <LL_GPIO_SetPinSpeed>:
{
 800510a:	b480      	push	{r7}
 800510c:	b089      	sub	sp, #36	; 0x24
 800510e:	af00      	add	r7, sp, #0
 8005110:	60f8      	str	r0, [r7, #12]
 8005112:	60b9      	str	r1, [r7, #8]
 8005114:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	689a      	ldr	r2, [r3, #8]
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	fa93 f3a3 	rbit	r3, r3
 8005124:	613b      	str	r3, [r7, #16]
  return result;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	fab3 f383 	clz	r3, r3
 800512c:	b2db      	uxtb	r3, r3
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	2103      	movs	r1, #3
 8005132:	fa01 f303 	lsl.w	r3, r1, r3
 8005136:	43db      	mvns	r3, r3
 8005138:	401a      	ands	r2, r3
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	fa93 f3a3 	rbit	r3, r3
 8005144:	61bb      	str	r3, [r7, #24]
  return result;
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	fab3 f383 	clz	r3, r3
 800514c:	b2db      	uxtb	r3, r3
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	6879      	ldr	r1, [r7, #4]
 8005152:	fa01 f303 	lsl.w	r3, r1, r3
 8005156:	431a      	orrs	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	609a      	str	r2, [r3, #8]
}
 800515c:	bf00      	nop
 800515e:	3724      	adds	r7, #36	; 0x24
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <LL_GPIO_SetPinPull>:
{
 8005168:	b480      	push	{r7}
 800516a:	b089      	sub	sp, #36	; 0x24
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	68da      	ldr	r2, [r3, #12]
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	fa93 f3a3 	rbit	r3, r3
 8005182:	613b      	str	r3, [r7, #16]
  return result;
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	fab3 f383 	clz	r3, r3
 800518a:	b2db      	uxtb	r3, r3
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	2103      	movs	r1, #3
 8005190:	fa01 f303 	lsl.w	r3, r1, r3
 8005194:	43db      	mvns	r3, r3
 8005196:	401a      	ands	r2, r3
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	fa93 f3a3 	rbit	r3, r3
 80051a2:	61bb      	str	r3, [r7, #24]
  return result;
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	fab3 f383 	clz	r3, r3
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	005b      	lsls	r3, r3, #1
 80051ae:	6879      	ldr	r1, [r7, #4]
 80051b0:	fa01 f303 	lsl.w	r3, r1, r3
 80051b4:	431a      	orrs	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	60da      	str	r2, [r3, #12]
}
 80051ba:	bf00      	nop
 80051bc:	3724      	adds	r7, #36	; 0x24
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <LL_GPIO_SetAFPin_0_7>:
{
 80051c6:	b480      	push	{r7}
 80051c8:	b089      	sub	sp, #36	; 0x24
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	60f8      	str	r0, [r7, #12]
 80051ce:	60b9      	str	r1, [r7, #8]
 80051d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6a1a      	ldr	r2, [r3, #32]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	fa93 f3a3 	rbit	r3, r3
 80051e0:	613b      	str	r3, [r7, #16]
  return result;
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	fab3 f383 	clz	r3, r3
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	210f      	movs	r1, #15
 80051ee:	fa01 f303 	lsl.w	r3, r1, r3
 80051f2:	43db      	mvns	r3, r3
 80051f4:	401a      	ands	r2, r3
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	fa93 f3a3 	rbit	r3, r3
 8005200:	61bb      	str	r3, [r7, #24]
  return result;
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	fab3 f383 	clz	r3, r3
 8005208:	b2db      	uxtb	r3, r3
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	6879      	ldr	r1, [r7, #4]
 800520e:	fa01 f303 	lsl.w	r3, r1, r3
 8005212:	431a      	orrs	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	621a      	str	r2, [r3, #32]
}
 8005218:	bf00      	nop
 800521a:	3724      	adds	r7, #36	; 0x24
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <LL_GPIO_SetAFPin_8_15>:
{
 8005224:	b480      	push	{r7}
 8005226:	b089      	sub	sp, #36	; 0x24
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	0a1b      	lsrs	r3, r3, #8
 8005238:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	fa93 f3a3 	rbit	r3, r3
 8005240:	613b      	str	r3, [r7, #16]
  return result;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	fab3 f383 	clz	r3, r3
 8005248:	b2db      	uxtb	r3, r3
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	210f      	movs	r1, #15
 800524e:	fa01 f303 	lsl.w	r3, r1, r3
 8005252:	43db      	mvns	r3, r3
 8005254:	401a      	ands	r2, r3
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	0a1b      	lsrs	r3, r3, #8
 800525a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	fa93 f3a3 	rbit	r3, r3
 8005262:	61bb      	str	r3, [r7, #24]
  return result;
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	fab3 f383 	clz	r3, r3
 800526a:	b2db      	uxtb	r3, r3
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	6879      	ldr	r1, [r7, #4]
 8005270:	fa01 f303 	lsl.w	r3, r1, r3
 8005274:	431a      	orrs	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	625a      	str	r2, [r3, #36]	; 0x24
}
 800527a:	bf00      	nop
 800527c:	3724      	adds	r7, #36	; 0x24
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b088      	sub	sp, #32
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
 800528e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8005290:	2300      	movs	r3, #0
 8005292:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8005294:	2300      	movs	r3, #0
 8005296:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	fa93 f3a3 	rbit	r3, r3
 80052a4:	613b      	str	r3, [r7, #16]
  return result;
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	fab3 f383 	clz	r3, r3
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80052b0:	e050      	b.n	8005354 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	2101      	movs	r1, #1
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	fa01 f303 	lsl.w	r3, r1, r3
 80052be:	4013      	ands	r3, r2
 80052c0:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d042      	beq.n	800534e <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d003      	beq.n	80052d8 <LL_GPIO_Init+0x52>
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d10d      	bne.n	80052f4 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	461a      	mov	r2, r3
 80052de:	69b9      	ldr	r1, [r7, #24]
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f7ff ff12 	bl	800510a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	461a      	mov	r2, r3
 80052ec:	69b9      	ldr	r1, [r7, #24]
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7ff fef3 	bl	80050da <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	461a      	mov	r2, r3
 80052fa:	69b9      	ldr	r1, [r7, #24]
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f7ff ff33 	bl	8005168 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	2b02      	cmp	r3, #2
 8005308:	d11a      	bne.n	8005340 <LL_GPIO_Init+0xba>
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	fa93 f3a3 	rbit	r3, r3
 8005314:	60bb      	str	r3, [r7, #8]
  return result;
 8005316:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8005318:	fab3 f383 	clz	r3, r3
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b07      	cmp	r3, #7
 8005320:	d807      	bhi.n	8005332 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	461a      	mov	r2, r3
 8005328:	69b9      	ldr	r1, [r7, #24]
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7ff ff4b 	bl	80051c6 <LL_GPIO_SetAFPin_0_7>
 8005330:	e006      	b.n	8005340 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	461a      	mov	r2, r3
 8005338:	69b9      	ldr	r1, [r7, #24]
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7ff ff72 	bl	8005224 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	461a      	mov	r2, r3
 8005346:	69b9      	ldr	r1, [r7, #24]
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f7ff fe97 	bl	800507c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	3301      	adds	r3, #1
 8005352:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	fa22 f303 	lsr.w	r3, r2, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1a7      	bne.n	80052b2 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3720      	adds	r7, #32
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <LL_SPI_IsEnabled>:
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537c:	2b40      	cmp	r3, #64	; 0x40
 800537e:	d101      	bne.n	8005384 <LL_SPI_IsEnabled+0x18>
 8005380:	2301      	movs	r3, #1
 8005382:	e000      	b.n	8005386 <LL_SPI_IsEnabled+0x1a>
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr

08005392 <LL_SPI_SetCRCPolynomial>:
{
 8005392:	b480      	push	{r7}
 8005394:	b083      	sub	sp, #12
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
 800539a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	b29b      	uxth	r3, r3
 80053a0:	461a      	mov	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	611a      	str	r2, [r3, #16]
}
 80053a6:	bf00      	nop
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b084      	sub	sp, #16
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
 80053ba:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f7ff ffd3 	bl	800536c <LL_SPI_IsEnabled>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d139      	bne.n	8005440 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053d4:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 80053d8:	683a      	ldr	r2, [r7, #0]
 80053da:	6811      	ldr	r1, [r2, #0]
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	6852      	ldr	r2, [r2, #4]
 80053e0:	4311      	orrs	r1, r2
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	6892      	ldr	r2, [r2, #8]
 80053e6:	4311      	orrs	r1, r2
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	68d2      	ldr	r2, [r2, #12]
 80053ec:	4311      	orrs	r1, r2
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	6912      	ldr	r2, [r2, #16]
 80053f2:	4311      	orrs	r1, r2
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	6952      	ldr	r2, [r2, #20]
 80053f8:	4311      	orrs	r1, r2
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	6992      	ldr	r2, [r2, #24]
 80053fe:	4311      	orrs	r1, r2
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	69d2      	ldr	r2, [r2, #28]
 8005404:	4311      	orrs	r1, r2
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	6a12      	ldr	r2, [r2, #32]
 800540a:	430a      	orrs	r2, r1
 800540c:	431a      	orrs	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f023 0204 	bic.w	r2, r3, #4
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	0c1b      	lsrs	r3, r3, #16
 8005420:	431a      	orrs	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800542e:	d105      	bne.n	800543c <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005434:	4619      	mov	r1, r3
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7ff ffab 	bl	8005392 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800543c:	2300      	movs	r3, #0
 800543e:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	69db      	ldr	r3, [r3, #28]
 8005444:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	61da      	str	r2, [r3, #28]
  return status;
 800544c:	7bfb      	ldrb	r3, [r7, #15]
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005456:	b084      	sub	sp, #16
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	f107 001c 	add.w	r0, r7, #28
 8005464:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546a:	2b01      	cmp	r3, #1
 800546c:	d122      	bne.n	80054b4 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005472:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005482:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005498:	2b01      	cmp	r3, #1
 800549a:	d105      	bne.n	80054a8 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f001 fbed 	bl	8006c88 <USB_CoreReset>
 80054ae:	4603      	mov	r3, r0
 80054b0:	73fb      	strb	r3, [r7, #15]
 80054b2:	e01a      	b.n	80054ea <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f001 fbe1 	bl	8006c88 <USB_CoreReset>
 80054c6:	4603      	mov	r3, r0
 80054c8:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80054ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d106      	bne.n	80054de <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	639a      	str	r2, [r3, #56]	; 0x38
 80054dc:	e005      	b.n	80054ea <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80054ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d10b      	bne.n	8005508 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f043 0206 	orr.w	r2, r3, #6
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f043 0220 	orr.w	r2, r3, #32
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005508:	7bfb      	ldrb	r3, [r7, #15]
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005514:	b004      	add	sp, #16
 8005516:	4770      	bx	lr

08005518 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005518:	b480      	push	{r7}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	4613      	mov	r3, r2
 8005524:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005526:	79fb      	ldrb	r3, [r7, #7]
 8005528:	2b02      	cmp	r3, #2
 800552a:	d165      	bne.n	80055f8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	4a41      	ldr	r2, [pc, #260]	; (8005634 <USB_SetTurnaroundTime+0x11c>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d906      	bls.n	8005542 <USB_SetTurnaroundTime+0x2a>
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	4a40      	ldr	r2, [pc, #256]	; (8005638 <USB_SetTurnaroundTime+0x120>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d202      	bcs.n	8005542 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800553c:	230f      	movs	r3, #15
 800553e:	617b      	str	r3, [r7, #20]
 8005540:	e062      	b.n	8005608 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	4a3c      	ldr	r2, [pc, #240]	; (8005638 <USB_SetTurnaroundTime+0x120>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d306      	bcc.n	8005558 <USB_SetTurnaroundTime+0x40>
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	4a3b      	ldr	r2, [pc, #236]	; (800563c <USB_SetTurnaroundTime+0x124>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d202      	bcs.n	8005558 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005552:	230e      	movs	r3, #14
 8005554:	617b      	str	r3, [r7, #20]
 8005556:	e057      	b.n	8005608 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	4a38      	ldr	r2, [pc, #224]	; (800563c <USB_SetTurnaroundTime+0x124>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d306      	bcc.n	800556e <USB_SetTurnaroundTime+0x56>
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	4a37      	ldr	r2, [pc, #220]	; (8005640 <USB_SetTurnaroundTime+0x128>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d202      	bcs.n	800556e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005568:	230d      	movs	r3, #13
 800556a:	617b      	str	r3, [r7, #20]
 800556c:	e04c      	b.n	8005608 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	4a33      	ldr	r2, [pc, #204]	; (8005640 <USB_SetTurnaroundTime+0x128>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d306      	bcc.n	8005584 <USB_SetTurnaroundTime+0x6c>
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	4a32      	ldr	r2, [pc, #200]	; (8005644 <USB_SetTurnaroundTime+0x12c>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d802      	bhi.n	8005584 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800557e:	230c      	movs	r3, #12
 8005580:	617b      	str	r3, [r7, #20]
 8005582:	e041      	b.n	8005608 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	4a2f      	ldr	r2, [pc, #188]	; (8005644 <USB_SetTurnaroundTime+0x12c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d906      	bls.n	800559a <USB_SetTurnaroundTime+0x82>
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	4a2e      	ldr	r2, [pc, #184]	; (8005648 <USB_SetTurnaroundTime+0x130>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d802      	bhi.n	800559a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005594:	230b      	movs	r3, #11
 8005596:	617b      	str	r3, [r7, #20]
 8005598:	e036      	b.n	8005608 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	4a2a      	ldr	r2, [pc, #168]	; (8005648 <USB_SetTurnaroundTime+0x130>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d906      	bls.n	80055b0 <USB_SetTurnaroundTime+0x98>
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	4a29      	ldr	r2, [pc, #164]	; (800564c <USB_SetTurnaroundTime+0x134>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d802      	bhi.n	80055b0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80055aa:	230a      	movs	r3, #10
 80055ac:	617b      	str	r3, [r7, #20]
 80055ae:	e02b      	b.n	8005608 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	4a26      	ldr	r2, [pc, #152]	; (800564c <USB_SetTurnaroundTime+0x134>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d906      	bls.n	80055c6 <USB_SetTurnaroundTime+0xae>
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	4a25      	ldr	r2, [pc, #148]	; (8005650 <USB_SetTurnaroundTime+0x138>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d202      	bcs.n	80055c6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80055c0:	2309      	movs	r3, #9
 80055c2:	617b      	str	r3, [r7, #20]
 80055c4:	e020      	b.n	8005608 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	4a21      	ldr	r2, [pc, #132]	; (8005650 <USB_SetTurnaroundTime+0x138>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d306      	bcc.n	80055dc <USB_SetTurnaroundTime+0xc4>
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	4a20      	ldr	r2, [pc, #128]	; (8005654 <USB_SetTurnaroundTime+0x13c>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d802      	bhi.n	80055dc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80055d6:	2308      	movs	r3, #8
 80055d8:	617b      	str	r3, [r7, #20]
 80055da:	e015      	b.n	8005608 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	4a1d      	ldr	r2, [pc, #116]	; (8005654 <USB_SetTurnaroundTime+0x13c>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d906      	bls.n	80055f2 <USB_SetTurnaroundTime+0xda>
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	4a1c      	ldr	r2, [pc, #112]	; (8005658 <USB_SetTurnaroundTime+0x140>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d202      	bcs.n	80055f2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80055ec:	2307      	movs	r3, #7
 80055ee:	617b      	str	r3, [r7, #20]
 80055f0:	e00a      	b.n	8005608 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80055f2:	2306      	movs	r3, #6
 80055f4:	617b      	str	r3, [r7, #20]
 80055f6:	e007      	b.n	8005608 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80055f8:	79fb      	ldrb	r3, [r7, #7]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d102      	bne.n	8005604 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80055fe:	2309      	movs	r3, #9
 8005600:	617b      	str	r3, [r7, #20]
 8005602:	e001      	b.n	8005608 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005604:	2309      	movs	r3, #9
 8005606:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	68da      	ldr	r2, [r3, #12]
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	029b      	lsls	r3, r3, #10
 800561c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005620:	431a      	orrs	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	371c      	adds	r7, #28
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	00d8acbf 	.word	0x00d8acbf
 8005638:	00e4e1c0 	.word	0x00e4e1c0
 800563c:	00f42400 	.word	0x00f42400
 8005640:	01067380 	.word	0x01067380
 8005644:	011a499f 	.word	0x011a499f
 8005648:	01312cff 	.word	0x01312cff
 800564c:	014ca43f 	.word	0x014ca43f
 8005650:	016e3600 	.word	0x016e3600
 8005654:	01a6ab1f 	.word	0x01a6ab1f
 8005658:	01e84800 	.word	0x01e84800

0800565c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f043 0201 	orr.w	r2, r3, #1
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800567e:	b480      	push	{r7}
 8005680:	b083      	sub	sp, #12
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f023 0201 	bic.w	r2, r3, #1
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	460b      	mov	r3, r1
 80056aa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80056ac:	2300      	movs	r3, #0
 80056ae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80056bc:	78fb      	ldrb	r3, [r7, #3]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d115      	bne.n	80056ee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80056ce:	2001      	movs	r0, #1
 80056d0:	f7fc ff68 	bl	80025a4 <HAL_Delay>
      ms++;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	3301      	adds	r3, #1
 80056d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f001 fa45 	bl	8006b6a <USB_GetMode>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d01e      	beq.n	8005724 <USB_SetCurrentMode+0x84>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2b31      	cmp	r3, #49	; 0x31
 80056ea:	d9f0      	bls.n	80056ce <USB_SetCurrentMode+0x2e>
 80056ec:	e01a      	b.n	8005724 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80056ee:	78fb      	ldrb	r3, [r7, #3]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d115      	bne.n	8005720 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005700:	2001      	movs	r0, #1
 8005702:	f7fc ff4f 	bl	80025a4 <HAL_Delay>
      ms++;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	3301      	adds	r3, #1
 800570a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f001 fa2c 	bl	8006b6a <USB_GetMode>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d005      	beq.n	8005724 <USB_SetCurrentMode+0x84>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2b31      	cmp	r3, #49	; 0x31
 800571c:	d9f0      	bls.n	8005700 <USB_SetCurrentMode+0x60>
 800571e:	e001      	b.n	8005724 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e005      	b.n	8005730 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2b32      	cmp	r3, #50	; 0x32
 8005728:	d101      	bne.n	800572e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e000      	b.n	8005730 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005738:	b084      	sub	sp, #16
 800573a:	b580      	push	{r7, lr}
 800573c:	b086      	sub	sp, #24
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
 8005742:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005746:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800574a:	2300      	movs	r3, #0
 800574c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005752:	2300      	movs	r3, #0
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	e009      	b.n	800576c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	3340      	adds	r3, #64	; 0x40
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	2200      	movs	r2, #0
 8005764:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	3301      	adds	r3, #1
 800576a:	613b      	str	r3, [r7, #16]
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	2b0e      	cmp	r3, #14
 8005770:	d9f2      	bls.n	8005758 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005774:	2b00      	cmp	r3, #0
 8005776:	d11c      	bne.n	80057b2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005786:	f043 0302 	orr.w	r3, r3, #2
 800578a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005790:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	639a      	str	r2, [r3, #56]	; 0x38
 80057b0:	e00b      	b.n	80057ca <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80057d0:	461a      	mov	r2, r3
 80057d2:	2300      	movs	r3, #0
 80057d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057dc:	4619      	mov	r1, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e4:	461a      	mov	r2, r3
 80057e6:	680b      	ldr	r3, [r1, #0]
 80057e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d10c      	bne.n	800580a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80057f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d104      	bne.n	8005800 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80057f6:	2100      	movs	r1, #0
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 f965 	bl	8005ac8 <USB_SetDevSpeed>
 80057fe:	e008      	b.n	8005812 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005800:	2101      	movs	r1, #1
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f960 	bl	8005ac8 <USB_SetDevSpeed>
 8005808:	e003      	b.n	8005812 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800580a:	2103      	movs	r1, #3
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f95b 	bl	8005ac8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005812:	2110      	movs	r1, #16
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 f8f3 	bl	8005a00 <USB_FlushTxFifo>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d001      	beq.n	8005824 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 f91f 	bl	8005a68 <USB_FlushRxFifo>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d001      	beq.n	8005834 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800583a:	461a      	mov	r2, r3
 800583c:	2300      	movs	r3, #0
 800583e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005846:	461a      	mov	r2, r3
 8005848:	2300      	movs	r3, #0
 800584a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005852:	461a      	mov	r2, r3
 8005854:	2300      	movs	r3, #0
 8005856:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005858:	2300      	movs	r3, #0
 800585a:	613b      	str	r3, [r7, #16]
 800585c:	e043      	b.n	80058e6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	015a      	lsls	r2, r3, #5
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	4413      	add	r3, r2
 8005866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005870:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005874:	d118      	bne.n	80058a8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10a      	bne.n	8005892 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	015a      	lsls	r2, r3, #5
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	4413      	add	r3, r2
 8005884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005888:	461a      	mov	r2, r3
 800588a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800588e:	6013      	str	r3, [r2, #0]
 8005890:	e013      	b.n	80058ba <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	4413      	add	r3, r2
 800589a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800589e:	461a      	mov	r2, r3
 80058a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80058a4:	6013      	str	r3, [r2, #0]
 80058a6:	e008      	b.n	80058ba <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b4:	461a      	mov	r2, r3
 80058b6:	2300      	movs	r3, #0
 80058b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	015a      	lsls	r2, r3, #5
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	4413      	add	r3, r2
 80058c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c6:	461a      	mov	r2, r3
 80058c8:	2300      	movs	r3, #0
 80058ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d8:	461a      	mov	r2, r3
 80058da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80058de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	3301      	adds	r3, #1
 80058e4:	613b      	str	r3, [r7, #16]
 80058e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d3b7      	bcc.n	800585e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058ee:	2300      	movs	r3, #0
 80058f0:	613b      	str	r3, [r7, #16]
 80058f2:	e043      	b.n	800597c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	015a      	lsls	r2, r3, #5
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	4413      	add	r3, r2
 80058fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005906:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800590a:	d118      	bne.n	800593e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10a      	bne.n	8005928 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	4413      	add	r3, r2
 800591a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591e:	461a      	mov	r2, r3
 8005920:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005924:	6013      	str	r3, [r2, #0]
 8005926:	e013      	b.n	8005950 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005934:	461a      	mov	r2, r3
 8005936:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800593a:	6013      	str	r3, [r2, #0]
 800593c:	e008      	b.n	8005950 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	015a      	lsls	r2, r3, #5
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	4413      	add	r3, r2
 8005946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594a:	461a      	mov	r2, r3
 800594c:	2300      	movs	r3, #0
 800594e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	4413      	add	r3, r2
 8005958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595c:	461a      	mov	r2, r3
 800595e:	2300      	movs	r3, #0
 8005960:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	4413      	add	r3, r2
 800596a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596e:	461a      	mov	r2, r3
 8005970:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005974:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	3301      	adds	r3, #1
 800597a:	613b      	str	r3, [r7, #16]
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	429a      	cmp	r2, r3
 8005982:	d3b7      	bcc.n	80058f4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005992:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005996:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80059a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80059a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d105      	bne.n	80059b8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	f043 0210 	orr.w	r2, r3, #16
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	699a      	ldr	r2, [r3, #24]
 80059bc:	4b0f      	ldr	r3, [pc, #60]	; (80059fc <USB_DevInit+0x2c4>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80059c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d005      	beq.n	80059d6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	f043 0208 	orr.w	r2, r3, #8
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80059d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d107      	bne.n	80059ec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059e4:	f043 0304 	orr.w	r3, r3, #4
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80059ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3718      	adds	r7, #24
 80059f2:	46bd      	mov	sp, r7
 80059f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059f8:	b004      	add	sp, #16
 80059fa:	4770      	bx	lr
 80059fc:	803c3800 	.word	0x803c3800

08005a00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	3301      	adds	r3, #1
 8005a12:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	4a13      	ldr	r2, [pc, #76]	; (8005a64 <USB_FlushTxFifo+0x64>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d901      	bls.n	8005a20 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e01b      	b.n	8005a58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	daf2      	bge.n	8005a0e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	019b      	lsls	r3, r3, #6
 8005a30:	f043 0220 	orr.w	r2, r3, #32
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	4a08      	ldr	r2, [pc, #32]	; (8005a64 <USB_FlushTxFifo+0x64>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d901      	bls.n	8005a4a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e006      	b.n	8005a58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	f003 0320 	and.w	r3, r3, #32
 8005a52:	2b20      	cmp	r3, #32
 8005a54:	d0f0      	beq.n	8005a38 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3714      	adds	r7, #20
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr
 8005a64:	00030d40 	.word	0x00030d40

08005a68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	3301      	adds	r3, #1
 8005a78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4a11      	ldr	r2, [pc, #68]	; (8005ac4 <USB_FlushRxFifo+0x5c>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d901      	bls.n	8005a86 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e018      	b.n	8005ab8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	daf2      	bge.n	8005a74 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2210      	movs	r2, #16
 8005a96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	4a08      	ldr	r2, [pc, #32]	; (8005ac4 <USB_FlushRxFifo+0x5c>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d901      	bls.n	8005aaa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e006      	b.n	8005ab8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	f003 0310 	and.w	r3, r3, #16
 8005ab2:	2b10      	cmp	r3, #16
 8005ab4:	d0f0      	beq.n	8005a98 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3714      	adds	r7, #20
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr
 8005ac4:	00030d40 	.word	0x00030d40

08005ac8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	78fb      	ldrb	r3, [r7, #3]
 8005ae2:	68f9      	ldr	r1, [r7, #12]
 8005ae4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3714      	adds	r7, #20
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b087      	sub	sp, #28
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f003 0306 	and.w	r3, r3, #6
 8005b12:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d102      	bne.n	8005b20 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	75fb      	strb	r3, [r7, #23]
 8005b1e:	e00a      	b.n	8005b36 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d002      	beq.n	8005b2c <USB_GetDevSpeed+0x32>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2b06      	cmp	r3, #6
 8005b2a:	d102      	bne.n	8005b32 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	75fb      	strb	r3, [r7, #23]
 8005b30:	e001      	b.n	8005b36 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005b32:	230f      	movs	r3, #15
 8005b34:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	371c      	adds	r7, #28
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	785b      	ldrb	r3, [r3, #1]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d13a      	bne.n	8005bd6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b66:	69da      	ldr	r2, [r3, #28]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	f003 030f 	and.w	r3, r3, #15
 8005b70:	2101      	movs	r1, #1
 8005b72:	fa01 f303 	lsl.w	r3, r1, r3
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	68f9      	ldr	r1, [r7, #12]
 8005b7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	015a      	lsls	r2, r3, #5
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	4413      	add	r3, r2
 8005b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d155      	bne.n	8005c44 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	015a      	lsls	r2, r3, #5
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	791b      	ldrb	r3, [r3, #4]
 8005bb2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005bb4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	059b      	lsls	r3, r3, #22
 8005bba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	0151      	lsls	r1, r2, #5
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	440a      	add	r2, r1
 8005bc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bd2:	6013      	str	r3, [r2, #0]
 8005bd4:	e036      	b.n	8005c44 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bdc:	69da      	ldr	r2, [r3, #28]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	f003 030f 	and.w	r3, r3, #15
 8005be6:	2101      	movs	r1, #1
 8005be8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bec:	041b      	lsls	r3, r3, #16
 8005bee:	68f9      	ldr	r1, [r7, #12]
 8005bf0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d11a      	bne.n	8005c44 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	791b      	ldrb	r3, [r3, #4]
 8005c28:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005c2a:	430b      	orrs	r3, r1
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	0151      	lsls	r1, r2, #5
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	440a      	add	r2, r1
 8005c36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c42:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3714      	adds	r7, #20
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
	...

08005c54 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	785b      	ldrb	r3, [r3, #1]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d161      	bne.n	8005d34 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c86:	d11f      	bne.n	8005cc8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	0151      	lsls	r1, r2, #5
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	440a      	add	r2, r1
 8005c9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ca2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ca6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	0151      	lsls	r1, r2, #5
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	440a      	add	r2, r1
 8005cbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cc2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cc6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	f003 030f 	and.w	r3, r3, #15
 8005cd8:	2101      	movs	r1, #1
 8005cda:	fa01 f303 	lsl.w	r3, r1, r3
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	43db      	mvns	r3, r3
 8005ce2:	68f9      	ldr	r1, [r7, #12]
 8005ce4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ce8:	4013      	ands	r3, r2
 8005cea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf2:	69da      	ldr	r2, [r3, #28]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	f003 030f 	and.w	r3, r3, #15
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	43db      	mvns	r3, r3
 8005d06:	68f9      	ldr	r1, [r7, #12]
 8005d08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	015a      	lsls	r2, r3, #5
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	4413      	add	r3, r2
 8005d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	0159      	lsls	r1, r3, #5
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	440b      	add	r3, r1
 8005d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	4b35      	ldr	r3, [pc, #212]	; (8005e04 <USB_DeactivateEndpoint+0x1b0>)
 8005d2e:	4013      	ands	r3, r2
 8005d30:	600b      	str	r3, [r1, #0]
 8005d32:	e060      	b.n	8005df6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	015a      	lsls	r2, r3, #5
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d4a:	d11f      	bne.n	8005d8c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	0151      	lsls	r1, r2, #5
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	440a      	add	r2, r1
 8005d62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d6a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	015a      	lsls	r2, r3, #5
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	0151      	lsls	r1, r2, #5
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	440a      	add	r2, r1
 8005d82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d8a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	f003 030f 	and.w	r3, r3, #15
 8005d9c:	2101      	movs	r1, #1
 8005d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8005da2:	041b      	lsls	r3, r3, #16
 8005da4:	43db      	mvns	r3, r3
 8005da6:	68f9      	ldr	r1, [r7, #12]
 8005da8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dac:	4013      	ands	r3, r2
 8005dae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db6:	69da      	ldr	r2, [r3, #28]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	f003 030f 	and.w	r3, r3, #15
 8005dc0:	2101      	movs	r1, #1
 8005dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8005dc6:	041b      	lsls	r3, r3, #16
 8005dc8:	43db      	mvns	r3, r3
 8005dca:	68f9      	ldr	r1, [r7, #12]
 8005dcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	0159      	lsls	r1, r3, #5
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	440b      	add	r3, r1
 8005dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dee:	4619      	mov	r1, r3
 8005df0:	4b05      	ldr	r3, [pc, #20]	; (8005e08 <USB_DeactivateEndpoint+0x1b4>)
 8005df2:	4013      	ands	r3, r2
 8005df4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3714      	adds	r7, #20
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr
 8005e04:	ec337800 	.word	0xec337800
 8005e08:	eff37800 	.word	0xeff37800

08005e0c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b08a      	sub	sp, #40	; 0x28
 8005e10:	af02      	add	r7, sp, #8
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	4613      	mov	r3, r2
 8005e18:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	785b      	ldrb	r3, [r3, #1]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	f040 815c 	bne.w	80060e6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d132      	bne.n	8005e9c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	0151      	lsls	r1, r2, #5
 8005e48:	69fa      	ldr	r2, [r7, #28]
 8005e4a:	440a      	add	r2, r1
 8005e4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	69ba      	ldr	r2, [r7, #24]
 8005e6a:	0151      	lsls	r1, r2, #5
 8005e6c:	69fa      	ldr	r2, [r7, #28]
 8005e6e:	440a      	add	r2, r1
 8005e70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	0151      	lsls	r1, r2, #5
 8005e8c:	69fa      	ldr	r2, [r7, #28]
 8005e8e:	440a      	add	r2, r1
 8005e90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e94:	0cdb      	lsrs	r3, r3, #19
 8005e96:	04db      	lsls	r3, r3, #19
 8005e98:	6113      	str	r3, [r2, #16]
 8005e9a:	e074      	b.n	8005f86 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	015a      	lsls	r2, r3, #5
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	69ba      	ldr	r2, [r7, #24]
 8005eac:	0151      	lsls	r1, r2, #5
 8005eae:	69fa      	ldr	r2, [r7, #28]
 8005eb0:	440a      	add	r2, r1
 8005eb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eb6:	0cdb      	lsrs	r3, r3, #19
 8005eb8:	04db      	lsls	r3, r3, #19
 8005eba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	0151      	lsls	r1, r2, #5
 8005ece:	69fa      	ldr	r2, [r7, #28]
 8005ed0:	440a      	add	r2, r1
 8005ed2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ed6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005eda:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ede:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eec:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	6999      	ldr	r1, [r3, #24]
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	440b      	add	r3, r1
 8005ef8:	1e59      	subs	r1, r3, #1
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f02:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005f04:	4b9d      	ldr	r3, [pc, #628]	; (800617c <USB_EPStartXfer+0x370>)
 8005f06:	400b      	ands	r3, r1
 8005f08:	69b9      	ldr	r1, [r7, #24]
 8005f0a:	0148      	lsls	r0, r1, #5
 8005f0c:	69f9      	ldr	r1, [r7, #28]
 8005f0e:	4401      	add	r1, r0
 8005f10:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005f14:	4313      	orrs	r3, r2
 8005f16:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	015a      	lsls	r2, r3, #5
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	4413      	add	r3, r2
 8005f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f24:	691a      	ldr	r2, [r3, #16]
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f2e:	69b9      	ldr	r1, [r7, #24]
 8005f30:	0148      	lsls	r0, r1, #5
 8005f32:	69f9      	ldr	r1, [r7, #28]
 8005f34:	4401      	add	r1, r0
 8005f36:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	791b      	ldrb	r3, [r3, #4]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d11f      	bne.n	8005f86 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	015a      	lsls	r2, r3, #5
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	0151      	lsls	r1, r2, #5
 8005f58:	69fa      	ldr	r2, [r7, #28]
 8005f5a:	440a      	add	r2, r1
 8005f5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f60:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005f64:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	015a      	lsls	r2, r3, #5
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	69ba      	ldr	r2, [r7, #24]
 8005f76:	0151      	lsls	r1, r2, #5
 8005f78:	69fa      	ldr	r2, [r7, #28]
 8005f7a:	440a      	add	r2, r1
 8005f7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f84:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005f86:	79fb      	ldrb	r3, [r7, #7]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d14b      	bne.n	8006024 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d009      	beq.n	8005fa8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	791b      	ldrb	r3, [r3, #4]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d128      	bne.n	8006002 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d110      	bne.n	8005fe2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	015a      	lsls	r2, r3, #5
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	69ba      	ldr	r2, [r7, #24]
 8005fd0:	0151      	lsls	r1, r2, #5
 8005fd2:	69fa      	ldr	r2, [r7, #28]
 8005fd4:	440a      	add	r2, r1
 8005fd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fda:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fde:	6013      	str	r3, [r2, #0]
 8005fe0:	e00f      	b.n	8006002 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	015a      	lsls	r2, r3, #5
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	4413      	add	r3, r2
 8005fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	69ba      	ldr	r2, [r7, #24]
 8005ff2:	0151      	lsls	r1, r2, #5
 8005ff4:	69fa      	ldr	r2, [r7, #28]
 8005ff6:	440a      	add	r2, r1
 8005ff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006000:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	015a      	lsls	r2, r3, #5
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	4413      	add	r3, r2
 800600a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	0151      	lsls	r1, r2, #5
 8006014:	69fa      	ldr	r2, [r7, #28]
 8006016:	440a      	add	r2, r1
 8006018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800601c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006020:	6013      	str	r3, [r2, #0]
 8006022:	e133      	b.n	800628c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	015a      	lsls	r2, r3, #5
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	4413      	add	r3, r2
 800602c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	69ba      	ldr	r2, [r7, #24]
 8006034:	0151      	lsls	r1, r2, #5
 8006036:	69fa      	ldr	r2, [r7, #28]
 8006038:	440a      	add	r2, r1
 800603a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800603e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006042:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	791b      	ldrb	r3, [r3, #4]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d015      	beq.n	8006078 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	2b00      	cmp	r3, #0
 8006052:	f000 811b 	beq.w	800628c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800605c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	f003 030f 	and.w	r3, r3, #15
 8006066:	2101      	movs	r1, #1
 8006068:	fa01 f303 	lsl.w	r3, r1, r3
 800606c:	69f9      	ldr	r1, [r7, #28]
 800606e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006072:	4313      	orrs	r3, r2
 8006074:	634b      	str	r3, [r1, #52]	; 0x34
 8006076:	e109      	b.n	800628c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006084:	2b00      	cmp	r3, #0
 8006086:	d110      	bne.n	80060aa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	015a      	lsls	r2, r3, #5
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	4413      	add	r3, r2
 8006090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	0151      	lsls	r1, r2, #5
 800609a:	69fa      	ldr	r2, [r7, #28]
 800609c:	440a      	add	r2, r1
 800609e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060a6:	6013      	str	r3, [r2, #0]
 80060a8:	e00f      	b.n	80060ca <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	0151      	lsls	r1, r2, #5
 80060bc:	69fa      	ldr	r2, [r7, #28]
 80060be:	440a      	add	r2, r1
 80060c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060c8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	6919      	ldr	r1, [r3, #16]
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	781a      	ldrb	r2, [r3, #0]
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	b298      	uxth	r0, r3
 80060d8:	79fb      	ldrb	r3, [r7, #7]
 80060da:	9300      	str	r3, [sp, #0]
 80060dc:	4603      	mov	r3, r0
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f000 fade 	bl	80066a0 <USB_WritePacket>
 80060e4:	e0d2      	b.n	800628c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	015a      	lsls	r2, r3, #5
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	4413      	add	r3, r2
 80060ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	69ba      	ldr	r2, [r7, #24]
 80060f6:	0151      	lsls	r1, r2, #5
 80060f8:	69fa      	ldr	r2, [r7, #28]
 80060fa:	440a      	add	r2, r1
 80060fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006100:	0cdb      	lsrs	r3, r3, #19
 8006102:	04db      	lsls	r3, r3, #19
 8006104:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	015a      	lsls	r2, r3, #5
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	4413      	add	r3, r2
 800610e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	0151      	lsls	r1, r2, #5
 8006118:	69fa      	ldr	r2, [r7, #28]
 800611a:	440a      	add	r2, r1
 800611c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006120:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006124:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006128:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d126      	bne.n	8006180 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	4413      	add	r3, r2
 800613a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613e:	691a      	ldr	r2, [r3, #16]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006148:	69b9      	ldr	r1, [r7, #24]
 800614a:	0148      	lsls	r0, r1, #5
 800614c:	69f9      	ldr	r1, [r7, #28]
 800614e:	4401      	add	r1, r0
 8006150:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006154:	4313      	orrs	r3, r2
 8006156:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	69ba      	ldr	r2, [r7, #24]
 8006168:	0151      	lsls	r1, r2, #5
 800616a:	69fa      	ldr	r2, [r7, #28]
 800616c:	440a      	add	r2, r1
 800616e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006172:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006176:	6113      	str	r3, [r2, #16]
 8006178:	e03a      	b.n	80061f0 <USB_EPStartXfer+0x3e4>
 800617a:	bf00      	nop
 800617c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	699a      	ldr	r2, [r3, #24]
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	4413      	add	r3, r2
 800618a:	1e5a      	subs	r2, r3, #1
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	fbb2 f3f3 	udiv	r3, r2, r3
 8006194:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	8afa      	ldrh	r2, [r7, #22]
 800619c:	fb03 f202 	mul.w	r2, r3, r2
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	015a      	lsls	r2, r3, #5
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	4413      	add	r3, r2
 80061ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b0:	691a      	ldr	r2, [r3, #16]
 80061b2:	8afb      	ldrh	r3, [r7, #22]
 80061b4:	04d9      	lsls	r1, r3, #19
 80061b6:	4b38      	ldr	r3, [pc, #224]	; (8006298 <USB_EPStartXfer+0x48c>)
 80061b8:	400b      	ands	r3, r1
 80061ba:	69b9      	ldr	r1, [r7, #24]
 80061bc:	0148      	lsls	r0, r1, #5
 80061be:	69f9      	ldr	r1, [r7, #28]
 80061c0:	4401      	add	r1, r0
 80061c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80061c6:	4313      	orrs	r3, r2
 80061c8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d6:	691a      	ldr	r2, [r3, #16]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	69db      	ldr	r3, [r3, #28]
 80061dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061e0:	69b9      	ldr	r1, [r7, #24]
 80061e2:	0148      	lsls	r0, r1, #5
 80061e4:	69f9      	ldr	r1, [r7, #28]
 80061e6:	4401      	add	r1, r0
 80061e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80061ec:	4313      	orrs	r3, r2
 80061ee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80061f0:	79fb      	ldrb	r3, [r7, #7]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d10d      	bne.n	8006212 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d009      	beq.n	8006212 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	6919      	ldr	r1, [r3, #16]
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	015a      	lsls	r2, r3, #5
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	4413      	add	r3, r2
 800620a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800620e:	460a      	mov	r2, r1
 8006210:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	791b      	ldrb	r3, [r3, #4]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d128      	bne.n	800626c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006226:	2b00      	cmp	r3, #0
 8006228:	d110      	bne.n	800624c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	015a      	lsls	r2, r3, #5
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	4413      	add	r3, r2
 8006232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	69ba      	ldr	r2, [r7, #24]
 800623a:	0151      	lsls	r1, r2, #5
 800623c:	69fa      	ldr	r2, [r7, #28]
 800623e:	440a      	add	r2, r1
 8006240:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006244:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	e00f      	b.n	800626c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	015a      	lsls	r2, r3, #5
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	4413      	add	r3, r2
 8006254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	69ba      	ldr	r2, [r7, #24]
 800625c:	0151      	lsls	r1, r2, #5
 800625e:	69fa      	ldr	r2, [r7, #28]
 8006260:	440a      	add	r2, r1
 8006262:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800626a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	4413      	add	r3, r2
 8006274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	69ba      	ldr	r2, [r7, #24]
 800627c:	0151      	lsls	r1, r2, #5
 800627e:	69fa      	ldr	r2, [r7, #28]
 8006280:	440a      	add	r2, r1
 8006282:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006286:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800628a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3720      	adds	r7, #32
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	1ff80000 	.word	0x1ff80000

0800629c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800629c:	b480      	push	{r7}
 800629e:	b087      	sub	sp, #28
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	4613      	mov	r3, r2
 80062a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	785b      	ldrb	r3, [r3, #1]
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	f040 80ce 	bne.w	800645a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d132      	bne.n	800632c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	015a      	lsls	r2, r3, #5
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	4413      	add	r3, r2
 80062ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	0151      	lsls	r1, r2, #5
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	440a      	add	r2, r1
 80062dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	015a      	lsls	r2, r3, #5
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	4413      	add	r3, r2
 80062f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	0151      	lsls	r1, r2, #5
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	440a      	add	r2, r1
 8006300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006304:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006308:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	015a      	lsls	r2, r3, #5
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	4413      	add	r3, r2
 8006312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	0151      	lsls	r1, r2, #5
 800631c:	697a      	ldr	r2, [r7, #20]
 800631e:	440a      	add	r2, r1
 8006320:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006324:	0cdb      	lsrs	r3, r3, #19
 8006326:	04db      	lsls	r3, r3, #19
 8006328:	6113      	str	r3, [r2, #16]
 800632a:	e04e      	b.n	80063ca <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	015a      	lsls	r2, r3, #5
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	4413      	add	r3, r2
 8006334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	0151      	lsls	r1, r2, #5
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	440a      	add	r2, r1
 8006342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006346:	0cdb      	lsrs	r3, r3, #19
 8006348:	04db      	lsls	r3, r3, #19
 800634a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	015a      	lsls	r2, r3, #5
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	4413      	add	r3, r2
 8006354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	0151      	lsls	r1, r2, #5
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	440a      	add	r2, r1
 8006362:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006366:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800636a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800636e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	699a      	ldr	r2, [r3, #24]
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	429a      	cmp	r2, r3
 800637a:	d903      	bls.n	8006384 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	68da      	ldr	r2, [r3, #12]
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	015a      	lsls	r2, r3, #5
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	4413      	add	r3, r2
 800638c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	0151      	lsls	r1, r2, #5
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	440a      	add	r2, r1
 800639a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800639e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	015a      	lsls	r2, r3, #5
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b0:	691a      	ldr	r2, [r3, #16]
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063ba:	6939      	ldr	r1, [r7, #16]
 80063bc:	0148      	lsls	r0, r1, #5
 80063be:	6979      	ldr	r1, [r7, #20]
 80063c0:	4401      	add	r1, r0
 80063c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80063c6:	4313      	orrs	r3, r2
 80063c8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80063ca:	79fb      	ldrb	r3, [r7, #7]
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d11e      	bne.n	800640e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d009      	beq.n	80063ec <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e4:	461a      	mov	r2, r3
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	0151      	lsls	r1, r2, #5
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	440a      	add	r2, r1
 8006402:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006406:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800640a:	6013      	str	r3, [r2, #0]
 800640c:	e097      	b.n	800653e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	015a      	lsls	r2, r3, #5
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	4413      	add	r3, r2
 8006416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	0151      	lsls	r1, r2, #5
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	440a      	add	r2, r1
 8006424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006428:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800642c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	2b00      	cmp	r3, #0
 8006434:	f000 8083 	beq.w	800653e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800643e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	f003 030f 	and.w	r3, r3, #15
 8006448:	2101      	movs	r1, #1
 800644a:	fa01 f303 	lsl.w	r3, r1, r3
 800644e:	6979      	ldr	r1, [r7, #20]
 8006450:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006454:	4313      	orrs	r3, r2
 8006456:	634b      	str	r3, [r1, #52]	; 0x34
 8006458:	e071      	b.n	800653e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	015a      	lsls	r2, r3, #5
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	4413      	add	r3, r2
 8006462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	0151      	lsls	r1, r2, #5
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	440a      	add	r2, r1
 8006470:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006474:	0cdb      	lsrs	r3, r3, #19
 8006476:	04db      	lsls	r3, r3, #19
 8006478:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	015a      	lsls	r2, r3, #5
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	4413      	add	r3, r2
 8006482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	0151      	lsls	r1, r2, #5
 800648c:	697a      	ldr	r2, [r7, #20]
 800648e:	440a      	add	r2, r1
 8006490:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006494:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006498:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800649c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	68da      	ldr	r2, [r3, #12]
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	68da      	ldr	r2, [r3, #12]
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	015a      	lsls	r2, r3, #5
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	0151      	lsls	r1, r2, #5
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	440a      	add	r2, r1
 80064cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e2:	691a      	ldr	r2, [r3, #16]
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	69db      	ldr	r3, [r3, #28]
 80064e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064ec:	6939      	ldr	r1, [r7, #16]
 80064ee:	0148      	lsls	r0, r1, #5
 80064f0:	6979      	ldr	r1, [r7, #20]
 80064f2:	4401      	add	r1, r0
 80064f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80064f8:	4313      	orrs	r3, r2
 80064fa:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80064fc:	79fb      	ldrb	r3, [r7, #7]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d10d      	bne.n	800651e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d009      	beq.n	800651e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	6919      	ldr	r1, [r3, #16]
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	015a      	lsls	r2, r3, #5
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	4413      	add	r3, r2
 8006516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800651a:	460a      	mov	r2, r1
 800651c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	015a      	lsls	r2, r3, #5
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	4413      	add	r3, r2
 8006526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	0151      	lsls	r1, r2, #5
 8006530:	697a      	ldr	r2, [r7, #20]
 8006532:	440a      	add	r2, r1
 8006534:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006538:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800653c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	371c      	adds	r7, #28
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800654c:	b480      	push	{r7}
 800654e:	b087      	sub	sp, #28
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006556:	2300      	movs	r3, #0
 8006558:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800655a:	2300      	movs	r3, #0
 800655c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	785b      	ldrb	r3, [r3, #1]
 8006566:	2b01      	cmp	r3, #1
 8006568:	d14a      	bne.n	8006600 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	015a      	lsls	r2, r3, #5
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	4413      	add	r3, r2
 8006574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800657e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006582:	f040 8086 	bne.w	8006692 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	4413      	add	r3, r2
 8006590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	683a      	ldr	r2, [r7, #0]
 8006598:	7812      	ldrb	r2, [r2, #0]
 800659a:	0151      	lsls	r1, r2, #5
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	440a      	add	r2, r1
 80065a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80065a8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	683a      	ldr	r2, [r7, #0]
 80065bc:	7812      	ldrb	r2, [r2, #0]
 80065be:	0151      	lsls	r1, r2, #5
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	440a      	add	r2, r1
 80065c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	3301      	adds	r3, #1
 80065d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80065da:	4293      	cmp	r3, r2
 80065dc:	d902      	bls.n	80065e4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	75fb      	strb	r3, [r7, #23]
          break;
 80065e2:	e056      	b.n	8006692 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065fc:	d0e7      	beq.n	80065ce <USB_EPStopXfer+0x82>
 80065fe:	e048      	b.n	8006692 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	015a      	lsls	r2, r3, #5
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	4413      	add	r3, r2
 800660a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006614:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006618:	d13b      	bne.n	8006692 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	4413      	add	r3, r2
 8006624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	683a      	ldr	r2, [r7, #0]
 800662c:	7812      	ldrb	r2, [r2, #0]
 800662e:	0151      	lsls	r1, r2, #5
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	440a      	add	r2, r1
 8006634:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006638:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800663c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	4413      	add	r3, r2
 8006648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	683a      	ldr	r2, [r7, #0]
 8006650:	7812      	ldrb	r2, [r2, #0]
 8006652:	0151      	lsls	r1, r2, #5
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	440a      	add	r2, r1
 8006658:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800665c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006660:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	3301      	adds	r3, #1
 8006666:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f242 7210 	movw	r2, #10000	; 0x2710
 800666e:	4293      	cmp	r3, r2
 8006670:	d902      	bls.n	8006678 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	75fb      	strb	r3, [r7, #23]
          break;
 8006676:	e00c      	b.n	8006692 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	015a      	lsls	r2, r3, #5
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	4413      	add	r3, r2
 8006682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800668c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006690:	d0e7      	beq.n	8006662 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006692:	7dfb      	ldrb	r3, [r7, #23]
}
 8006694:	4618      	mov	r0, r3
 8006696:	371c      	adds	r7, #28
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b089      	sub	sp, #36	; 0x24
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	4611      	mov	r1, r2
 80066ac:	461a      	mov	r2, r3
 80066ae:	460b      	mov	r3, r1
 80066b0:	71fb      	strb	r3, [r7, #7]
 80066b2:	4613      	mov	r3, r2
 80066b4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80066be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d123      	bne.n	800670e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80066c6:	88bb      	ldrh	r3, [r7, #4]
 80066c8:	3303      	adds	r3, #3
 80066ca:	089b      	lsrs	r3, r3, #2
 80066cc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80066ce:	2300      	movs	r3, #0
 80066d0:	61bb      	str	r3, [r7, #24]
 80066d2:	e018      	b.n	8006706 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80066d4:	79fb      	ldrb	r3, [r7, #7]
 80066d6:	031a      	lsls	r2, r3, #12
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	4413      	add	r3, r2
 80066dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066e0:	461a      	mov	r2, r3
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	3301      	adds	r3, #1
 80066ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	3301      	adds	r3, #1
 80066f2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	3301      	adds	r3, #1
 80066f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	3301      	adds	r3, #1
 80066fe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	3301      	adds	r3, #1
 8006704:	61bb      	str	r3, [r7, #24]
 8006706:	69ba      	ldr	r2, [r7, #24]
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	429a      	cmp	r2, r3
 800670c:	d3e2      	bcc.n	80066d4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3724      	adds	r7, #36	; 0x24
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800671c:	b480      	push	{r7}
 800671e:	b08b      	sub	sp, #44	; 0x2c
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	4613      	mov	r3, r2
 8006728:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006732:	88fb      	ldrh	r3, [r7, #6]
 8006734:	089b      	lsrs	r3, r3, #2
 8006736:	b29b      	uxth	r3, r3
 8006738:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800673a:	88fb      	ldrh	r3, [r7, #6]
 800673c:	f003 0303 	and.w	r3, r3, #3
 8006740:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006742:	2300      	movs	r3, #0
 8006744:	623b      	str	r3, [r7, #32]
 8006746:	e014      	b.n	8006772 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006752:	601a      	str	r2, [r3, #0]
    pDest++;
 8006754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006756:	3301      	adds	r3, #1
 8006758:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800675a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675c:	3301      	adds	r3, #1
 800675e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	3301      	adds	r3, #1
 8006764:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006768:	3301      	adds	r3, #1
 800676a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800676c:	6a3b      	ldr	r3, [r7, #32]
 800676e:	3301      	adds	r3, #1
 8006770:	623b      	str	r3, [r7, #32]
 8006772:	6a3a      	ldr	r2, [r7, #32]
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	429a      	cmp	r2, r3
 8006778:	d3e6      	bcc.n	8006748 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800677a:	8bfb      	ldrh	r3, [r7, #30]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d01e      	beq.n	80067be <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006780:	2300      	movs	r3, #0
 8006782:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800678a:	461a      	mov	r2, r3
 800678c:	f107 0310 	add.w	r3, r7, #16
 8006790:	6812      	ldr	r2, [r2, #0]
 8006792:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	6a3b      	ldr	r3, [r7, #32]
 8006798:	b2db      	uxtb	r3, r3
 800679a:	00db      	lsls	r3, r3, #3
 800679c:	fa22 f303 	lsr.w	r3, r2, r3
 80067a0:	b2da      	uxtb	r2, r3
 80067a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a4:	701a      	strb	r2, [r3, #0]
      i++;
 80067a6:	6a3b      	ldr	r3, [r7, #32]
 80067a8:	3301      	adds	r3, #1
 80067aa:	623b      	str	r3, [r7, #32]
      pDest++;
 80067ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ae:	3301      	adds	r3, #1
 80067b0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80067b2:	8bfb      	ldrh	r3, [r7, #30]
 80067b4:	3b01      	subs	r3, #1
 80067b6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80067b8:	8bfb      	ldrh	r3, [r7, #30]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1ea      	bne.n	8006794 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80067be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	372c      	adds	r7, #44	; 0x2c
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	785b      	ldrb	r3, [r3, #1]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d12c      	bne.n	8006842 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	015a      	lsls	r2, r3, #5
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	4413      	add	r3, r2
 80067f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	db12      	blt.n	8006820 <USB_EPSetStall+0x54>
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00f      	beq.n	8006820 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	015a      	lsls	r2, r3, #5
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	4413      	add	r3, r2
 8006808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	0151      	lsls	r1, r2, #5
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	440a      	add	r2, r1
 8006816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800681a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800681e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	015a      	lsls	r2, r3, #5
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	4413      	add	r3, r2
 8006828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68ba      	ldr	r2, [r7, #8]
 8006830:	0151      	lsls	r1, r2, #5
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	440a      	add	r2, r1
 8006836:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800683a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800683e:	6013      	str	r3, [r2, #0]
 8006840:	e02b      	b.n	800689a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	015a      	lsls	r2, r3, #5
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	4413      	add	r3, r2
 800684a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	db12      	blt.n	800687a <USB_EPSetStall+0xae>
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00f      	beq.n	800687a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	015a      	lsls	r2, r3, #5
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	4413      	add	r3, r2
 8006862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68ba      	ldr	r2, [r7, #8]
 800686a:	0151      	lsls	r1, r2, #5
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	440a      	add	r2, r1
 8006870:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006874:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006878:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	015a      	lsls	r2, r3, #5
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	4413      	add	r3, r2
 8006882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	0151      	lsls	r1, r2, #5
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	440a      	add	r2, r1
 8006890:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006894:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006898:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3714      	adds	r7, #20
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	785b      	ldrb	r3, [r3, #1]
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d128      	bne.n	8006916 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	015a      	lsls	r2, r3, #5
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	4413      	add	r3, r2
 80068cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	0151      	lsls	r1, r2, #5
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	440a      	add	r2, r1
 80068da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068e2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	791b      	ldrb	r3, [r3, #4]
 80068e8:	2b03      	cmp	r3, #3
 80068ea:	d003      	beq.n	80068f4 <USB_EPClearStall+0x4c>
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	791b      	ldrb	r3, [r3, #4]
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d138      	bne.n	8006966 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	015a      	lsls	r2, r3, #5
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	4413      	add	r3, r2
 80068fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	0151      	lsls	r1, r2, #5
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	440a      	add	r2, r1
 800690a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800690e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006912:	6013      	str	r3, [r2, #0]
 8006914:	e027      	b.n	8006966 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	4413      	add	r3, r2
 800691e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	0151      	lsls	r1, r2, #5
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	440a      	add	r2, r1
 800692c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006930:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006934:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	791b      	ldrb	r3, [r3, #4]
 800693a:	2b03      	cmp	r3, #3
 800693c:	d003      	beq.n	8006946 <USB_EPClearStall+0x9e>
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	791b      	ldrb	r3, [r3, #4]
 8006942:	2b02      	cmp	r3, #2
 8006944:	d10f      	bne.n	8006966 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	015a      	lsls	r2, r3, #5
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	4413      	add	r3, r2
 800694e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	0151      	lsls	r1, r2, #5
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	440a      	add	r2, r1
 800695c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006964:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3714      	adds	r7, #20
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	460b      	mov	r3, r1
 800697e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006992:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006996:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	78fb      	ldrb	r3, [r7, #3]
 80069a2:	011b      	lsls	r3, r3, #4
 80069a4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80069a8:	68f9      	ldr	r1, [r7, #12]
 80069aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069ae:	4313      	orrs	r3, r2
 80069b0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80069da:	f023 0303 	bic.w	r3, r3, #3
 80069de:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069ee:	f023 0302 	bic.w	r3, r3, #2
 80069f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3714      	adds	r7, #20
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006a02:	b480      	push	{r7}
 8006a04:	b085      	sub	sp, #20
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a1c:	f023 0303 	bic.w	r3, r3, #3
 8006a20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a30:	f043 0302 	orr.w	r3, r3, #2
 8006a34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3714      	adds	r7, #20
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	4013      	ands	r3, r2
 8006a5a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b085      	sub	sp, #20
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a86:	69db      	ldr	r3, [r3, #28]
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	0c1b      	lsrs	r3, r3, #16
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b085      	sub	sp, #20
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aba:	69db      	ldr	r3, [r3, #28]
 8006abc:	68ba      	ldr	r2, [r7, #8]
 8006abe:	4013      	ands	r3, r2
 8006ac0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	b29b      	uxth	r3, r3
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3714      	adds	r7, #20
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr

08006ad2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b085      	sub	sp, #20
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
 8006ada:	460b      	mov	r3, r1
 8006adc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006ae2:	78fb      	ldrb	r3, [r7, #3]
 8006ae4:	015a      	lsls	r2, r3, #5
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	4413      	add	r3, r2
 8006aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	68ba      	ldr	r2, [r7, #8]
 8006afc:	4013      	ands	r3, r2
 8006afe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b00:	68bb      	ldr	r3, [r7, #8]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3714      	adds	r7, #20
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr

08006b0e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b0e:	b480      	push	{r7}
 8006b10:	b087      	sub	sp, #28
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
 8006b16:	460b      	mov	r3, r1
 8006b18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b30:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006b32:	78fb      	ldrb	r3, [r7, #3]
 8006b34:	f003 030f 	and.w	r3, r3, #15
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b3e:	01db      	lsls	r3, r3, #7
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	693a      	ldr	r2, [r7, #16]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006b48:	78fb      	ldrb	r3, [r7, #3]
 8006b4a:	015a      	lsls	r2, r3, #5
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	4413      	add	r3, r2
 8006b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	4013      	ands	r3, r2
 8006b5a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b5c:	68bb      	ldr	r3, [r7, #8]
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	371c      	adds	r7, #28
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr

08006b6a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006b6a:	b480      	push	{r7}
 8006b6c:	b083      	sub	sp, #12
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	695b      	ldr	r3, [r3, #20]
 8006b76:	f003 0301 	and.w	r3, r3, #1
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	370c      	adds	r7, #12
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006b86:	b480      	push	{r7}
 8006b88:	b085      	sub	sp, #20
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ba0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006ba4:	f023 0307 	bic.w	r3, r3, #7
 8006ba8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bbc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3714      	adds	r7, #20
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b087      	sub	sp, #28
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	607a      	str	r2, [r7, #4]
 8006bd8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	333c      	adds	r3, #60	; 0x3c
 8006be2:	3304      	adds	r3, #4
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	4a26      	ldr	r2, [pc, #152]	; (8006c84 <USB_EP0_OutStart+0xb8>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d90a      	bls.n	8006c06 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c00:	d101      	bne.n	8006c06 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006c02:	2300      	movs	r3, #0
 8006c04:	e037      	b.n	8006c76 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	2300      	movs	r3, #0
 8006c10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c34:	f043 0318 	orr.w	r3, r3, #24
 8006c38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c48:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006c4c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006c4e:	7afb      	ldrb	r3, [r7, #11]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d10f      	bne.n	8006c74 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	697a      	ldr	r2, [r7, #20]
 8006c6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c6e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006c72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	371c      	adds	r7, #28
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	4f54300a 	.word	0x4f54300a

08006c88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c90:	2300      	movs	r3, #0
 8006c92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	3301      	adds	r3, #1
 8006c98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	4a13      	ldr	r2, [pc, #76]	; (8006cec <USB_CoreReset+0x64>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d901      	bls.n	8006ca6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	e01b      	b.n	8006cde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	daf2      	bge.n	8006c94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	f043 0201 	orr.w	r2, r3, #1
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	4a09      	ldr	r2, [pc, #36]	; (8006cec <USB_CoreReset+0x64>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d901      	bls.n	8006cd0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e006      	b.n	8006cde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	f003 0301 	and.w	r3, r3, #1
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d0f0      	beq.n	8006cbe <USB_CoreReset+0x36>

  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3714      	adds	r7, #20
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	00030d40 	.word	0x00030d40

08006cf0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006cfc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006d00:	f002 fc1e 	bl	8009540 <USBD_static_malloc>
 8006d04:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d109      	bne.n	8006d20 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	32b0      	adds	r2, #176	; 0xb0
 8006d16:	2100      	movs	r1, #0
 8006d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	e0d4      	b.n	8006eca <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006d20:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006d24:	2100      	movs	r1, #0
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f002 fc78 	bl	800961c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	32b0      	adds	r2, #176	; 0xb0
 8006d36:	68f9      	ldr	r1, [r7, #12]
 8006d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	32b0      	adds	r2, #176	; 0xb0
 8006d46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	7c1b      	ldrb	r3, [r3, #16]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d138      	bne.n	8006dca <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006d58:	4b5e      	ldr	r3, [pc, #376]	; (8006ed4 <USBD_CDC_Init+0x1e4>)
 8006d5a:	7819      	ldrb	r1, [r3, #0]
 8006d5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d60:	2202      	movs	r2, #2
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f002 fac9 	bl	80092fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006d68:	4b5a      	ldr	r3, [pc, #360]	; (8006ed4 <USBD_CDC_Init+0x1e4>)
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	f003 020f 	and.w	r2, r3, #15
 8006d70:	6879      	ldr	r1, [r7, #4]
 8006d72:	4613      	mov	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	440b      	add	r3, r1
 8006d7c:	3324      	adds	r3, #36	; 0x24
 8006d7e:	2201      	movs	r2, #1
 8006d80:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006d82:	4b55      	ldr	r3, [pc, #340]	; (8006ed8 <USBD_CDC_Init+0x1e8>)
 8006d84:	7819      	ldrb	r1, [r3, #0]
 8006d86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f002 fab4 	bl	80092fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006d92:	4b51      	ldr	r3, [pc, #324]	; (8006ed8 <USBD_CDC_Init+0x1e8>)
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	f003 020f 	and.w	r2, r3, #15
 8006d9a:	6879      	ldr	r1, [r7, #4]
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	440b      	add	r3, r1
 8006da6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006daa:	2201      	movs	r2, #1
 8006dac:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006dae:	4b4b      	ldr	r3, [pc, #300]	; (8006edc <USBD_CDC_Init+0x1ec>)
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	f003 020f 	and.w	r2, r3, #15
 8006db6:	6879      	ldr	r1, [r7, #4]
 8006db8:	4613      	mov	r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4413      	add	r3, r2
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	440b      	add	r3, r1
 8006dc2:	3326      	adds	r3, #38	; 0x26
 8006dc4:	2210      	movs	r2, #16
 8006dc6:	801a      	strh	r2, [r3, #0]
 8006dc8:	e035      	b.n	8006e36 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006dca:	4b42      	ldr	r3, [pc, #264]	; (8006ed4 <USBD_CDC_Init+0x1e4>)
 8006dcc:	7819      	ldrb	r1, [r3, #0]
 8006dce:	2340      	movs	r3, #64	; 0x40
 8006dd0:	2202      	movs	r2, #2
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f002 fa91 	bl	80092fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006dd8:	4b3e      	ldr	r3, [pc, #248]	; (8006ed4 <USBD_CDC_Init+0x1e4>)
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	f003 020f 	and.w	r2, r3, #15
 8006de0:	6879      	ldr	r1, [r7, #4]
 8006de2:	4613      	mov	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	4413      	add	r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	440b      	add	r3, r1
 8006dec:	3324      	adds	r3, #36	; 0x24
 8006dee:	2201      	movs	r2, #1
 8006df0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006df2:	4b39      	ldr	r3, [pc, #228]	; (8006ed8 <USBD_CDC_Init+0x1e8>)
 8006df4:	7819      	ldrb	r1, [r3, #0]
 8006df6:	2340      	movs	r3, #64	; 0x40
 8006df8:	2202      	movs	r2, #2
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f002 fa7d 	bl	80092fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006e00:	4b35      	ldr	r3, [pc, #212]	; (8006ed8 <USBD_CDC_Init+0x1e8>)
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	f003 020f 	and.w	r2, r3, #15
 8006e08:	6879      	ldr	r1, [r7, #4]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4413      	add	r3, r2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	440b      	add	r3, r1
 8006e14:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e18:	2201      	movs	r2, #1
 8006e1a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006e1c:	4b2f      	ldr	r3, [pc, #188]	; (8006edc <USBD_CDC_Init+0x1ec>)
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	f003 020f 	and.w	r2, r3, #15
 8006e24:	6879      	ldr	r1, [r7, #4]
 8006e26:	4613      	mov	r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4413      	add	r3, r2
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	440b      	add	r3, r1
 8006e30:	3326      	adds	r3, #38	; 0x26
 8006e32:	2210      	movs	r2, #16
 8006e34:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006e36:	4b29      	ldr	r3, [pc, #164]	; (8006edc <USBD_CDC_Init+0x1ec>)
 8006e38:	7819      	ldrb	r1, [r3, #0]
 8006e3a:	2308      	movs	r3, #8
 8006e3c:	2203      	movs	r2, #3
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f002 fa5b 	bl	80092fa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006e44:	4b25      	ldr	r3, [pc, #148]	; (8006edc <USBD_CDC_Init+0x1ec>)
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	f003 020f 	and.w	r2, r3, #15
 8006e4c:	6879      	ldr	r1, [r7, #4]
 8006e4e:	4613      	mov	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	4413      	add	r3, r2
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	440b      	add	r3, r1
 8006e58:	3324      	adds	r3, #36	; 0x24
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	33b0      	adds	r3, #176	; 0xb0
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4413      	add	r3, r2
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d101      	bne.n	8006e98 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006e94:	2302      	movs	r3, #2
 8006e96:	e018      	b.n	8006eca <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	7c1b      	ldrb	r3, [r3, #16]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10a      	bne.n	8006eb6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ea0:	4b0d      	ldr	r3, [pc, #52]	; (8006ed8 <USBD_CDC_Init+0x1e8>)
 8006ea2:	7819      	ldrb	r1, [r3, #0]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006eaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f002 fb12 	bl	80094d8 <USBD_LL_PrepareReceive>
 8006eb4:	e008      	b.n	8006ec8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006eb6:	4b08      	ldr	r3, [pc, #32]	; (8006ed8 <USBD_CDC_Init+0x1e8>)
 8006eb8:	7819      	ldrb	r1, [r3, #0]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ec0:	2340      	movs	r3, #64	; 0x40
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f002 fb08 	bl	80094d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	20000097 	.word	0x20000097
 8006ed8:	20000098 	.word	0x20000098
 8006edc:	20000099 	.word	0x20000099

08006ee0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006eec:	4b3a      	ldr	r3, [pc, #232]	; (8006fd8 <USBD_CDC_DeInit+0xf8>)
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f002 fa27 	bl	8009346 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006ef8:	4b37      	ldr	r3, [pc, #220]	; (8006fd8 <USBD_CDC_DeInit+0xf8>)
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	f003 020f 	and.w	r2, r3, #15
 8006f00:	6879      	ldr	r1, [r7, #4]
 8006f02:	4613      	mov	r3, r2
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	440b      	add	r3, r1
 8006f0c:	3324      	adds	r3, #36	; 0x24
 8006f0e:	2200      	movs	r2, #0
 8006f10:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006f12:	4b32      	ldr	r3, [pc, #200]	; (8006fdc <USBD_CDC_DeInit+0xfc>)
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	4619      	mov	r1, r3
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f002 fa14 	bl	8009346 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006f1e:	4b2f      	ldr	r3, [pc, #188]	; (8006fdc <USBD_CDC_DeInit+0xfc>)
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	f003 020f 	and.w	r2, r3, #15
 8006f26:	6879      	ldr	r1, [r7, #4]
 8006f28:	4613      	mov	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4413      	add	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	440b      	add	r3, r1
 8006f32:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f36:	2200      	movs	r2, #0
 8006f38:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006f3a:	4b29      	ldr	r3, [pc, #164]	; (8006fe0 <USBD_CDC_DeInit+0x100>)
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	4619      	mov	r1, r3
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f002 fa00 	bl	8009346 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006f46:	4b26      	ldr	r3, [pc, #152]	; (8006fe0 <USBD_CDC_DeInit+0x100>)
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	f003 020f 	and.w	r2, r3, #15
 8006f4e:	6879      	ldr	r1, [r7, #4]
 8006f50:	4613      	mov	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	440b      	add	r3, r1
 8006f5a:	3324      	adds	r3, #36	; 0x24
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006f60:	4b1f      	ldr	r3, [pc, #124]	; (8006fe0 <USBD_CDC_DeInit+0x100>)
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	f003 020f 	and.w	r2, r3, #15
 8006f68:	6879      	ldr	r1, [r7, #4]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	4413      	add	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	440b      	add	r3, r1
 8006f74:	3326      	adds	r3, #38	; 0x26
 8006f76:	2200      	movs	r2, #0
 8006f78:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	32b0      	adds	r2, #176	; 0xb0
 8006f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d01f      	beq.n	8006fcc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	33b0      	adds	r3, #176	; 0xb0
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	4413      	add	r3, r2
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	32b0      	adds	r2, #176	; 0xb0
 8006faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f002 fad4 	bl	800955c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	32b0      	adds	r2, #176	; 0xb0
 8006fbe:	2100      	movs	r1, #0
 8006fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3708      	adds	r7, #8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	20000097 	.word	0x20000097
 8006fdc:	20000098 	.word	0x20000098
 8006fe0:	20000099 	.word	0x20000099

08006fe4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b086      	sub	sp, #24
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	32b0      	adds	r2, #176	; 0xb0
 8006ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ffc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006ffe:	2300      	movs	r3, #0
 8007000:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007002:	2300      	movs	r3, #0
 8007004:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007006:	2300      	movs	r3, #0
 8007008:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d101      	bne.n	8007014 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007010:	2303      	movs	r3, #3
 8007012:	e0bf      	b.n	8007194 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800701c:	2b00      	cmp	r3, #0
 800701e:	d050      	beq.n	80070c2 <USBD_CDC_Setup+0xde>
 8007020:	2b20      	cmp	r3, #32
 8007022:	f040 80af 	bne.w	8007184 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	88db      	ldrh	r3, [r3, #6]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d03a      	beq.n	80070a4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	b25b      	sxtb	r3, r3
 8007034:	2b00      	cmp	r3, #0
 8007036:	da1b      	bge.n	8007070 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	33b0      	adds	r3, #176	; 0xb0
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	4413      	add	r3, r2
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800704e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007050:	683a      	ldr	r2, [r7, #0]
 8007052:	88d2      	ldrh	r2, [r2, #6]
 8007054:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	88db      	ldrh	r3, [r3, #6]
 800705a:	2b07      	cmp	r3, #7
 800705c:	bf28      	it	cs
 800705e:	2307      	movcs	r3, #7
 8007060:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	89fa      	ldrh	r2, [r7, #14]
 8007066:	4619      	mov	r1, r3
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f001 fd43 	bl	8008af4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800706e:	e090      	b.n	8007192 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	785a      	ldrb	r2, [r3, #1]
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	88db      	ldrh	r3, [r3, #6]
 800707e:	2b3f      	cmp	r3, #63	; 0x3f
 8007080:	d803      	bhi.n	800708a <USBD_CDC_Setup+0xa6>
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	88db      	ldrh	r3, [r3, #6]
 8007086:	b2da      	uxtb	r2, r3
 8007088:	e000      	b.n	800708c <USBD_CDC_Setup+0xa8>
 800708a:	2240      	movs	r2, #64	; 0x40
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007092:	6939      	ldr	r1, [r7, #16]
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800709a:	461a      	mov	r2, r3
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f001 fd55 	bl	8008b4c <USBD_CtlPrepareRx>
      break;
 80070a2:	e076      	b.n	8007192 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	33b0      	adds	r3, #176	; 0xb0
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	4413      	add	r3, r2
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	683a      	ldr	r2, [r7, #0]
 80070b8:	7850      	ldrb	r0, [r2, #1]
 80070ba:	2200      	movs	r2, #0
 80070bc:	6839      	ldr	r1, [r7, #0]
 80070be:	4798      	blx	r3
      break;
 80070c0:	e067      	b.n	8007192 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	785b      	ldrb	r3, [r3, #1]
 80070c6:	2b0b      	cmp	r3, #11
 80070c8:	d851      	bhi.n	800716e <USBD_CDC_Setup+0x18a>
 80070ca:	a201      	add	r2, pc, #4	; (adr r2, 80070d0 <USBD_CDC_Setup+0xec>)
 80070cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d0:	08007101 	.word	0x08007101
 80070d4:	0800717d 	.word	0x0800717d
 80070d8:	0800716f 	.word	0x0800716f
 80070dc:	0800716f 	.word	0x0800716f
 80070e0:	0800716f 	.word	0x0800716f
 80070e4:	0800716f 	.word	0x0800716f
 80070e8:	0800716f 	.word	0x0800716f
 80070ec:	0800716f 	.word	0x0800716f
 80070f0:	0800716f 	.word	0x0800716f
 80070f4:	0800716f 	.word	0x0800716f
 80070f8:	0800712b 	.word	0x0800712b
 80070fc:	08007155 	.word	0x08007155
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007106:	b2db      	uxtb	r3, r3
 8007108:	2b03      	cmp	r3, #3
 800710a:	d107      	bne.n	800711c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800710c:	f107 030a 	add.w	r3, r7, #10
 8007110:	2202      	movs	r2, #2
 8007112:	4619      	mov	r1, r3
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f001 fced 	bl	8008af4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800711a:	e032      	b.n	8007182 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800711c:	6839      	ldr	r1, [r7, #0]
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f001 fc77 	bl	8008a12 <USBD_CtlError>
            ret = USBD_FAIL;
 8007124:	2303      	movs	r3, #3
 8007126:	75fb      	strb	r3, [r7, #23]
          break;
 8007128:	e02b      	b.n	8007182 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007130:	b2db      	uxtb	r3, r3
 8007132:	2b03      	cmp	r3, #3
 8007134:	d107      	bne.n	8007146 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007136:	f107 030d 	add.w	r3, r7, #13
 800713a:	2201      	movs	r2, #1
 800713c:	4619      	mov	r1, r3
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f001 fcd8 	bl	8008af4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007144:	e01d      	b.n	8007182 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007146:	6839      	ldr	r1, [r7, #0]
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f001 fc62 	bl	8008a12 <USBD_CtlError>
            ret = USBD_FAIL;
 800714e:	2303      	movs	r3, #3
 8007150:	75fb      	strb	r3, [r7, #23]
          break;
 8007152:	e016      	b.n	8007182 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800715a:	b2db      	uxtb	r3, r3
 800715c:	2b03      	cmp	r3, #3
 800715e:	d00f      	beq.n	8007180 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007160:	6839      	ldr	r1, [r7, #0]
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f001 fc55 	bl	8008a12 <USBD_CtlError>
            ret = USBD_FAIL;
 8007168:	2303      	movs	r3, #3
 800716a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800716c:	e008      	b.n	8007180 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800716e:	6839      	ldr	r1, [r7, #0]
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f001 fc4e 	bl	8008a12 <USBD_CtlError>
          ret = USBD_FAIL;
 8007176:	2303      	movs	r3, #3
 8007178:	75fb      	strb	r3, [r7, #23]
          break;
 800717a:	e002      	b.n	8007182 <USBD_CDC_Setup+0x19e>
          break;
 800717c:	bf00      	nop
 800717e:	e008      	b.n	8007192 <USBD_CDC_Setup+0x1ae>
          break;
 8007180:	bf00      	nop
      }
      break;
 8007182:	e006      	b.n	8007192 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007184:	6839      	ldr	r1, [r7, #0]
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f001 fc43 	bl	8008a12 <USBD_CtlError>
      ret = USBD_FAIL;
 800718c:	2303      	movs	r3, #3
 800718e:	75fb      	strb	r3, [r7, #23]
      break;
 8007190:	bf00      	nop
  }

  return (uint8_t)ret;
 8007192:	7dfb      	ldrb	r3, [r7, #23]
}
 8007194:	4618      	mov	r0, r3
 8007196:	3718      	adds	r7, #24
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	460b      	mov	r3, r1
 80071a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80071ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	32b0      	adds	r2, #176	; 0xb0
 80071ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d101      	bne.n	80071c6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80071c2:	2303      	movs	r3, #3
 80071c4:	e065      	b.n	8007292 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	32b0      	adds	r2, #176	; 0xb0
 80071d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071d4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80071d6:	78fb      	ldrb	r3, [r7, #3]
 80071d8:	f003 020f 	and.w	r2, r3, #15
 80071dc:	6879      	ldr	r1, [r7, #4]
 80071de:	4613      	mov	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	440b      	add	r3, r1
 80071e8:	3318      	adds	r3, #24
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d02f      	beq.n	8007250 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80071f0:	78fb      	ldrb	r3, [r7, #3]
 80071f2:	f003 020f 	and.w	r2, r3, #15
 80071f6:	6879      	ldr	r1, [r7, #4]
 80071f8:	4613      	mov	r3, r2
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	4413      	add	r3, r2
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	440b      	add	r3, r1
 8007202:	3318      	adds	r3, #24
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	78fb      	ldrb	r3, [r7, #3]
 8007208:	f003 010f 	and.w	r1, r3, #15
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	460b      	mov	r3, r1
 8007210:	00db      	lsls	r3, r3, #3
 8007212:	440b      	add	r3, r1
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4403      	add	r3, r0
 8007218:	3348      	adds	r3, #72	; 0x48
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007220:	fb01 f303 	mul.w	r3, r1, r3
 8007224:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007226:	2b00      	cmp	r3, #0
 8007228:	d112      	bne.n	8007250 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800722a:	78fb      	ldrb	r3, [r7, #3]
 800722c:	f003 020f 	and.w	r2, r3, #15
 8007230:	6879      	ldr	r1, [r7, #4]
 8007232:	4613      	mov	r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4413      	add	r3, r2
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	440b      	add	r3, r1
 800723c:	3318      	adds	r3, #24
 800723e:	2200      	movs	r2, #0
 8007240:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007242:	78f9      	ldrb	r1, [r7, #3]
 8007244:	2300      	movs	r3, #0
 8007246:	2200      	movs	r2, #0
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f002 f924 	bl	8009496 <USBD_LL_Transmit>
 800724e:	e01f      	b.n	8007290 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	2200      	movs	r2, #0
 8007254:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	33b0      	adds	r3, #176	; 0xb0
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4413      	add	r3, r2
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d010      	beq.n	8007290 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	33b0      	adds	r3, #176	; 0xb0
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4413      	add	r3, r2
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	68ba      	ldr	r2, [r7, #8]
 8007282:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800728c:	78fa      	ldrb	r2, [r7, #3]
 800728e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b084      	sub	sp, #16
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
 80072a2:	460b      	mov	r3, r1
 80072a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	32b0      	adds	r2, #176	; 0xb0
 80072b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	32b0      	adds	r2, #176	; 0xb0
 80072c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d101      	bne.n	80072cc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80072c8:	2303      	movs	r3, #3
 80072ca:	e01a      	b.n	8007302 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80072cc:	78fb      	ldrb	r3, [r7, #3]
 80072ce:	4619      	mov	r1, r3
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f002 f922 	bl	800951a <USBD_LL_GetRxDataSize>
 80072d6:	4602      	mov	r2, r0
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	33b0      	adds	r3, #176	; 0xb0
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80072fc:	4611      	mov	r1, r2
 80072fe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800730a:	b580      	push	{r7, lr}
 800730c:	b084      	sub	sp, #16
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	32b0      	adds	r2, #176	; 0xb0
 800731c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007320:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d101      	bne.n	800732c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007328:	2303      	movs	r3, #3
 800732a:	e025      	b.n	8007378 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	33b0      	adds	r3, #176	; 0xb0
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	4413      	add	r3, r2
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d01a      	beq.n	8007376 <USBD_CDC_EP0_RxReady+0x6c>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007346:	2bff      	cmp	r3, #255	; 0xff
 8007348:	d015      	beq.n	8007376 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	33b0      	adds	r3, #176	; 0xb0
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	4413      	add	r3, r2
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007362:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800736a:	b292      	uxth	r2, r2
 800736c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	22ff      	movs	r2, #255	; 0xff
 8007372:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b086      	sub	sp, #24
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007388:	2182      	movs	r1, #130	; 0x82
 800738a:	4818      	ldr	r0, [pc, #96]	; (80073ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800738c:	f000 fd09 	bl	8007da2 <USBD_GetEpDesc>
 8007390:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007392:	2101      	movs	r1, #1
 8007394:	4815      	ldr	r0, [pc, #84]	; (80073ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007396:	f000 fd04 	bl	8007da2 <USBD_GetEpDesc>
 800739a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800739c:	2181      	movs	r1, #129	; 0x81
 800739e:	4813      	ldr	r0, [pc, #76]	; (80073ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 80073a0:	f000 fcff 	bl	8007da2 <USBD_GetEpDesc>
 80073a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d002      	beq.n	80073b2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	2210      	movs	r2, #16
 80073b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d006      	beq.n	80073c6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073c0:	711a      	strb	r2, [r3, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d006      	beq.n	80073da <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073d4:	711a      	strb	r2, [r3, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2243      	movs	r2, #67	; 0x43
 80073de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80073e0:	4b02      	ldr	r3, [pc, #8]	; (80073ec <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3718      	adds	r7, #24
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	20000054 	.word	0x20000054

080073f0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b086      	sub	sp, #24
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80073f8:	2182      	movs	r1, #130	; 0x82
 80073fa:	4818      	ldr	r0, [pc, #96]	; (800745c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80073fc:	f000 fcd1 	bl	8007da2 <USBD_GetEpDesc>
 8007400:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007402:	2101      	movs	r1, #1
 8007404:	4815      	ldr	r0, [pc, #84]	; (800745c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007406:	f000 fccc 	bl	8007da2 <USBD_GetEpDesc>
 800740a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800740c:	2181      	movs	r1, #129	; 0x81
 800740e:	4813      	ldr	r0, [pc, #76]	; (800745c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007410:	f000 fcc7 	bl	8007da2 <USBD_GetEpDesc>
 8007414:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d002      	beq.n	8007422 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	2210      	movs	r2, #16
 8007420:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d006      	beq.n	8007436 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	2200      	movs	r2, #0
 800742c:	711a      	strb	r2, [r3, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	f042 0202 	orr.w	r2, r2, #2
 8007434:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d006      	beq.n	800744a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2200      	movs	r2, #0
 8007440:	711a      	strb	r2, [r3, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	f042 0202 	orr.w	r2, r2, #2
 8007448:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2243      	movs	r2, #67	; 0x43
 800744e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007450:	4b02      	ldr	r3, [pc, #8]	; (800745c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007452:	4618      	mov	r0, r3
 8007454:	3718      	adds	r7, #24
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	20000054 	.word	0x20000054

08007460 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007468:	2182      	movs	r1, #130	; 0x82
 800746a:	4818      	ldr	r0, [pc, #96]	; (80074cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800746c:	f000 fc99 	bl	8007da2 <USBD_GetEpDesc>
 8007470:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007472:	2101      	movs	r1, #1
 8007474:	4815      	ldr	r0, [pc, #84]	; (80074cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007476:	f000 fc94 	bl	8007da2 <USBD_GetEpDesc>
 800747a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800747c:	2181      	movs	r1, #129	; 0x81
 800747e:	4813      	ldr	r0, [pc, #76]	; (80074cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007480:	f000 fc8f 	bl	8007da2 <USBD_GetEpDesc>
 8007484:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d002      	beq.n	8007492 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	2210      	movs	r2, #16
 8007490:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d006      	beq.n	80074a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	2200      	movs	r2, #0
 800749c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074a0:	711a      	strb	r2, [r3, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d006      	beq.n	80074ba <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074b4:	711a      	strb	r2, [r3, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2243      	movs	r2, #67	; 0x43
 80074be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80074c0:	4b02      	ldr	r3, [pc, #8]	; (80074cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3718      	adds	r7, #24
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	20000054 	.word	0x20000054

080074d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	220a      	movs	r2, #10
 80074dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80074de:	4b03      	ldr	r3, [pc, #12]	; (80074ec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr
 80074ec:	20000010 	.word	0x20000010

080074f0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d101      	bne.n	8007504 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007500:	2303      	movs	r3, #3
 8007502:	e009      	b.n	8007518 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	33b0      	adds	r3, #176	; 0xb0
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	4413      	add	r3, r2
 8007512:	683a      	ldr	r2, [r7, #0]
 8007514:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007524:	b480      	push	{r7}
 8007526:	b087      	sub	sp, #28
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	32b0      	adds	r2, #176	; 0xb0
 800753a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800753e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d101      	bne.n	800754a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007546:	2303      	movs	r3, #3
 8007548:	e008      	b.n	800755c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	371c      	adds	r7, #28
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	32b0      	adds	r2, #176	; 0xb0
 800757c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007580:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d101      	bne.n	800758c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007588:	2303      	movs	r3, #3
 800758a:	e004      	b.n	8007596 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	683a      	ldr	r2, [r7, #0]
 8007590:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3714      	adds	r7, #20
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
	...

080075a4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	32b0      	adds	r2, #176	; 0xb0
 80075b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	32b0      	adds	r2, #176	; 0xb0
 80075c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d101      	bne.n	80075d2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80075ce:	2303      	movs	r3, #3
 80075d0:	e018      	b.n	8007604 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	7c1b      	ldrb	r3, [r3, #16]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d10a      	bne.n	80075f0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80075da:	4b0c      	ldr	r3, [pc, #48]	; (800760c <USBD_CDC_ReceivePacket+0x68>)
 80075dc:	7819      	ldrb	r1, [r3, #0]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80075e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f001 ff75 	bl	80094d8 <USBD_LL_PrepareReceive>
 80075ee:	e008      	b.n	8007602 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80075f0:	4b06      	ldr	r3, [pc, #24]	; (800760c <USBD_CDC_ReceivePacket+0x68>)
 80075f2:	7819      	ldrb	r1, [r3, #0]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80075fa:	2340      	movs	r3, #64	; 0x40
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f001 ff6b 	bl	80094d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007602:	2300      	movs	r3, #0
}
 8007604:	4618      	mov	r0, r3
 8007606:	3710      	adds	r7, #16
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	20000098 	.word	0x20000098

08007610 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	4613      	mov	r3, r2
 800761c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d101      	bne.n	8007628 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007624:	2303      	movs	r3, #3
 8007626:	e01f      	b.n	8007668 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2200      	movs	r2, #0
 800762c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2200      	movs	r2, #0
 8007634:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2200      	movs	r2, #0
 800763c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d003      	beq.n	800764e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	68ba      	ldr	r2, [r7, #8]
 800764a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	79fa      	ldrb	r2, [r7, #7]
 800765a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f001 fde5 	bl	800922c <USBD_LL_Init>
 8007662:	4603      	mov	r3, r0
 8007664:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007666:	7dfb      	ldrb	r3, [r7, #23]
}
 8007668:	4618      	mov	r0, r3
 800766a:	3718      	adds	r7, #24
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800767a:	2300      	movs	r3, #0
 800767c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d101      	bne.n	8007688 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007684:	2303      	movs	r3, #3
 8007686:	e025      	b.n	80076d4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	683a      	ldr	r2, [r7, #0]
 800768c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	32ae      	adds	r2, #174	; 0xae
 800769a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800769e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00f      	beq.n	80076c4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	32ae      	adds	r2, #174	; 0xae
 80076ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b4:	f107 020e 	add.w	r2, r7, #14
 80076b8:	4610      	mov	r0, r2
 80076ba:	4798      	blx	r3
 80076bc:	4602      	mov	r2, r0
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80076ca:	1c5a      	adds	r2, r3, #1
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3710      	adds	r7, #16
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f001 fded 	bl	80092c4 <USBD_LL_Start>
 80076ea:	4603      	mov	r3, r0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3708      	adds	r7, #8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80076fc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80076fe:	4618      	mov	r0, r3
 8007700:	370c      	adds	r7, #12
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr

0800770a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b084      	sub	sp, #16
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
 8007712:	460b      	mov	r3, r1
 8007714:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007716:	2300      	movs	r3, #0
 8007718:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007720:	2b00      	cmp	r3, #0
 8007722:	d009      	beq.n	8007738 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	78fa      	ldrb	r2, [r7, #3]
 800772e:	4611      	mov	r1, r2
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	4798      	blx	r3
 8007734:	4603      	mov	r3, r0
 8007736:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007738:	7bfb      	ldrb	r3, [r7, #15]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b084      	sub	sp, #16
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
 800774a:	460b      	mov	r3, r1
 800774c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800774e:	2300      	movs	r3, #0
 8007750:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	78fa      	ldrb	r2, [r7, #3]
 800775c:	4611      	mov	r1, r2
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	4798      	blx	r3
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d001      	beq.n	800776c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007768:	2303      	movs	r3, #3
 800776a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800776c:	7bfb      	ldrb	r3, [r7, #15]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b084      	sub	sp, #16
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
 800777e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007786:	6839      	ldr	r1, [r7, #0]
 8007788:	4618      	mov	r0, r3
 800778a:	f001 f908 	bl	800899e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2201      	movs	r2, #1
 8007792:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800779c:	461a      	mov	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80077aa:	f003 031f 	and.w	r3, r3, #31
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d01a      	beq.n	80077e8 <USBD_LL_SetupStage+0x72>
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	d822      	bhi.n	80077fc <USBD_LL_SetupStage+0x86>
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d002      	beq.n	80077c0 <USBD_LL_SetupStage+0x4a>
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d00a      	beq.n	80077d4 <USBD_LL_SetupStage+0x5e>
 80077be:	e01d      	b.n	80077fc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80077c6:	4619      	mov	r1, r3
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 fb5f 	bl	8007e8c <USBD_StdDevReq>
 80077ce:	4603      	mov	r3, r0
 80077d0:	73fb      	strb	r3, [r7, #15]
      break;
 80077d2:	e020      	b.n	8007816 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80077da:	4619      	mov	r1, r3
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fbc7 	bl	8007f70 <USBD_StdItfReq>
 80077e2:	4603      	mov	r3, r0
 80077e4:	73fb      	strb	r3, [r7, #15]
      break;
 80077e6:	e016      	b.n	8007816 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80077ee:	4619      	mov	r1, r3
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fc29 	bl	8008048 <USBD_StdEPReq>
 80077f6:	4603      	mov	r3, r0
 80077f8:	73fb      	strb	r3, [r7, #15]
      break;
 80077fa:	e00c      	b.n	8007816 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007802:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007806:	b2db      	uxtb	r3, r3
 8007808:	4619      	mov	r1, r3
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f001 fdba 	bl	8009384 <USBD_LL_StallEP>
 8007810:	4603      	mov	r3, r0
 8007812:	73fb      	strb	r3, [r7, #15]
      break;
 8007814:	bf00      	nop
  }

  return ret;
 8007816:	7bfb      	ldrb	r3, [r7, #15]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	460b      	mov	r3, r1
 800782a:	607a      	str	r2, [r7, #4]
 800782c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800782e:	2300      	movs	r3, #0
 8007830:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007832:	7afb      	ldrb	r3, [r7, #11]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d16e      	bne.n	8007916 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800783e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007846:	2b03      	cmp	r3, #3
 8007848:	f040 8098 	bne.w	800797c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	689a      	ldr	r2, [r3, #8]
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	429a      	cmp	r2, r3
 8007856:	d913      	bls.n	8007880 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	689a      	ldr	r2, [r3, #8]
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	1ad2      	subs	r2, r2, r3
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	68da      	ldr	r2, [r3, #12]
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	4293      	cmp	r3, r2
 8007870:	bf28      	it	cs
 8007872:	4613      	movcs	r3, r2
 8007874:	461a      	mov	r2, r3
 8007876:	6879      	ldr	r1, [r7, #4]
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	f001 f984 	bl	8008b86 <USBD_CtlContinueRx>
 800787e:	e07d      	b.n	800797c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007886:	f003 031f 	and.w	r3, r3, #31
 800788a:	2b02      	cmp	r3, #2
 800788c:	d014      	beq.n	80078b8 <USBD_LL_DataOutStage+0x98>
 800788e:	2b02      	cmp	r3, #2
 8007890:	d81d      	bhi.n	80078ce <USBD_LL_DataOutStage+0xae>
 8007892:	2b00      	cmp	r3, #0
 8007894:	d002      	beq.n	800789c <USBD_LL_DataOutStage+0x7c>
 8007896:	2b01      	cmp	r3, #1
 8007898:	d003      	beq.n	80078a2 <USBD_LL_DataOutStage+0x82>
 800789a:	e018      	b.n	80078ce <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800789c:	2300      	movs	r3, #0
 800789e:	75bb      	strb	r3, [r7, #22]
            break;
 80078a0:	e018      	b.n	80078d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	4619      	mov	r1, r3
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f000 fa5e 	bl	8007d6e <USBD_CoreFindIF>
 80078b2:	4603      	mov	r3, r0
 80078b4:	75bb      	strb	r3, [r7, #22]
            break;
 80078b6:	e00d      	b.n	80078d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	4619      	mov	r1, r3
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f000 fa60 	bl	8007d88 <USBD_CoreFindEP>
 80078c8:	4603      	mov	r3, r0
 80078ca:	75bb      	strb	r3, [r7, #22]
            break;
 80078cc:	e002      	b.n	80078d4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80078ce:	2300      	movs	r3, #0
 80078d0:	75bb      	strb	r3, [r7, #22]
            break;
 80078d2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80078d4:	7dbb      	ldrb	r3, [r7, #22]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d119      	bne.n	800790e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	2b03      	cmp	r3, #3
 80078e4:	d113      	bne.n	800790e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80078e6:	7dba      	ldrb	r2, [r7, #22]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	32ae      	adds	r2, #174	; 0xae
 80078ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00b      	beq.n	800790e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80078f6:	7dba      	ldrb	r2, [r7, #22]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80078fe:	7dba      	ldrb	r2, [r7, #22]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	32ae      	adds	r2, #174	; 0xae
 8007904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	68f8      	ldr	r0, [r7, #12]
 800790c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f001 f94a 	bl	8008ba8 <USBD_CtlSendStatus>
 8007914:	e032      	b.n	800797c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007916:	7afb      	ldrb	r3, [r7, #11]
 8007918:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800791c:	b2db      	uxtb	r3, r3
 800791e:	4619      	mov	r1, r3
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f000 fa31 	bl	8007d88 <USBD_CoreFindEP>
 8007926:	4603      	mov	r3, r0
 8007928:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800792a:	7dbb      	ldrb	r3, [r7, #22]
 800792c:	2bff      	cmp	r3, #255	; 0xff
 800792e:	d025      	beq.n	800797c <USBD_LL_DataOutStage+0x15c>
 8007930:	7dbb      	ldrb	r3, [r7, #22]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d122      	bne.n	800797c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b03      	cmp	r3, #3
 8007940:	d117      	bne.n	8007972 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007942:	7dba      	ldrb	r2, [r7, #22]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	32ae      	adds	r2, #174	; 0xae
 8007948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800794c:	699b      	ldr	r3, [r3, #24]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00f      	beq.n	8007972 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007952:	7dba      	ldrb	r2, [r7, #22]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800795a:	7dba      	ldrb	r2, [r7, #22]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	32ae      	adds	r2, #174	; 0xae
 8007960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007964:	699b      	ldr	r3, [r3, #24]
 8007966:	7afa      	ldrb	r2, [r7, #11]
 8007968:	4611      	mov	r1, r2
 800796a:	68f8      	ldr	r0, [r7, #12]
 800796c:	4798      	blx	r3
 800796e:	4603      	mov	r3, r0
 8007970:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007972:	7dfb      	ldrb	r3, [r7, #23]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d001      	beq.n	800797c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007978:	7dfb      	ldrb	r3, [r7, #23]
 800797a:	e000      	b.n	800797e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3718      	adds	r7, #24
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b086      	sub	sp, #24
 800798a:	af00      	add	r7, sp, #0
 800798c:	60f8      	str	r0, [r7, #12]
 800798e:	460b      	mov	r3, r1
 8007990:	607a      	str	r2, [r7, #4]
 8007992:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007994:	7afb      	ldrb	r3, [r7, #11]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d16f      	bne.n	8007a7a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	3314      	adds	r3, #20
 800799e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	d15a      	bne.n	8007a60 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	689a      	ldr	r2, [r3, #8]
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d914      	bls.n	80079e0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	689a      	ldr	r2, [r3, #8]
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	1ad2      	subs	r2, r2, r3
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	461a      	mov	r2, r3
 80079ca:	6879      	ldr	r1, [r7, #4]
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f001 f8ac 	bl	8008b2a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079d2:	2300      	movs	r3, #0
 80079d4:	2200      	movs	r2, #0
 80079d6:	2100      	movs	r1, #0
 80079d8:	68f8      	ldr	r0, [r7, #12]
 80079da:	f001 fd7d 	bl	80094d8 <USBD_LL_PrepareReceive>
 80079de:	e03f      	b.n	8007a60 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	68da      	ldr	r2, [r3, #12]
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d11c      	bne.n	8007a26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	685a      	ldr	r2, [r3, #4]
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d316      	bcc.n	8007a26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	685a      	ldr	r2, [r3, #4]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d20f      	bcs.n	8007a26 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007a06:	2200      	movs	r2, #0
 8007a08:	2100      	movs	r1, #0
 8007a0a:	68f8      	ldr	r0, [r7, #12]
 8007a0c:	f001 f88d 	bl	8008b2a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a18:	2300      	movs	r3, #0
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	2100      	movs	r1, #0
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f001 fd5a 	bl	80094d8 <USBD_LL_PrepareReceive>
 8007a24:	e01c      	b.n	8007a60 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	2b03      	cmp	r3, #3
 8007a30:	d10f      	bne.n	8007a52 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d009      	beq.n	8007a52 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a52:	2180      	movs	r1, #128	; 0x80
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f001 fc95 	bl	8009384 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f001 f8b7 	bl	8008bce <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d03a      	beq.n	8007ae0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f7ff fe42 	bl	80076f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007a78:	e032      	b.n	8007ae0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007a7a:	7afb      	ldrb	r3, [r7, #11]
 8007a7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	4619      	mov	r1, r3
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f000 f97f 	bl	8007d88 <USBD_CoreFindEP>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a8e:	7dfb      	ldrb	r3, [r7, #23]
 8007a90:	2bff      	cmp	r3, #255	; 0xff
 8007a92:	d025      	beq.n	8007ae0 <USBD_LL_DataInStage+0x15a>
 8007a94:	7dfb      	ldrb	r3, [r7, #23]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d122      	bne.n	8007ae0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	2b03      	cmp	r3, #3
 8007aa4:	d11c      	bne.n	8007ae0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007aa6:	7dfa      	ldrb	r2, [r7, #23]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	32ae      	adds	r2, #174	; 0xae
 8007aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ab0:	695b      	ldr	r3, [r3, #20]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d014      	beq.n	8007ae0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007ab6:	7dfa      	ldrb	r2, [r7, #23]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007abe:	7dfa      	ldrb	r2, [r7, #23]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	32ae      	adds	r2, #174	; 0xae
 8007ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac8:	695b      	ldr	r3, [r3, #20]
 8007aca:	7afa      	ldrb	r2, [r7, #11]
 8007acc:	4611      	mov	r1, r2
 8007ace:	68f8      	ldr	r0, [r7, #12]
 8007ad0:	4798      	blx	r3
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007ad6:	7dbb      	ldrb	r3, [r7, #22]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d001      	beq.n	8007ae0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007adc:	7dbb      	ldrb	r3, [r7, #22]
 8007ade:	e000      	b.n	8007ae2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3718      	adds	r7, #24
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b084      	sub	sp, #16
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2201      	movs	r2, #1
 8007afa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d014      	beq.n	8007b50 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00e      	beq.n	8007b50 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	6852      	ldr	r2, [r2, #4]
 8007b3e:	b2d2      	uxtb	r2, r2
 8007b40:	4611      	mov	r1, r2
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	4798      	blx	r3
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d001      	beq.n	8007b50 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b50:	2340      	movs	r3, #64	; 0x40
 8007b52:	2200      	movs	r2, #0
 8007b54:	2100      	movs	r1, #0
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f001 fbcf 	bl	80092fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2240      	movs	r2, #64	; 0x40
 8007b68:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b6c:	2340      	movs	r3, #64	; 0x40
 8007b6e:	2200      	movs	r2, #0
 8007b70:	2180      	movs	r1, #128	; 0x80
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f001 fbc1 	bl	80092fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2240      	movs	r2, #64	; 0x40
 8007b82:	621a      	str	r2, [r3, #32]

  return ret;
 8007b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007b8e:	b480      	push	{r7}
 8007b90:	b083      	sub	sp, #12
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	460b      	mov	r3, r1
 8007b98:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	78fa      	ldrb	r2, [r7, #3]
 8007b9e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	370c      	adds	r7, #12
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr

08007bae <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007bae:	b480      	push	{r7}
 8007bb0:	b083      	sub	sp, #12
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bbc:	b2da      	uxtb	r2, r3
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2204      	movs	r2, #4
 8007bc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	370c      	adds	r7, #12
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr

08007bda <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007bda:	b480      	push	{r7}
 8007bdc:	b083      	sub	sp, #12
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	2b04      	cmp	r3, #4
 8007bec:	d106      	bne.n	8007bfc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007bf4:	b2da      	uxtb	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	370c      	adds	r7, #12
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr

08007c0a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b082      	sub	sp, #8
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	2b03      	cmp	r3, #3
 8007c1c:	d110      	bne.n	8007c40 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00b      	beq.n	8007c40 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c2e:	69db      	ldr	r3, [r3, #28]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d005      	beq.n	8007c40 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c3a:	69db      	ldr	r3, [r3, #28]
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3708      	adds	r7, #8
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b082      	sub	sp, #8
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
 8007c52:	460b      	mov	r3, r1
 8007c54:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	32ae      	adds	r2, #174	; 0xae
 8007c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d101      	bne.n	8007c6c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	e01c      	b.n	8007ca6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	2b03      	cmp	r3, #3
 8007c76:	d115      	bne.n	8007ca4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	32ae      	adds	r2, #174	; 0xae
 8007c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c86:	6a1b      	ldr	r3, [r3, #32]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00b      	beq.n	8007ca4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	32ae      	adds	r2, #174	; 0xae
 8007c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c9a:	6a1b      	ldr	r3, [r3, #32]
 8007c9c:	78fa      	ldrb	r2, [r7, #3]
 8007c9e:	4611      	mov	r1, r2
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3708      	adds	r7, #8
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b082      	sub	sp, #8
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	32ae      	adds	r2, #174	; 0xae
 8007cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d101      	bne.n	8007cd0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007ccc:	2303      	movs	r3, #3
 8007cce:	e01c      	b.n	8007d0a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	2b03      	cmp	r3, #3
 8007cda:	d115      	bne.n	8007d08 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	32ae      	adds	r2, #174	; 0xae
 8007ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00b      	beq.n	8007d08 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	32ae      	adds	r2, #174	; 0xae
 8007cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d00:	78fa      	ldrb	r2, [r7, #3]
 8007d02:	4611      	mov	r1, r2
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3708      	adds	r7, #8
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b083      	sub	sp, #12
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007d30:	2300      	movs	r3, #0
 8007d32:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00e      	beq.n	8007d64 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	6852      	ldr	r2, [r2, #4]
 8007d52:	b2d2      	uxtb	r2, r2
 8007d54:	4611      	mov	r1, r2
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	4798      	blx	r3
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d001      	beq.n	8007d64 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007d60:	2303      	movs	r3, #3
 8007d62:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b083      	sub	sp, #12
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
 8007d76:	460b      	mov	r3, r1
 8007d78:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007d7a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	460b      	mov	r3, r1
 8007d92:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007d94:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	370c      	adds	r7, #12
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b086      	sub	sp, #24
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
 8007daa:	460b      	mov	r3, r1
 8007dac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007db6:	2300      	movs	r3, #0
 8007db8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	885b      	ldrh	r3, [r3, #2]
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d920      	bls.n	8007e0c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007dd2:	e013      	b.n	8007dfc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007dd4:	f107 030a 	add.w	r3, r7, #10
 8007dd8:	4619      	mov	r1, r3
 8007dda:	6978      	ldr	r0, [r7, #20]
 8007ddc:	f000 f81b 	bl	8007e16 <USBD_GetNextDesc>
 8007de0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	785b      	ldrb	r3, [r3, #1]
 8007de6:	2b05      	cmp	r3, #5
 8007de8:	d108      	bne.n	8007dfc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	789b      	ldrb	r3, [r3, #2]
 8007df2:	78fa      	ldrb	r2, [r7, #3]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d008      	beq.n	8007e0a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	885b      	ldrh	r3, [r3, #2]
 8007e00:	b29a      	uxth	r2, r3
 8007e02:	897b      	ldrh	r3, [r7, #10]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d8e5      	bhi.n	8007dd4 <USBD_GetEpDesc+0x32>
 8007e08:	e000      	b.n	8007e0c <USBD_GetEpDesc+0x6a>
          break;
 8007e0a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007e0c:	693b      	ldr	r3, [r7, #16]
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3718      	adds	r7, #24
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007e16:	b480      	push	{r7}
 8007e18:	b085      	sub	sp, #20
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
 8007e1e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	881a      	ldrh	r2, [r3, #0]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	4413      	add	r3, r2
 8007e30:	b29a      	uxth	r2, r3
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4413      	add	r3, r2
 8007e40:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007e42:	68fb      	ldr	r3, [r7, #12]
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3714      	adds	r7, #20
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b087      	sub	sp, #28
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	3301      	adds	r3, #1
 8007e66:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007e6e:	8a3b      	ldrh	r3, [r7, #16]
 8007e70:	021b      	lsls	r3, r3, #8
 8007e72:	b21a      	sxth	r2, r3
 8007e74:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	b21b      	sxth	r3, r3
 8007e7c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007e7e:	89fb      	ldrh	r3, [r7, #14]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	371c      	adds	r7, #28
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e96:	2300      	movs	r3, #0
 8007e98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ea2:	2b40      	cmp	r3, #64	; 0x40
 8007ea4:	d005      	beq.n	8007eb2 <USBD_StdDevReq+0x26>
 8007ea6:	2b40      	cmp	r3, #64	; 0x40
 8007ea8:	d857      	bhi.n	8007f5a <USBD_StdDevReq+0xce>
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00f      	beq.n	8007ece <USBD_StdDevReq+0x42>
 8007eae:	2b20      	cmp	r3, #32
 8007eb0:	d153      	bne.n	8007f5a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	32ae      	adds	r2, #174	; 0xae
 8007ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	6839      	ldr	r1, [r7, #0]
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	4798      	blx	r3
 8007ec8:	4603      	mov	r3, r0
 8007eca:	73fb      	strb	r3, [r7, #15]
      break;
 8007ecc:	e04a      	b.n	8007f64 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	785b      	ldrb	r3, [r3, #1]
 8007ed2:	2b09      	cmp	r3, #9
 8007ed4:	d83b      	bhi.n	8007f4e <USBD_StdDevReq+0xc2>
 8007ed6:	a201      	add	r2, pc, #4	; (adr r2, 8007edc <USBD_StdDevReq+0x50>)
 8007ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007edc:	08007f31 	.word	0x08007f31
 8007ee0:	08007f45 	.word	0x08007f45
 8007ee4:	08007f4f 	.word	0x08007f4f
 8007ee8:	08007f3b 	.word	0x08007f3b
 8007eec:	08007f4f 	.word	0x08007f4f
 8007ef0:	08007f0f 	.word	0x08007f0f
 8007ef4:	08007f05 	.word	0x08007f05
 8007ef8:	08007f4f 	.word	0x08007f4f
 8007efc:	08007f27 	.word	0x08007f27
 8007f00:	08007f19 	.word	0x08007f19
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007f04:	6839      	ldr	r1, [r7, #0]
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 fa3c 	bl	8008384 <USBD_GetDescriptor>
          break;
 8007f0c:	e024      	b.n	8007f58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007f0e:	6839      	ldr	r1, [r7, #0]
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 fba1 	bl	8008658 <USBD_SetAddress>
          break;
 8007f16:	e01f      	b.n	8007f58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007f18:	6839      	ldr	r1, [r7, #0]
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 fbe0 	bl	80086e0 <USBD_SetConfig>
 8007f20:	4603      	mov	r3, r0
 8007f22:	73fb      	strb	r3, [r7, #15]
          break;
 8007f24:	e018      	b.n	8007f58 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007f26:	6839      	ldr	r1, [r7, #0]
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 fc83 	bl	8008834 <USBD_GetConfig>
          break;
 8007f2e:	e013      	b.n	8007f58 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007f30:	6839      	ldr	r1, [r7, #0]
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 fcb4 	bl	80088a0 <USBD_GetStatus>
          break;
 8007f38:	e00e      	b.n	8007f58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007f3a:	6839      	ldr	r1, [r7, #0]
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 fce3 	bl	8008908 <USBD_SetFeature>
          break;
 8007f42:	e009      	b.n	8007f58 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007f44:	6839      	ldr	r1, [r7, #0]
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 fd07 	bl	800895a <USBD_ClrFeature>
          break;
 8007f4c:	e004      	b.n	8007f58 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007f4e:	6839      	ldr	r1, [r7, #0]
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 fd5e 	bl	8008a12 <USBD_CtlError>
          break;
 8007f56:	bf00      	nop
      }
      break;
 8007f58:	e004      	b.n	8007f64 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007f5a:	6839      	ldr	r1, [r7, #0]
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 fd58 	bl	8008a12 <USBD_CtlError>
      break;
 8007f62:	bf00      	nop
  }

  return ret;
 8007f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop

08007f70 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f86:	2b40      	cmp	r3, #64	; 0x40
 8007f88:	d005      	beq.n	8007f96 <USBD_StdItfReq+0x26>
 8007f8a:	2b40      	cmp	r3, #64	; 0x40
 8007f8c:	d852      	bhi.n	8008034 <USBD_StdItfReq+0xc4>
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <USBD_StdItfReq+0x26>
 8007f92:	2b20      	cmp	r3, #32
 8007f94:	d14e      	bne.n	8008034 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	2b02      	cmp	r3, #2
 8007fa2:	d840      	bhi.n	8008026 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	889b      	ldrh	r3, [r3, #4]
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d836      	bhi.n	800801c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	889b      	ldrh	r3, [r3, #4]
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f7ff fed9 	bl	8007d6e <USBD_CoreFindIF>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007fc0:	7bbb      	ldrb	r3, [r7, #14]
 8007fc2:	2bff      	cmp	r3, #255	; 0xff
 8007fc4:	d01d      	beq.n	8008002 <USBD_StdItfReq+0x92>
 8007fc6:	7bbb      	ldrb	r3, [r7, #14]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d11a      	bne.n	8008002 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007fcc:	7bba      	ldrb	r2, [r7, #14]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	32ae      	adds	r2, #174	; 0xae
 8007fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d00f      	beq.n	8007ffc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007fdc:	7bba      	ldrb	r2, [r7, #14]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007fe4:	7bba      	ldrb	r2, [r7, #14]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	32ae      	adds	r2, #174	; 0xae
 8007fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	6839      	ldr	r1, [r7, #0]
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	4798      	blx	r3
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007ffa:	e004      	b.n	8008006 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008000:	e001      	b.n	8008006 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008002:	2303      	movs	r3, #3
 8008004:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	88db      	ldrh	r3, [r3, #6]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d110      	bne.n	8008030 <USBD_StdItfReq+0xc0>
 800800e:	7bfb      	ldrb	r3, [r7, #15]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d10d      	bne.n	8008030 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 fdc7 	bl	8008ba8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800801a:	e009      	b.n	8008030 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800801c:	6839      	ldr	r1, [r7, #0]
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 fcf7 	bl	8008a12 <USBD_CtlError>
          break;
 8008024:	e004      	b.n	8008030 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008026:	6839      	ldr	r1, [r7, #0]
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 fcf2 	bl	8008a12 <USBD_CtlError>
          break;
 800802e:	e000      	b.n	8008032 <USBD_StdItfReq+0xc2>
          break;
 8008030:	bf00      	nop
      }
      break;
 8008032:	e004      	b.n	800803e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008034:	6839      	ldr	r1, [r7, #0]
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 fceb 	bl	8008a12 <USBD_CtlError>
      break;
 800803c:	bf00      	nop
  }

  return ret;
 800803e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008040:	4618      	mov	r0, r3
 8008042:	3710      	adds	r7, #16
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008052:	2300      	movs	r3, #0
 8008054:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	889b      	ldrh	r3, [r3, #4]
 800805a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008064:	2b40      	cmp	r3, #64	; 0x40
 8008066:	d007      	beq.n	8008078 <USBD_StdEPReq+0x30>
 8008068:	2b40      	cmp	r3, #64	; 0x40
 800806a:	f200 817f 	bhi.w	800836c <USBD_StdEPReq+0x324>
 800806e:	2b00      	cmp	r3, #0
 8008070:	d02a      	beq.n	80080c8 <USBD_StdEPReq+0x80>
 8008072:	2b20      	cmp	r3, #32
 8008074:	f040 817a 	bne.w	800836c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008078:	7bbb      	ldrb	r3, [r7, #14]
 800807a:	4619      	mov	r1, r3
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f7ff fe83 	bl	8007d88 <USBD_CoreFindEP>
 8008082:	4603      	mov	r3, r0
 8008084:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008086:	7b7b      	ldrb	r3, [r7, #13]
 8008088:	2bff      	cmp	r3, #255	; 0xff
 800808a:	f000 8174 	beq.w	8008376 <USBD_StdEPReq+0x32e>
 800808e:	7b7b      	ldrb	r3, [r7, #13]
 8008090:	2b00      	cmp	r3, #0
 8008092:	f040 8170 	bne.w	8008376 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008096:	7b7a      	ldrb	r2, [r7, #13]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800809e:	7b7a      	ldrb	r2, [r7, #13]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	32ae      	adds	r2, #174	; 0xae
 80080a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	f000 8163 	beq.w	8008376 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80080b0:	7b7a      	ldrb	r2, [r7, #13]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	32ae      	adds	r2, #174	; 0xae
 80080b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	6839      	ldr	r1, [r7, #0]
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	4798      	blx	r3
 80080c2:	4603      	mov	r3, r0
 80080c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80080c6:	e156      	b.n	8008376 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	785b      	ldrb	r3, [r3, #1]
 80080cc:	2b03      	cmp	r3, #3
 80080ce:	d008      	beq.n	80080e2 <USBD_StdEPReq+0x9a>
 80080d0:	2b03      	cmp	r3, #3
 80080d2:	f300 8145 	bgt.w	8008360 <USBD_StdEPReq+0x318>
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f000 809b 	beq.w	8008212 <USBD_StdEPReq+0x1ca>
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d03c      	beq.n	800815a <USBD_StdEPReq+0x112>
 80080e0:	e13e      	b.n	8008360 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	2b02      	cmp	r3, #2
 80080ec:	d002      	beq.n	80080f4 <USBD_StdEPReq+0xac>
 80080ee:	2b03      	cmp	r3, #3
 80080f0:	d016      	beq.n	8008120 <USBD_StdEPReq+0xd8>
 80080f2:	e02c      	b.n	800814e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080f4:	7bbb      	ldrb	r3, [r7, #14]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00d      	beq.n	8008116 <USBD_StdEPReq+0xce>
 80080fa:	7bbb      	ldrb	r3, [r7, #14]
 80080fc:	2b80      	cmp	r3, #128	; 0x80
 80080fe:	d00a      	beq.n	8008116 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008100:	7bbb      	ldrb	r3, [r7, #14]
 8008102:	4619      	mov	r1, r3
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f001 f93d 	bl	8009384 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800810a:	2180      	movs	r1, #128	; 0x80
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f001 f939 	bl	8009384 <USBD_LL_StallEP>
 8008112:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008114:	e020      	b.n	8008158 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008116:	6839      	ldr	r1, [r7, #0]
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fc7a 	bl	8008a12 <USBD_CtlError>
              break;
 800811e:	e01b      	b.n	8008158 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	885b      	ldrh	r3, [r3, #2]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d10e      	bne.n	8008146 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008128:	7bbb      	ldrb	r3, [r7, #14]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00b      	beq.n	8008146 <USBD_StdEPReq+0xfe>
 800812e:	7bbb      	ldrb	r3, [r7, #14]
 8008130:	2b80      	cmp	r3, #128	; 0x80
 8008132:	d008      	beq.n	8008146 <USBD_StdEPReq+0xfe>
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	88db      	ldrh	r3, [r3, #6]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d104      	bne.n	8008146 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800813c:	7bbb      	ldrb	r3, [r7, #14]
 800813e:	4619      	mov	r1, r3
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f001 f91f 	bl	8009384 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 fd2e 	bl	8008ba8 <USBD_CtlSendStatus>

              break;
 800814c:	e004      	b.n	8008158 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800814e:	6839      	ldr	r1, [r7, #0]
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 fc5e 	bl	8008a12 <USBD_CtlError>
              break;
 8008156:	bf00      	nop
          }
          break;
 8008158:	e107      	b.n	800836a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008160:	b2db      	uxtb	r3, r3
 8008162:	2b02      	cmp	r3, #2
 8008164:	d002      	beq.n	800816c <USBD_StdEPReq+0x124>
 8008166:	2b03      	cmp	r3, #3
 8008168:	d016      	beq.n	8008198 <USBD_StdEPReq+0x150>
 800816a:	e04b      	b.n	8008204 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800816c:	7bbb      	ldrb	r3, [r7, #14]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00d      	beq.n	800818e <USBD_StdEPReq+0x146>
 8008172:	7bbb      	ldrb	r3, [r7, #14]
 8008174:	2b80      	cmp	r3, #128	; 0x80
 8008176:	d00a      	beq.n	800818e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008178:	7bbb      	ldrb	r3, [r7, #14]
 800817a:	4619      	mov	r1, r3
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f001 f901 	bl	8009384 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008182:	2180      	movs	r1, #128	; 0x80
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f001 f8fd 	bl	8009384 <USBD_LL_StallEP>
 800818a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800818c:	e040      	b.n	8008210 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800818e:	6839      	ldr	r1, [r7, #0]
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 fc3e 	bl	8008a12 <USBD_CtlError>
              break;
 8008196:	e03b      	b.n	8008210 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	885b      	ldrh	r3, [r3, #2]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d136      	bne.n	800820e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80081a0:	7bbb      	ldrb	r3, [r7, #14]
 80081a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d004      	beq.n	80081b4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80081aa:	7bbb      	ldrb	r3, [r7, #14]
 80081ac:	4619      	mov	r1, r3
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f001 f907 	bl	80093c2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 fcf7 	bl	8008ba8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80081ba:	7bbb      	ldrb	r3, [r7, #14]
 80081bc:	4619      	mov	r1, r3
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f7ff fde2 	bl	8007d88 <USBD_CoreFindEP>
 80081c4:	4603      	mov	r3, r0
 80081c6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081c8:	7b7b      	ldrb	r3, [r7, #13]
 80081ca:	2bff      	cmp	r3, #255	; 0xff
 80081cc:	d01f      	beq.n	800820e <USBD_StdEPReq+0x1c6>
 80081ce:	7b7b      	ldrb	r3, [r7, #13]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d11c      	bne.n	800820e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80081d4:	7b7a      	ldrb	r2, [r7, #13]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80081dc:	7b7a      	ldrb	r2, [r7, #13]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	32ae      	adds	r2, #174	; 0xae
 80081e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d010      	beq.n	800820e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80081ec:	7b7a      	ldrb	r2, [r7, #13]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	32ae      	adds	r2, #174	; 0xae
 80081f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	6839      	ldr	r1, [r7, #0]
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	4798      	blx	r3
 80081fe:	4603      	mov	r3, r0
 8008200:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008202:	e004      	b.n	800820e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008204:	6839      	ldr	r1, [r7, #0]
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 fc03 	bl	8008a12 <USBD_CtlError>
              break;
 800820c:	e000      	b.n	8008210 <USBD_StdEPReq+0x1c8>
              break;
 800820e:	bf00      	nop
          }
          break;
 8008210:	e0ab      	b.n	800836a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008218:	b2db      	uxtb	r3, r3
 800821a:	2b02      	cmp	r3, #2
 800821c:	d002      	beq.n	8008224 <USBD_StdEPReq+0x1dc>
 800821e:	2b03      	cmp	r3, #3
 8008220:	d032      	beq.n	8008288 <USBD_StdEPReq+0x240>
 8008222:	e097      	b.n	8008354 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008224:	7bbb      	ldrb	r3, [r7, #14]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d007      	beq.n	800823a <USBD_StdEPReq+0x1f2>
 800822a:	7bbb      	ldrb	r3, [r7, #14]
 800822c:	2b80      	cmp	r3, #128	; 0x80
 800822e:	d004      	beq.n	800823a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008230:	6839      	ldr	r1, [r7, #0]
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 fbed 	bl	8008a12 <USBD_CtlError>
                break;
 8008238:	e091      	b.n	800835e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800823a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800823e:	2b00      	cmp	r3, #0
 8008240:	da0b      	bge.n	800825a <USBD_StdEPReq+0x212>
 8008242:	7bbb      	ldrb	r3, [r7, #14]
 8008244:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008248:	4613      	mov	r3, r2
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	4413      	add	r3, r2
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	3310      	adds	r3, #16
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	4413      	add	r3, r2
 8008256:	3304      	adds	r3, #4
 8008258:	e00b      	b.n	8008272 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800825a:	7bbb      	ldrb	r3, [r7, #14]
 800825c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008260:	4613      	mov	r3, r2
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	4413      	add	r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	4413      	add	r3, r2
 8008270:	3304      	adds	r3, #4
 8008272:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	2200      	movs	r2, #0
 8008278:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	2202      	movs	r2, #2
 800827e:	4619      	mov	r1, r3
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 fc37 	bl	8008af4 <USBD_CtlSendData>
              break;
 8008286:	e06a      	b.n	800835e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008288:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800828c:	2b00      	cmp	r3, #0
 800828e:	da11      	bge.n	80082b4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008290:	7bbb      	ldrb	r3, [r7, #14]
 8008292:	f003 020f 	and.w	r2, r3, #15
 8008296:	6879      	ldr	r1, [r7, #4]
 8008298:	4613      	mov	r3, r2
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	4413      	add	r3, r2
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	440b      	add	r3, r1
 80082a2:	3324      	adds	r3, #36	; 0x24
 80082a4:	881b      	ldrh	r3, [r3, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d117      	bne.n	80082da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80082aa:	6839      	ldr	r1, [r7, #0]
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 fbb0 	bl	8008a12 <USBD_CtlError>
                  break;
 80082b2:	e054      	b.n	800835e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80082b4:	7bbb      	ldrb	r3, [r7, #14]
 80082b6:	f003 020f 	and.w	r2, r3, #15
 80082ba:	6879      	ldr	r1, [r7, #4]
 80082bc:	4613      	mov	r3, r2
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	4413      	add	r3, r2
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	440b      	add	r3, r1
 80082c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80082ca:	881b      	ldrh	r3, [r3, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d104      	bne.n	80082da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80082d0:	6839      	ldr	r1, [r7, #0]
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 fb9d 	bl	8008a12 <USBD_CtlError>
                  break;
 80082d8:	e041      	b.n	800835e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	da0b      	bge.n	80082fa <USBD_StdEPReq+0x2b2>
 80082e2:	7bbb      	ldrb	r3, [r7, #14]
 80082e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082e8:	4613      	mov	r3, r2
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	4413      	add	r3, r2
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	3310      	adds	r3, #16
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	4413      	add	r3, r2
 80082f6:	3304      	adds	r3, #4
 80082f8:	e00b      	b.n	8008312 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80082fa:	7bbb      	ldrb	r3, [r7, #14]
 80082fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008300:	4613      	mov	r3, r2
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	4413      	add	r3, r2
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	4413      	add	r3, r2
 8008310:	3304      	adds	r3, #4
 8008312:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008314:	7bbb      	ldrb	r3, [r7, #14]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d002      	beq.n	8008320 <USBD_StdEPReq+0x2d8>
 800831a:	7bbb      	ldrb	r3, [r7, #14]
 800831c:	2b80      	cmp	r3, #128	; 0x80
 800831e:	d103      	bne.n	8008328 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	2200      	movs	r2, #0
 8008324:	601a      	str	r2, [r3, #0]
 8008326:	e00e      	b.n	8008346 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008328:	7bbb      	ldrb	r3, [r7, #14]
 800832a:	4619      	mov	r1, r3
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f001 f867 	bl	8009400 <USBD_LL_IsStallEP>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d003      	beq.n	8008340 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	2201      	movs	r2, #1
 800833c:	601a      	str	r2, [r3, #0]
 800833e:	e002      	b.n	8008346 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	2200      	movs	r2, #0
 8008344:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	2202      	movs	r2, #2
 800834a:	4619      	mov	r1, r3
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 fbd1 	bl	8008af4 <USBD_CtlSendData>
              break;
 8008352:	e004      	b.n	800835e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008354:	6839      	ldr	r1, [r7, #0]
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 fb5b 	bl	8008a12 <USBD_CtlError>
              break;
 800835c:	bf00      	nop
          }
          break;
 800835e:	e004      	b.n	800836a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008360:	6839      	ldr	r1, [r7, #0]
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fb55 	bl	8008a12 <USBD_CtlError>
          break;
 8008368:	bf00      	nop
      }
      break;
 800836a:	e005      	b.n	8008378 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800836c:	6839      	ldr	r1, [r7, #0]
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fb4f 	bl	8008a12 <USBD_CtlError>
      break;
 8008374:	e000      	b.n	8008378 <USBD_StdEPReq+0x330>
      break;
 8008376:	bf00      	nop
  }

  return ret;
 8008378:	7bfb      	ldrb	r3, [r7, #15]
}
 800837a:	4618      	mov	r0, r3
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
	...

08008384 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800838e:	2300      	movs	r3, #0
 8008390:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008392:	2300      	movs	r3, #0
 8008394:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008396:	2300      	movs	r3, #0
 8008398:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	885b      	ldrh	r3, [r3, #2]
 800839e:	0a1b      	lsrs	r3, r3, #8
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	3b01      	subs	r3, #1
 80083a4:	2b06      	cmp	r3, #6
 80083a6:	f200 8128 	bhi.w	80085fa <USBD_GetDescriptor+0x276>
 80083aa:	a201      	add	r2, pc, #4	; (adr r2, 80083b0 <USBD_GetDescriptor+0x2c>)
 80083ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b0:	080083cd 	.word	0x080083cd
 80083b4:	080083e5 	.word	0x080083e5
 80083b8:	08008425 	.word	0x08008425
 80083bc:	080085fb 	.word	0x080085fb
 80083c0:	080085fb 	.word	0x080085fb
 80083c4:	0800859b 	.word	0x0800859b
 80083c8:	080085c7 	.word	0x080085c7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	7c12      	ldrb	r2, [r2, #16]
 80083d8:	f107 0108 	add.w	r1, r7, #8
 80083dc:	4610      	mov	r0, r2
 80083de:	4798      	blx	r3
 80083e0:	60f8      	str	r0, [r7, #12]
      break;
 80083e2:	e112      	b.n	800860a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	7c1b      	ldrb	r3, [r3, #16]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d10d      	bne.n	8008408 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f4:	f107 0208 	add.w	r2, r7, #8
 80083f8:	4610      	mov	r0, r2
 80083fa:	4798      	blx	r3
 80083fc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	3301      	adds	r3, #1
 8008402:	2202      	movs	r2, #2
 8008404:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008406:	e100      	b.n	800860a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800840e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008410:	f107 0208 	add.w	r2, r7, #8
 8008414:	4610      	mov	r0, r2
 8008416:	4798      	blx	r3
 8008418:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	3301      	adds	r3, #1
 800841e:	2202      	movs	r2, #2
 8008420:	701a      	strb	r2, [r3, #0]
      break;
 8008422:	e0f2      	b.n	800860a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	885b      	ldrh	r3, [r3, #2]
 8008428:	b2db      	uxtb	r3, r3
 800842a:	2b05      	cmp	r3, #5
 800842c:	f200 80ac 	bhi.w	8008588 <USBD_GetDescriptor+0x204>
 8008430:	a201      	add	r2, pc, #4	; (adr r2, 8008438 <USBD_GetDescriptor+0xb4>)
 8008432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008436:	bf00      	nop
 8008438:	08008451 	.word	0x08008451
 800843c:	08008485 	.word	0x08008485
 8008440:	080084b9 	.word	0x080084b9
 8008444:	080084ed 	.word	0x080084ed
 8008448:	08008521 	.word	0x08008521
 800844c:	08008555 	.word	0x08008555
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d00b      	beq.n	8008474 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	7c12      	ldrb	r2, [r2, #16]
 8008468:	f107 0108 	add.w	r1, r7, #8
 800846c:	4610      	mov	r0, r2
 800846e:	4798      	blx	r3
 8008470:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008472:	e091      	b.n	8008598 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008474:	6839      	ldr	r1, [r7, #0]
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 facb 	bl	8008a12 <USBD_CtlError>
            err++;
 800847c:	7afb      	ldrb	r3, [r7, #11]
 800847e:	3301      	adds	r3, #1
 8008480:	72fb      	strb	r3, [r7, #11]
          break;
 8008482:	e089      	b.n	8008598 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d00b      	beq.n	80084a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	7c12      	ldrb	r2, [r2, #16]
 800849c:	f107 0108 	add.w	r1, r7, #8
 80084a0:	4610      	mov	r0, r2
 80084a2:	4798      	blx	r3
 80084a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084a6:	e077      	b.n	8008598 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084a8:	6839      	ldr	r1, [r7, #0]
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 fab1 	bl	8008a12 <USBD_CtlError>
            err++;
 80084b0:	7afb      	ldrb	r3, [r7, #11]
 80084b2:	3301      	adds	r3, #1
 80084b4:	72fb      	strb	r3, [r7, #11]
          break;
 80084b6:	e06f      	b.n	8008598 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d00b      	beq.n	80084dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	7c12      	ldrb	r2, [r2, #16]
 80084d0:	f107 0108 	add.w	r1, r7, #8
 80084d4:	4610      	mov	r0, r2
 80084d6:	4798      	blx	r3
 80084d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084da:	e05d      	b.n	8008598 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084dc:	6839      	ldr	r1, [r7, #0]
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 fa97 	bl	8008a12 <USBD_CtlError>
            err++;
 80084e4:	7afb      	ldrb	r3, [r7, #11]
 80084e6:	3301      	adds	r3, #1
 80084e8:	72fb      	strb	r3, [r7, #11]
          break;
 80084ea:	e055      	b.n	8008598 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d00b      	beq.n	8008510 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084fe:	691b      	ldr	r3, [r3, #16]
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	7c12      	ldrb	r2, [r2, #16]
 8008504:	f107 0108 	add.w	r1, r7, #8
 8008508:	4610      	mov	r0, r2
 800850a:	4798      	blx	r3
 800850c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800850e:	e043      	b.n	8008598 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008510:	6839      	ldr	r1, [r7, #0]
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 fa7d 	bl	8008a12 <USBD_CtlError>
            err++;
 8008518:	7afb      	ldrb	r3, [r7, #11]
 800851a:	3301      	adds	r3, #1
 800851c:	72fb      	strb	r3, [r7, #11]
          break;
 800851e:	e03b      	b.n	8008598 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008526:	695b      	ldr	r3, [r3, #20]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d00b      	beq.n	8008544 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008532:	695b      	ldr	r3, [r3, #20]
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	7c12      	ldrb	r2, [r2, #16]
 8008538:	f107 0108 	add.w	r1, r7, #8
 800853c:	4610      	mov	r0, r2
 800853e:	4798      	blx	r3
 8008540:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008542:	e029      	b.n	8008598 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008544:	6839      	ldr	r1, [r7, #0]
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 fa63 	bl	8008a12 <USBD_CtlError>
            err++;
 800854c:	7afb      	ldrb	r3, [r7, #11]
 800854e:	3301      	adds	r3, #1
 8008550:	72fb      	strb	r3, [r7, #11]
          break;
 8008552:	e021      	b.n	8008598 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800855a:	699b      	ldr	r3, [r3, #24]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00b      	beq.n	8008578 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008566:	699b      	ldr	r3, [r3, #24]
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	7c12      	ldrb	r2, [r2, #16]
 800856c:	f107 0108 	add.w	r1, r7, #8
 8008570:	4610      	mov	r0, r2
 8008572:	4798      	blx	r3
 8008574:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008576:	e00f      	b.n	8008598 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008578:	6839      	ldr	r1, [r7, #0]
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 fa49 	bl	8008a12 <USBD_CtlError>
            err++;
 8008580:	7afb      	ldrb	r3, [r7, #11]
 8008582:	3301      	adds	r3, #1
 8008584:	72fb      	strb	r3, [r7, #11]
          break;
 8008586:	e007      	b.n	8008598 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008588:	6839      	ldr	r1, [r7, #0]
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 fa41 	bl	8008a12 <USBD_CtlError>
          err++;
 8008590:	7afb      	ldrb	r3, [r7, #11]
 8008592:	3301      	adds	r3, #1
 8008594:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008596:	bf00      	nop
      }
      break;
 8008598:	e037      	b.n	800860a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	7c1b      	ldrb	r3, [r3, #16]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d109      	bne.n	80085b6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085aa:	f107 0208 	add.w	r2, r7, #8
 80085ae:	4610      	mov	r0, r2
 80085b0:	4798      	blx	r3
 80085b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80085b4:	e029      	b.n	800860a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80085b6:	6839      	ldr	r1, [r7, #0]
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 fa2a 	bl	8008a12 <USBD_CtlError>
        err++;
 80085be:	7afb      	ldrb	r3, [r7, #11]
 80085c0:	3301      	adds	r3, #1
 80085c2:	72fb      	strb	r3, [r7, #11]
      break;
 80085c4:	e021      	b.n	800860a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	7c1b      	ldrb	r3, [r3, #16]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d10d      	bne.n	80085ea <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085d6:	f107 0208 	add.w	r2, r7, #8
 80085da:	4610      	mov	r0, r2
 80085dc:	4798      	blx	r3
 80085de:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	3301      	adds	r3, #1
 80085e4:	2207      	movs	r2, #7
 80085e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80085e8:	e00f      	b.n	800860a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80085ea:	6839      	ldr	r1, [r7, #0]
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 fa10 	bl	8008a12 <USBD_CtlError>
        err++;
 80085f2:	7afb      	ldrb	r3, [r7, #11]
 80085f4:	3301      	adds	r3, #1
 80085f6:	72fb      	strb	r3, [r7, #11]
      break;
 80085f8:	e007      	b.n	800860a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80085fa:	6839      	ldr	r1, [r7, #0]
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 fa08 	bl	8008a12 <USBD_CtlError>
      err++;
 8008602:	7afb      	ldrb	r3, [r7, #11]
 8008604:	3301      	adds	r3, #1
 8008606:	72fb      	strb	r3, [r7, #11]
      break;
 8008608:	bf00      	nop
  }

  if (err != 0U)
 800860a:	7afb      	ldrb	r3, [r7, #11]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d11e      	bne.n	800864e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	88db      	ldrh	r3, [r3, #6]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d016      	beq.n	8008646 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008618:	893b      	ldrh	r3, [r7, #8]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00e      	beq.n	800863c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	88da      	ldrh	r2, [r3, #6]
 8008622:	893b      	ldrh	r3, [r7, #8]
 8008624:	4293      	cmp	r3, r2
 8008626:	bf28      	it	cs
 8008628:	4613      	movcs	r3, r2
 800862a:	b29b      	uxth	r3, r3
 800862c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800862e:	893b      	ldrh	r3, [r7, #8]
 8008630:	461a      	mov	r2, r3
 8008632:	68f9      	ldr	r1, [r7, #12]
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 fa5d 	bl	8008af4 <USBD_CtlSendData>
 800863a:	e009      	b.n	8008650 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800863c:	6839      	ldr	r1, [r7, #0]
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f9e7 	bl	8008a12 <USBD_CtlError>
 8008644:	e004      	b.n	8008650 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 faae 	bl	8008ba8 <USBD_CtlSendStatus>
 800864c:	e000      	b.n	8008650 <USBD_GetDescriptor+0x2cc>
    return;
 800864e:	bf00      	nop
  }
}
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop

08008658 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	889b      	ldrh	r3, [r3, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d131      	bne.n	80086ce <USBD_SetAddress+0x76>
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	88db      	ldrh	r3, [r3, #6]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d12d      	bne.n	80086ce <USBD_SetAddress+0x76>
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	885b      	ldrh	r3, [r3, #2]
 8008676:	2b7f      	cmp	r3, #127	; 0x7f
 8008678:	d829      	bhi.n	80086ce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	885b      	ldrh	r3, [r3, #2]
 800867e:	b2db      	uxtb	r3, r3
 8008680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008684:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800868c:	b2db      	uxtb	r3, r3
 800868e:	2b03      	cmp	r3, #3
 8008690:	d104      	bne.n	800869c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008692:	6839      	ldr	r1, [r7, #0]
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 f9bc 	bl	8008a12 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800869a:	e01d      	b.n	80086d8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	7bfa      	ldrb	r2, [r7, #15]
 80086a0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80086a4:	7bfb      	ldrb	r3, [r7, #15]
 80086a6:	4619      	mov	r1, r3
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 fed5 	bl	8009458 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 fa7a 	bl	8008ba8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80086b4:	7bfb      	ldrb	r3, [r7, #15]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d004      	beq.n	80086c4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2202      	movs	r2, #2
 80086be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086c2:	e009      	b.n	80086d8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086cc:	e004      	b.n	80086d8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80086ce:	6839      	ldr	r1, [r7, #0]
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 f99e 	bl	8008a12 <USBD_CtlError>
  }
}
 80086d6:	bf00      	nop
 80086d8:	bf00      	nop
 80086da:	3710      	adds	r7, #16
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086ea:	2300      	movs	r3, #0
 80086ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	885b      	ldrh	r3, [r3, #2]
 80086f2:	b2da      	uxtb	r2, r3
 80086f4:	4b4e      	ldr	r3, [pc, #312]	; (8008830 <USBD_SetConfig+0x150>)
 80086f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80086f8:	4b4d      	ldr	r3, [pc, #308]	; (8008830 <USBD_SetConfig+0x150>)
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d905      	bls.n	800870c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008700:	6839      	ldr	r1, [r7, #0]
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 f985 	bl	8008a12 <USBD_CtlError>
    return USBD_FAIL;
 8008708:	2303      	movs	r3, #3
 800870a:	e08c      	b.n	8008826 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008712:	b2db      	uxtb	r3, r3
 8008714:	2b02      	cmp	r3, #2
 8008716:	d002      	beq.n	800871e <USBD_SetConfig+0x3e>
 8008718:	2b03      	cmp	r3, #3
 800871a:	d029      	beq.n	8008770 <USBD_SetConfig+0x90>
 800871c:	e075      	b.n	800880a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800871e:	4b44      	ldr	r3, [pc, #272]	; (8008830 <USBD_SetConfig+0x150>)
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d020      	beq.n	8008768 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008726:	4b42      	ldr	r3, [pc, #264]	; (8008830 <USBD_SetConfig+0x150>)
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	461a      	mov	r2, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008730:	4b3f      	ldr	r3, [pc, #252]	; (8008830 <USBD_SetConfig+0x150>)
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	4619      	mov	r1, r3
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f7fe ffe7 	bl	800770a <USBD_SetClassConfig>
 800873c:	4603      	mov	r3, r0
 800873e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008740:	7bfb      	ldrb	r3, [r7, #15]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d008      	beq.n	8008758 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008746:	6839      	ldr	r1, [r7, #0]
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 f962 	bl	8008a12 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2202      	movs	r2, #2
 8008752:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008756:	e065      	b.n	8008824 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 fa25 	bl	8008ba8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2203      	movs	r2, #3
 8008762:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008766:	e05d      	b.n	8008824 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 fa1d 	bl	8008ba8 <USBD_CtlSendStatus>
      break;
 800876e:	e059      	b.n	8008824 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008770:	4b2f      	ldr	r3, [pc, #188]	; (8008830 <USBD_SetConfig+0x150>)
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d112      	bne.n	800879e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2202      	movs	r2, #2
 800877c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008780:	4b2b      	ldr	r3, [pc, #172]	; (8008830 <USBD_SetConfig+0x150>)
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	461a      	mov	r2, r3
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800878a:	4b29      	ldr	r3, [pc, #164]	; (8008830 <USBD_SetConfig+0x150>)
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	4619      	mov	r1, r3
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f7fe ffd6 	bl	8007742 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 fa06 	bl	8008ba8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800879c:	e042      	b.n	8008824 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800879e:	4b24      	ldr	r3, [pc, #144]	; (8008830 <USBD_SetConfig+0x150>)
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	461a      	mov	r2, r3
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d02a      	beq.n	8008802 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	4619      	mov	r1, r3
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f7fe ffc4 	bl	8007742 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80087ba:	4b1d      	ldr	r3, [pc, #116]	; (8008830 <USBD_SetConfig+0x150>)
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	461a      	mov	r2, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80087c4:	4b1a      	ldr	r3, [pc, #104]	; (8008830 <USBD_SetConfig+0x150>)
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	4619      	mov	r1, r3
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f7fe ff9d 	bl	800770a <USBD_SetClassConfig>
 80087d0:	4603      	mov	r3, r0
 80087d2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80087d4:	7bfb      	ldrb	r3, [r7, #15]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00f      	beq.n	80087fa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80087da:	6839      	ldr	r1, [r7, #0]
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 f918 	bl	8008a12 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	4619      	mov	r1, r3
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f7fe ffa9 	bl	8007742 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2202      	movs	r2, #2
 80087f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80087f8:	e014      	b.n	8008824 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 f9d4 	bl	8008ba8 <USBD_CtlSendStatus>
      break;
 8008800:	e010      	b.n	8008824 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f9d0 	bl	8008ba8 <USBD_CtlSendStatus>
      break;
 8008808:	e00c      	b.n	8008824 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800880a:	6839      	ldr	r1, [r7, #0]
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 f900 	bl	8008a12 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008812:	4b07      	ldr	r3, [pc, #28]	; (8008830 <USBD_SetConfig+0x150>)
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	4619      	mov	r1, r3
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f7fe ff92 	bl	8007742 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800881e:	2303      	movs	r3, #3
 8008820:	73fb      	strb	r3, [r7, #15]
      break;
 8008822:	bf00      	nop
  }

  return ret;
 8008824:	7bfb      	ldrb	r3, [r7, #15]
}
 8008826:	4618      	mov	r0, r3
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	20000420 	.word	0x20000420

08008834 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	88db      	ldrh	r3, [r3, #6]
 8008842:	2b01      	cmp	r3, #1
 8008844:	d004      	beq.n	8008850 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008846:	6839      	ldr	r1, [r7, #0]
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 f8e2 	bl	8008a12 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800884e:	e023      	b.n	8008898 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008856:	b2db      	uxtb	r3, r3
 8008858:	2b02      	cmp	r3, #2
 800885a:	dc02      	bgt.n	8008862 <USBD_GetConfig+0x2e>
 800885c:	2b00      	cmp	r3, #0
 800885e:	dc03      	bgt.n	8008868 <USBD_GetConfig+0x34>
 8008860:	e015      	b.n	800888e <USBD_GetConfig+0x5a>
 8008862:	2b03      	cmp	r3, #3
 8008864:	d00b      	beq.n	800887e <USBD_GetConfig+0x4a>
 8008866:	e012      	b.n	800888e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	3308      	adds	r3, #8
 8008872:	2201      	movs	r2, #1
 8008874:	4619      	mov	r1, r3
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 f93c 	bl	8008af4 <USBD_CtlSendData>
        break;
 800887c:	e00c      	b.n	8008898 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	3304      	adds	r3, #4
 8008882:	2201      	movs	r2, #1
 8008884:	4619      	mov	r1, r3
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 f934 	bl	8008af4 <USBD_CtlSendData>
        break;
 800888c:	e004      	b.n	8008898 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800888e:	6839      	ldr	r1, [r7, #0]
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 f8be 	bl	8008a12 <USBD_CtlError>
        break;
 8008896:	bf00      	nop
}
 8008898:	bf00      	nop
 800889a:	3708      	adds	r7, #8
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	3b01      	subs	r3, #1
 80088b4:	2b02      	cmp	r3, #2
 80088b6:	d81e      	bhi.n	80088f6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	88db      	ldrh	r3, [r3, #6]
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d004      	beq.n	80088ca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80088c0:	6839      	ldr	r1, [r7, #0]
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 f8a5 	bl	8008a12 <USBD_CtlError>
        break;
 80088c8:	e01a      	b.n	8008900 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2201      	movs	r2, #1
 80088ce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d005      	beq.n	80088e6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	f043 0202 	orr.w	r2, r3, #2
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	330c      	adds	r3, #12
 80088ea:	2202      	movs	r2, #2
 80088ec:	4619      	mov	r1, r3
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 f900 	bl	8008af4 <USBD_CtlSendData>
      break;
 80088f4:	e004      	b.n	8008900 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80088f6:	6839      	ldr	r1, [r7, #0]
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 f88a 	bl	8008a12 <USBD_CtlError>
      break;
 80088fe:	bf00      	nop
  }
}
 8008900:	bf00      	nop
 8008902:	3708      	adds	r7, #8
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	885b      	ldrh	r3, [r3, #2]
 8008916:	2b01      	cmp	r3, #1
 8008918:	d107      	bne.n	800892a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2201      	movs	r2, #1
 800891e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 f940 	bl	8008ba8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008928:	e013      	b.n	8008952 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	885b      	ldrh	r3, [r3, #2]
 800892e:	2b02      	cmp	r3, #2
 8008930:	d10b      	bne.n	800894a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	889b      	ldrh	r3, [r3, #4]
 8008936:	0a1b      	lsrs	r3, r3, #8
 8008938:	b29b      	uxth	r3, r3
 800893a:	b2da      	uxtb	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 f930 	bl	8008ba8 <USBD_CtlSendStatus>
}
 8008948:	e003      	b.n	8008952 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800894a:	6839      	ldr	r1, [r7, #0]
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 f860 	bl	8008a12 <USBD_CtlError>
}
 8008952:	bf00      	nop
 8008954:	3708      	adds	r7, #8
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b082      	sub	sp, #8
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
 8008962:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800896a:	b2db      	uxtb	r3, r3
 800896c:	3b01      	subs	r3, #1
 800896e:	2b02      	cmp	r3, #2
 8008970:	d80b      	bhi.n	800898a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	885b      	ldrh	r3, [r3, #2]
 8008976:	2b01      	cmp	r3, #1
 8008978:	d10c      	bne.n	8008994 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 f910 	bl	8008ba8 <USBD_CtlSendStatus>
      }
      break;
 8008988:	e004      	b.n	8008994 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800898a:	6839      	ldr	r1, [r7, #0]
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 f840 	bl	8008a12 <USBD_CtlError>
      break;
 8008992:	e000      	b.n	8008996 <USBD_ClrFeature+0x3c>
      break;
 8008994:	bf00      	nop
  }
}
 8008996:	bf00      	nop
 8008998:	3708      	adds	r7, #8
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b084      	sub	sp, #16
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
 80089a6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	781a      	ldrb	r2, [r3, #0]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	3301      	adds	r3, #1
 80089b8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	781a      	ldrb	r2, [r3, #0]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	3301      	adds	r3, #1
 80089c6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f7ff fa41 	bl	8007e50 <SWAPBYTE>
 80089ce:	4603      	mov	r3, r0
 80089d0:	461a      	mov	r2, r3
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	3301      	adds	r3, #1
 80089da:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	3301      	adds	r3, #1
 80089e0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80089e2:	68f8      	ldr	r0, [r7, #12]
 80089e4:	f7ff fa34 	bl	8007e50 <SWAPBYTE>
 80089e8:	4603      	mov	r3, r0
 80089ea:	461a      	mov	r2, r3
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	3301      	adds	r3, #1
 80089f4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	3301      	adds	r3, #1
 80089fa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f7ff fa27 	bl	8007e50 <SWAPBYTE>
 8008a02:	4603      	mov	r3, r0
 8008a04:	461a      	mov	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	80da      	strh	r2, [r3, #6]
}
 8008a0a:	bf00      	nop
 8008a0c:	3710      	adds	r7, #16
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}

08008a12 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b082      	sub	sp, #8
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
 8008a1a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a1c:	2180      	movs	r1, #128	; 0x80
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 fcb0 	bl	8009384 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008a24:	2100      	movs	r1, #0
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 fcac 	bl	8009384 <USBD_LL_StallEP>
}
 8008a2c:	bf00      	nop
 8008a2e:	3708      	adds	r7, #8
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b086      	sub	sp, #24
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008a40:	2300      	movs	r3, #0
 8008a42:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d036      	beq.n	8008ab8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008a4e:	6938      	ldr	r0, [r7, #16]
 8008a50:	f000 f836 	bl	8008ac0 <USBD_GetLen>
 8008a54:	4603      	mov	r3, r0
 8008a56:	3301      	adds	r3, #1
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	005b      	lsls	r3, r3, #1
 8008a5c:	b29a      	uxth	r2, r3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008a62:	7dfb      	ldrb	r3, [r7, #23]
 8008a64:	68ba      	ldr	r2, [r7, #8]
 8008a66:	4413      	add	r3, r2
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	7812      	ldrb	r2, [r2, #0]
 8008a6c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008a6e:	7dfb      	ldrb	r3, [r7, #23]
 8008a70:	3301      	adds	r3, #1
 8008a72:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008a74:	7dfb      	ldrb	r3, [r7, #23]
 8008a76:	68ba      	ldr	r2, [r7, #8]
 8008a78:	4413      	add	r3, r2
 8008a7a:	2203      	movs	r2, #3
 8008a7c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008a7e:	7dfb      	ldrb	r3, [r7, #23]
 8008a80:	3301      	adds	r3, #1
 8008a82:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008a84:	e013      	b.n	8008aae <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008a86:	7dfb      	ldrb	r3, [r7, #23]
 8008a88:	68ba      	ldr	r2, [r7, #8]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	693a      	ldr	r2, [r7, #16]
 8008a8e:	7812      	ldrb	r2, [r2, #0]
 8008a90:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	3301      	adds	r3, #1
 8008a96:	613b      	str	r3, [r7, #16]
    idx++;
 8008a98:	7dfb      	ldrb	r3, [r7, #23]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008a9e:	7dfb      	ldrb	r3, [r7, #23]
 8008aa0:	68ba      	ldr	r2, [r7, #8]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	701a      	strb	r2, [r3, #0]
    idx++;
 8008aa8:	7dfb      	ldrb	r3, [r7, #23]
 8008aaa:	3301      	adds	r3, #1
 8008aac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d1e7      	bne.n	8008a86 <USBD_GetString+0x52>
 8008ab6:	e000      	b.n	8008aba <USBD_GetString+0x86>
    return;
 8008ab8:	bf00      	nop
  }
}
 8008aba:	3718      	adds	r7, #24
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b085      	sub	sp, #20
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008ad0:	e005      	b.n	8008ade <USBD_GetLen+0x1e>
  {
    len++;
 8008ad2:	7bfb      	ldrb	r3, [r7, #15]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	3301      	adds	r3, #1
 8008adc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1f5      	bne.n	8008ad2 <USBD_GetLen+0x12>
  }

  return len;
 8008ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3714      	adds	r7, #20
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2202      	movs	r2, #2
 8008b04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	68ba      	ldr	r2, [r7, #8]
 8008b18:	2100      	movs	r1, #0
 8008b1a:	68f8      	ldr	r0, [r7, #12]
 8008b1c:	f000 fcbb 	bl	8009496 <USBD_LL_Transmit>

  return USBD_OK;
 8008b20:	2300      	movs	r3, #0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b084      	sub	sp, #16
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	60f8      	str	r0, [r7, #12]
 8008b32:	60b9      	str	r1, [r7, #8]
 8008b34:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	68ba      	ldr	r2, [r7, #8]
 8008b3a:	2100      	movs	r1, #0
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f000 fcaa 	bl	8009496 <USBD_LL_Transmit>

  return USBD_OK;
 8008b42:	2300      	movs	r3, #0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3710      	adds	r7, #16
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2203      	movs	r2, #3
 8008b5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	68ba      	ldr	r2, [r7, #8]
 8008b74:	2100      	movs	r1, #0
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	f000 fcae 	bl	80094d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b7c:	2300      	movs	r3, #0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3710      	adds	r7, #16
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008b86:	b580      	push	{r7, lr}
 8008b88:	b084      	sub	sp, #16
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	60f8      	str	r0, [r7, #12]
 8008b8e:	60b9      	str	r1, [r7, #8]
 8008b90:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	68ba      	ldr	r2, [r7, #8]
 8008b96:	2100      	movs	r1, #0
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f000 fc9d 	bl	80094d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3710      	adds	r7, #16
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2204      	movs	r2, #4
 8008bb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008bb8:	2300      	movs	r3, #0
 8008bba:	2200      	movs	r2, #0
 8008bbc:	2100      	movs	r1, #0
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 fc69 	bl	8009496 <USBD_LL_Transmit>

  return USBD_OK;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3708      	adds	r7, #8
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	b082      	sub	sp, #8
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2205      	movs	r2, #5
 8008bda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008bde:	2300      	movs	r3, #0
 8008be0:	2200      	movs	r2, #0
 8008be2:	2100      	movs	r1, #0
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 fc77 	bl	80094d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008bea:	2300      	movs	r3, #0
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3708      	adds	r7, #8
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	4912      	ldr	r1, [pc, #72]	; (8008c44 <MX_USB_DEVICE_Init+0x50>)
 8008bfc:	4812      	ldr	r0, [pc, #72]	; (8008c48 <MX_USB_DEVICE_Init+0x54>)
 8008bfe:	f7fe fd07 	bl	8007610 <USBD_Init>
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d001      	beq.n	8008c0c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008c08:	f7f9 faae 	bl	8002168 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008c0c:	490f      	ldr	r1, [pc, #60]	; (8008c4c <MX_USB_DEVICE_Init+0x58>)
 8008c0e:	480e      	ldr	r0, [pc, #56]	; (8008c48 <MX_USB_DEVICE_Init+0x54>)
 8008c10:	f7fe fd2e 	bl	8007670 <USBD_RegisterClass>
 8008c14:	4603      	mov	r3, r0
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d001      	beq.n	8008c1e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008c1a:	f7f9 faa5 	bl	8002168 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008c1e:	490c      	ldr	r1, [pc, #48]	; (8008c50 <MX_USB_DEVICE_Init+0x5c>)
 8008c20:	4809      	ldr	r0, [pc, #36]	; (8008c48 <MX_USB_DEVICE_Init+0x54>)
 8008c22:	f7fe fc65 	bl	80074f0 <USBD_CDC_RegisterInterface>
 8008c26:	4603      	mov	r3, r0
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d001      	beq.n	8008c30 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008c2c:	f7f9 fa9c 	bl	8002168 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008c30:	4805      	ldr	r0, [pc, #20]	; (8008c48 <MX_USB_DEVICE_Init+0x54>)
 8008c32:	f7fe fd53 	bl	80076dc <USBD_Start>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d001      	beq.n	8008c40 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008c3c:	f7f9 fa94 	bl	8002168 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008c40:	bf00      	nop
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	200000b0 	.word	0x200000b0
 8008c48:	20000424 	.word	0x20000424
 8008c4c:	2000001c 	.word	0x2000001c
 8008c50:	2000009c 	.word	0x2000009c

08008c54 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008c58:	2200      	movs	r2, #0
 8008c5a:	4905      	ldr	r1, [pc, #20]	; (8008c70 <CDC_Init_FS+0x1c>)
 8008c5c:	4805      	ldr	r0, [pc, #20]	; (8008c74 <CDC_Init_FS+0x20>)
 8008c5e:	f7fe fc61 	bl	8007524 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008c62:	4905      	ldr	r1, [pc, #20]	; (8008c78 <CDC_Init_FS+0x24>)
 8008c64:	4803      	ldr	r0, [pc, #12]	; (8008c74 <CDC_Init_FS+0x20>)
 8008c66:	f7fe fc7f 	bl	8007568 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008c6a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	20000b00 	.word	0x20000b00
 8008c74:	20000424 	.word	0x20000424
 8008c78:	20000700 	.word	0x20000700

08008c7c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008c80:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	4603      	mov	r3, r0
 8008c94:	6039      	str	r1, [r7, #0]
 8008c96:	71fb      	strb	r3, [r7, #7]
 8008c98:	4613      	mov	r3, r2
 8008c9a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008c9c:	79fb      	ldrb	r3, [r7, #7]
 8008c9e:	2b23      	cmp	r3, #35	; 0x23
 8008ca0:	d84a      	bhi.n	8008d38 <CDC_Control_FS+0xac>
 8008ca2:	a201      	add	r2, pc, #4	; (adr r2, 8008ca8 <CDC_Control_FS+0x1c>)
 8008ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ca8:	08008d39 	.word	0x08008d39
 8008cac:	08008d39 	.word	0x08008d39
 8008cb0:	08008d39 	.word	0x08008d39
 8008cb4:	08008d39 	.word	0x08008d39
 8008cb8:	08008d39 	.word	0x08008d39
 8008cbc:	08008d39 	.word	0x08008d39
 8008cc0:	08008d39 	.word	0x08008d39
 8008cc4:	08008d39 	.word	0x08008d39
 8008cc8:	08008d39 	.word	0x08008d39
 8008ccc:	08008d39 	.word	0x08008d39
 8008cd0:	08008d39 	.word	0x08008d39
 8008cd4:	08008d39 	.word	0x08008d39
 8008cd8:	08008d39 	.word	0x08008d39
 8008cdc:	08008d39 	.word	0x08008d39
 8008ce0:	08008d39 	.word	0x08008d39
 8008ce4:	08008d39 	.word	0x08008d39
 8008ce8:	08008d39 	.word	0x08008d39
 8008cec:	08008d39 	.word	0x08008d39
 8008cf0:	08008d39 	.word	0x08008d39
 8008cf4:	08008d39 	.word	0x08008d39
 8008cf8:	08008d39 	.word	0x08008d39
 8008cfc:	08008d39 	.word	0x08008d39
 8008d00:	08008d39 	.word	0x08008d39
 8008d04:	08008d39 	.word	0x08008d39
 8008d08:	08008d39 	.word	0x08008d39
 8008d0c:	08008d39 	.word	0x08008d39
 8008d10:	08008d39 	.word	0x08008d39
 8008d14:	08008d39 	.word	0x08008d39
 8008d18:	08008d39 	.word	0x08008d39
 8008d1c:	08008d39 	.word	0x08008d39
 8008d20:	08008d39 	.word	0x08008d39
 8008d24:	08008d39 	.word	0x08008d39
 8008d28:	08008d39 	.word	0x08008d39
 8008d2c:	08008d39 	.word	0x08008d39
 8008d30:	08008d39 	.word	0x08008d39
 8008d34:	08008d39 	.word	0x08008d39
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008d38:	bf00      	nop
  }

  return (USBD_OK);
 8008d3a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008d52:	6879      	ldr	r1, [r7, #4]
 8008d54:	4805      	ldr	r0, [pc, #20]	; (8008d6c <CDC_Receive_FS+0x24>)
 8008d56:	f7fe fc07 	bl	8007568 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008d5a:	4804      	ldr	r0, [pc, #16]	; (8008d6c <CDC_Receive_FS+0x24>)
 8008d5c:	f7fe fc22 	bl	80075a4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008d60:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	20000424 	.word	0x20000424

08008d70 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b087      	sub	sp, #28
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008d82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	371c      	adds	r7, #28
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr
	...

08008d94 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	6039      	str	r1, [r7, #0]
 8008d9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	2212      	movs	r2, #18
 8008da4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008da6:	4b03      	ldr	r3, [pc, #12]	; (8008db4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr
 8008db4:	200000cc 	.word	0x200000cc

08008db8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	6039      	str	r1, [r7, #0]
 8008dc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	2204      	movs	r2, #4
 8008dc8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008dca:	4b03      	ldr	r3, [pc, #12]	; (8008dd8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	370c      	adds	r7, #12
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr
 8008dd8:	200000e0 	.word	0x200000e0

08008ddc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	4603      	mov	r3, r0
 8008de4:	6039      	str	r1, [r7, #0]
 8008de6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008de8:	79fb      	ldrb	r3, [r7, #7]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d105      	bne.n	8008dfa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008dee:	683a      	ldr	r2, [r7, #0]
 8008df0:	4907      	ldr	r1, [pc, #28]	; (8008e10 <USBD_FS_ProductStrDescriptor+0x34>)
 8008df2:	4808      	ldr	r0, [pc, #32]	; (8008e14 <USBD_FS_ProductStrDescriptor+0x38>)
 8008df4:	f7ff fe1e 	bl	8008a34 <USBD_GetString>
 8008df8:	e004      	b.n	8008e04 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008dfa:	683a      	ldr	r2, [r7, #0]
 8008dfc:	4904      	ldr	r1, [pc, #16]	; (8008e10 <USBD_FS_ProductStrDescriptor+0x34>)
 8008dfe:	4805      	ldr	r0, [pc, #20]	; (8008e14 <USBD_FS_ProductStrDescriptor+0x38>)
 8008e00:	f7ff fe18 	bl	8008a34 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e04:	4b02      	ldr	r3, [pc, #8]	; (8008e10 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3708      	adds	r7, #8
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	20000f00 	.word	0x20000f00
 8008e14:	0800cf10 	.word	0x0800cf10

08008e18 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	4603      	mov	r3, r0
 8008e20:	6039      	str	r1, [r7, #0]
 8008e22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008e24:	683a      	ldr	r2, [r7, #0]
 8008e26:	4904      	ldr	r1, [pc, #16]	; (8008e38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008e28:	4804      	ldr	r0, [pc, #16]	; (8008e3c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008e2a:	f7ff fe03 	bl	8008a34 <USBD_GetString>
  return USBD_StrDesc;
 8008e2e:	4b02      	ldr	r3, [pc, #8]	; (8008e38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3708      	adds	r7, #8
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	20000f00 	.word	0x20000f00
 8008e3c:	0800cf28 	.word	0x0800cf28

08008e40 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	4603      	mov	r3, r0
 8008e48:	6039      	str	r1, [r7, #0]
 8008e4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	221a      	movs	r2, #26
 8008e50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008e52:	f000 f843 	bl	8008edc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008e56:	4b02      	ldr	r3, [pc, #8]	; (8008e60 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3708      	adds	r7, #8
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	200000e4 	.word	0x200000e4

08008e64 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	6039      	str	r1, [r7, #0]
 8008e6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008e70:	79fb      	ldrb	r3, [r7, #7]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d105      	bne.n	8008e82 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e76:	683a      	ldr	r2, [r7, #0]
 8008e78:	4907      	ldr	r1, [pc, #28]	; (8008e98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e7a:	4808      	ldr	r0, [pc, #32]	; (8008e9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e7c:	f7ff fdda 	bl	8008a34 <USBD_GetString>
 8008e80:	e004      	b.n	8008e8c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e82:	683a      	ldr	r2, [r7, #0]
 8008e84:	4904      	ldr	r1, [pc, #16]	; (8008e98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e86:	4805      	ldr	r0, [pc, #20]	; (8008e9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e88:	f7ff fdd4 	bl	8008a34 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e8c:	4b02      	ldr	r3, [pc, #8]	; (8008e98 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3708      	adds	r7, #8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	20000f00 	.word	0x20000f00
 8008e9c:	0800cf3c 	.word	0x0800cf3c

08008ea0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	6039      	str	r1, [r7, #0]
 8008eaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008eac:	79fb      	ldrb	r3, [r7, #7]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d105      	bne.n	8008ebe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008eb2:	683a      	ldr	r2, [r7, #0]
 8008eb4:	4907      	ldr	r1, [pc, #28]	; (8008ed4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008eb6:	4808      	ldr	r0, [pc, #32]	; (8008ed8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008eb8:	f7ff fdbc 	bl	8008a34 <USBD_GetString>
 8008ebc:	e004      	b.n	8008ec8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ebe:	683a      	ldr	r2, [r7, #0]
 8008ec0:	4904      	ldr	r1, [pc, #16]	; (8008ed4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008ec2:	4805      	ldr	r0, [pc, #20]	; (8008ed8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ec4:	f7ff fdb6 	bl	8008a34 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ec8:	4b02      	ldr	r3, [pc, #8]	; (8008ed4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3708      	adds	r7, #8
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	20000f00 	.word	0x20000f00
 8008ed8:	0800cf48 	.word	0x0800cf48

08008edc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008ee2:	4b0f      	ldr	r3, [pc, #60]	; (8008f20 <Get_SerialNum+0x44>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ee8:	4b0e      	ldr	r3, [pc, #56]	; (8008f24 <Get_SerialNum+0x48>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008eee:	4b0e      	ldr	r3, [pc, #56]	; (8008f28 <Get_SerialNum+0x4c>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	4413      	add	r3, r2
 8008efa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d009      	beq.n	8008f16 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008f02:	2208      	movs	r2, #8
 8008f04:	4909      	ldr	r1, [pc, #36]	; (8008f2c <Get_SerialNum+0x50>)
 8008f06:	68f8      	ldr	r0, [r7, #12]
 8008f08:	f000 f814 	bl	8008f34 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008f0c:	2204      	movs	r2, #4
 8008f0e:	4908      	ldr	r1, [pc, #32]	; (8008f30 <Get_SerialNum+0x54>)
 8008f10:	68b8      	ldr	r0, [r7, #8]
 8008f12:	f000 f80f 	bl	8008f34 <IntToUnicode>
  }
}
 8008f16:	bf00      	nop
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	1fff7a10 	.word	0x1fff7a10
 8008f24:	1fff7a14 	.word	0x1fff7a14
 8008f28:	1fff7a18 	.word	0x1fff7a18
 8008f2c:	200000e6 	.word	0x200000e6
 8008f30:	200000f6 	.word	0x200000f6

08008f34 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b087      	sub	sp, #28
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	4613      	mov	r3, r2
 8008f40:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008f42:	2300      	movs	r3, #0
 8008f44:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008f46:	2300      	movs	r3, #0
 8008f48:	75fb      	strb	r3, [r7, #23]
 8008f4a:	e027      	b.n	8008f9c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	0f1b      	lsrs	r3, r3, #28
 8008f50:	2b09      	cmp	r3, #9
 8008f52:	d80b      	bhi.n	8008f6c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	0f1b      	lsrs	r3, r3, #28
 8008f58:	b2da      	uxtb	r2, r3
 8008f5a:	7dfb      	ldrb	r3, [r7, #23]
 8008f5c:	005b      	lsls	r3, r3, #1
 8008f5e:	4619      	mov	r1, r3
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	440b      	add	r3, r1
 8008f64:	3230      	adds	r2, #48	; 0x30
 8008f66:	b2d2      	uxtb	r2, r2
 8008f68:	701a      	strb	r2, [r3, #0]
 8008f6a:	e00a      	b.n	8008f82 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	0f1b      	lsrs	r3, r3, #28
 8008f70:	b2da      	uxtb	r2, r3
 8008f72:	7dfb      	ldrb	r3, [r7, #23]
 8008f74:	005b      	lsls	r3, r3, #1
 8008f76:	4619      	mov	r1, r3
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	440b      	add	r3, r1
 8008f7c:	3237      	adds	r2, #55	; 0x37
 8008f7e:	b2d2      	uxtb	r2, r2
 8008f80:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	011b      	lsls	r3, r3, #4
 8008f86:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008f88:	7dfb      	ldrb	r3, [r7, #23]
 8008f8a:	005b      	lsls	r3, r3, #1
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	68ba      	ldr	r2, [r7, #8]
 8008f90:	4413      	add	r3, r2
 8008f92:	2200      	movs	r2, #0
 8008f94:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008f96:	7dfb      	ldrb	r3, [r7, #23]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	75fb      	strb	r3, [r7, #23]
 8008f9c:	7dfa      	ldrb	r2, [r7, #23]
 8008f9e:	79fb      	ldrb	r3, [r7, #7]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d3d3      	bcc.n	8008f4c <IntToUnicode+0x18>
  }
}
 8008fa4:	bf00      	nop
 8008fa6:	bf00      	nop
 8008fa8:	371c      	adds	r7, #28
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr
	...

08008fb4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b08a      	sub	sp, #40	; 0x28
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008fbc:	f107 0314 	add.w	r3, r7, #20
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	601a      	str	r2, [r3, #0]
 8008fc4:	605a      	str	r2, [r3, #4]
 8008fc6:	609a      	str	r2, [r3, #8]
 8008fc8:	60da      	str	r2, [r3, #12]
 8008fca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008fd4:	d13a      	bne.n	800904c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	613b      	str	r3, [r7, #16]
 8008fda:	4b1e      	ldr	r3, [pc, #120]	; (8009054 <HAL_PCD_MspInit+0xa0>)
 8008fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fde:	4a1d      	ldr	r2, [pc, #116]	; (8009054 <HAL_PCD_MspInit+0xa0>)
 8008fe0:	f043 0301 	orr.w	r3, r3, #1
 8008fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8008fe6:	4b1b      	ldr	r3, [pc, #108]	; (8009054 <HAL_PCD_MspInit+0xa0>)
 8008fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fea:	f003 0301 	and.w	r3, r3, #1
 8008fee:	613b      	str	r3, [r7, #16]
 8008ff0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008ff2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ff8:	2302      	movs	r3, #2
 8008ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009000:	2303      	movs	r3, #3
 8009002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009004:	230a      	movs	r3, #10
 8009006:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009008:	f107 0314 	add.w	r3, r7, #20
 800900c:	4619      	mov	r1, r3
 800900e:	4812      	ldr	r0, [pc, #72]	; (8009058 <HAL_PCD_MspInit+0xa4>)
 8009010:	f7f9 fbfe 	bl	8002810 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009014:	4b0f      	ldr	r3, [pc, #60]	; (8009054 <HAL_PCD_MspInit+0xa0>)
 8009016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009018:	4a0e      	ldr	r2, [pc, #56]	; (8009054 <HAL_PCD_MspInit+0xa0>)
 800901a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800901e:	6353      	str	r3, [r2, #52]	; 0x34
 8009020:	2300      	movs	r3, #0
 8009022:	60fb      	str	r3, [r7, #12]
 8009024:	4b0b      	ldr	r3, [pc, #44]	; (8009054 <HAL_PCD_MspInit+0xa0>)
 8009026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009028:	4a0a      	ldr	r2, [pc, #40]	; (8009054 <HAL_PCD_MspInit+0xa0>)
 800902a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800902e:	6453      	str	r3, [r2, #68]	; 0x44
 8009030:	4b08      	ldr	r3, [pc, #32]	; (8009054 <HAL_PCD_MspInit+0xa0>)
 8009032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009034:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009038:	60fb      	str	r3, [r7, #12]
 800903a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800903c:	2200      	movs	r2, #0
 800903e:	2100      	movs	r1, #0
 8009040:	2043      	movs	r0, #67	; 0x43
 8009042:	f7f9 fbae 	bl	80027a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009046:	2043      	movs	r0, #67	; 0x43
 8009048:	f7f9 fbc7 	bl	80027da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800904c:	bf00      	nop
 800904e:	3728      	adds	r7, #40	; 0x28
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}
 8009054:	40023800 	.word	0x40023800
 8009058:	40020000 	.word	0x40020000

0800905c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009070:	4619      	mov	r1, r3
 8009072:	4610      	mov	r0, r2
 8009074:	f7fe fb7f 	bl	8007776 <USBD_LL_SetupStage>
}
 8009078:	bf00      	nop
 800907a:	3708      	adds	r7, #8
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	460b      	mov	r3, r1
 800908a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009092:	78fa      	ldrb	r2, [r7, #3]
 8009094:	6879      	ldr	r1, [r7, #4]
 8009096:	4613      	mov	r3, r2
 8009098:	00db      	lsls	r3, r3, #3
 800909a:	4413      	add	r3, r2
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	440b      	add	r3, r1
 80090a0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	78fb      	ldrb	r3, [r7, #3]
 80090a8:	4619      	mov	r1, r3
 80090aa:	f7fe fbb9 	bl	8007820 <USBD_LL_DataOutStage>
}
 80090ae:	bf00      	nop
 80090b0:	3708      	adds	r7, #8
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b082      	sub	sp, #8
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
 80090be:	460b      	mov	r3, r1
 80090c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80090c8:	78fa      	ldrb	r2, [r7, #3]
 80090ca:	6879      	ldr	r1, [r7, #4]
 80090cc:	4613      	mov	r3, r2
 80090ce:	00db      	lsls	r3, r3, #3
 80090d0:	4413      	add	r3, r2
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	440b      	add	r3, r1
 80090d6:	334c      	adds	r3, #76	; 0x4c
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	78fb      	ldrb	r3, [r7, #3]
 80090dc:	4619      	mov	r1, r3
 80090de:	f7fe fc52 	bl	8007986 <USBD_LL_DataInStage>
}
 80090e2:	bf00      	nop
 80090e4:	3708      	adds	r7, #8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b082      	sub	sp, #8
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7fe fd86 	bl	8007c0a <USBD_LL_SOF>
}
 80090fe:	bf00      	nop
 8009100:	3708      	adds	r7, #8
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009106:	b580      	push	{r7, lr}
 8009108:	b084      	sub	sp, #16
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800910e:	2301      	movs	r3, #1
 8009110:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	2b02      	cmp	r3, #2
 8009118:	d001      	beq.n	800911e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800911a:	f7f9 f825 	bl	8002168 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009124:	7bfa      	ldrb	r2, [r7, #15]
 8009126:	4611      	mov	r1, r2
 8009128:	4618      	mov	r0, r3
 800912a:	f7fe fd30 	bl	8007b8e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009134:	4618      	mov	r0, r3
 8009136:	f7fe fcd8 	bl	8007aea <USBD_LL_Reset>
}
 800913a:	bf00      	nop
 800913c:	3710      	adds	r7, #16
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
	...

08009144 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009152:	4618      	mov	r0, r3
 8009154:	f7fe fd2b 	bl	8007bae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	6812      	ldr	r2, [r2, #0]
 8009166:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800916a:	f043 0301 	orr.w	r3, r3, #1
 800916e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6a1b      	ldr	r3, [r3, #32]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d005      	beq.n	8009184 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009178:	4b04      	ldr	r3, [pc, #16]	; (800918c <HAL_PCD_SuspendCallback+0x48>)
 800917a:	691b      	ldr	r3, [r3, #16]
 800917c:	4a03      	ldr	r2, [pc, #12]	; (800918c <HAL_PCD_SuspendCallback+0x48>)
 800917e:	f043 0306 	orr.w	r3, r3, #6
 8009182:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009184:	bf00      	nop
 8009186:	3708      	adds	r7, #8
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	e000ed00 	.word	0xe000ed00

08009190 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800919e:	4618      	mov	r0, r3
 80091a0:	f7fe fd1b 	bl	8007bda <USBD_LL_Resume>
}
 80091a4:	bf00      	nop
 80091a6:	3708      	adds	r7, #8
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	460b      	mov	r3, r1
 80091b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80091be:	78fa      	ldrb	r2, [r7, #3]
 80091c0:	4611      	mov	r1, r2
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7fe fd73 	bl	8007cae <USBD_LL_IsoOUTIncomplete>
}
 80091c8:	bf00      	nop
 80091ca:	3708      	adds	r7, #8
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	460b      	mov	r3, r1
 80091da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80091e2:	78fa      	ldrb	r2, [r7, #3]
 80091e4:	4611      	mov	r1, r2
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7fe fd2f 	bl	8007c4a <USBD_LL_IsoINIncomplete>
}
 80091ec:	bf00      	nop
 80091ee:	3708      	adds	r7, #8
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009202:	4618      	mov	r0, r3
 8009204:	f7fe fd85 	bl	8007d12 <USBD_LL_DevConnected>
}
 8009208:	bf00      	nop
 800920a:	3708      	adds	r7, #8
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800921e:	4618      	mov	r0, r3
 8009220:	f7fe fd82 	bl	8007d28 <USBD_LL_DevDisconnected>
}
 8009224:	bf00      	nop
 8009226:	3708      	adds	r7, #8
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d13c      	bne.n	80092b6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800923c:	4a20      	ldr	r2, [pc, #128]	; (80092c0 <USBD_LL_Init+0x94>)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4a1e      	ldr	r2, [pc, #120]	; (80092c0 <USBD_LL_Init+0x94>)
 8009248:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800924c:	4b1c      	ldr	r3, [pc, #112]	; (80092c0 <USBD_LL_Init+0x94>)
 800924e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009252:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009254:	4b1a      	ldr	r3, [pc, #104]	; (80092c0 <USBD_LL_Init+0x94>)
 8009256:	2204      	movs	r2, #4
 8009258:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800925a:	4b19      	ldr	r3, [pc, #100]	; (80092c0 <USBD_LL_Init+0x94>)
 800925c:	2202      	movs	r2, #2
 800925e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009260:	4b17      	ldr	r3, [pc, #92]	; (80092c0 <USBD_LL_Init+0x94>)
 8009262:	2200      	movs	r2, #0
 8009264:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009266:	4b16      	ldr	r3, [pc, #88]	; (80092c0 <USBD_LL_Init+0x94>)
 8009268:	2202      	movs	r2, #2
 800926a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800926c:	4b14      	ldr	r3, [pc, #80]	; (80092c0 <USBD_LL_Init+0x94>)
 800926e:	2200      	movs	r2, #0
 8009270:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009272:	4b13      	ldr	r3, [pc, #76]	; (80092c0 <USBD_LL_Init+0x94>)
 8009274:	2200      	movs	r2, #0
 8009276:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009278:	4b11      	ldr	r3, [pc, #68]	; (80092c0 <USBD_LL_Init+0x94>)
 800927a:	2200      	movs	r2, #0
 800927c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800927e:	4b10      	ldr	r3, [pc, #64]	; (80092c0 <USBD_LL_Init+0x94>)
 8009280:	2200      	movs	r2, #0
 8009282:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009284:	4b0e      	ldr	r3, [pc, #56]	; (80092c0 <USBD_LL_Init+0x94>)
 8009286:	2200      	movs	r2, #0
 8009288:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800928a:	480d      	ldr	r0, [pc, #52]	; (80092c0 <USBD_LL_Init+0x94>)
 800928c:	f7f9 fc5e 	bl	8002b4c <HAL_PCD_Init>
 8009290:	4603      	mov	r3, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d001      	beq.n	800929a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009296:	f7f8 ff67 	bl	8002168 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800929a:	2180      	movs	r1, #128	; 0x80
 800929c:	4808      	ldr	r0, [pc, #32]	; (80092c0 <USBD_LL_Init+0x94>)
 800929e:	f7fa feb6 	bl	800400e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80092a2:	2240      	movs	r2, #64	; 0x40
 80092a4:	2100      	movs	r1, #0
 80092a6:	4806      	ldr	r0, [pc, #24]	; (80092c0 <USBD_LL_Init+0x94>)
 80092a8:	f7fa fe6a 	bl	8003f80 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80092ac:	2280      	movs	r2, #128	; 0x80
 80092ae:	2101      	movs	r1, #1
 80092b0:	4803      	ldr	r0, [pc, #12]	; (80092c0 <USBD_LL_Init+0x94>)
 80092b2:	f7fa fe65 	bl	8003f80 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	20001100 	.word	0x20001100

080092c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092cc:	2300      	movs	r3, #0
 80092ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092d0:	2300      	movs	r3, #0
 80092d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092da:	4618      	mov	r0, r3
 80092dc:	f7f9 fd53 	bl	8002d86 <HAL_PCD_Start>
 80092e0:	4603      	mov	r3, r0
 80092e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092e4:	7bfb      	ldrb	r3, [r7, #15]
 80092e6:	4618      	mov	r0, r3
 80092e8:	f000 f942 	bl	8009570 <USBD_Get_USB_Status>
 80092ec:	4603      	mov	r3, r0
 80092ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b084      	sub	sp, #16
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
 8009302:	4608      	mov	r0, r1
 8009304:	4611      	mov	r1, r2
 8009306:	461a      	mov	r2, r3
 8009308:	4603      	mov	r3, r0
 800930a:	70fb      	strb	r3, [r7, #3]
 800930c:	460b      	mov	r3, r1
 800930e:	70bb      	strb	r3, [r7, #2]
 8009310:	4613      	mov	r3, r2
 8009312:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009314:	2300      	movs	r3, #0
 8009316:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009318:	2300      	movs	r3, #0
 800931a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009322:	78bb      	ldrb	r3, [r7, #2]
 8009324:	883a      	ldrh	r2, [r7, #0]
 8009326:	78f9      	ldrb	r1, [r7, #3]
 8009328:	f7fa fa24 	bl	8003774 <HAL_PCD_EP_Open>
 800932c:	4603      	mov	r3, r0
 800932e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009330:	7bfb      	ldrb	r3, [r7, #15]
 8009332:	4618      	mov	r0, r3
 8009334:	f000 f91c 	bl	8009570 <USBD_Get_USB_Status>
 8009338:	4603      	mov	r3, r0
 800933a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800933c:	7bbb      	ldrb	r3, [r7, #14]
}
 800933e:	4618      	mov	r0, r3
 8009340:	3710      	adds	r7, #16
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b084      	sub	sp, #16
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
 800934e:	460b      	mov	r3, r1
 8009350:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009352:	2300      	movs	r3, #0
 8009354:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009356:	2300      	movs	r3, #0
 8009358:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009360:	78fa      	ldrb	r2, [r7, #3]
 8009362:	4611      	mov	r1, r2
 8009364:	4618      	mov	r0, r3
 8009366:	f7fa fa6d 	bl	8003844 <HAL_PCD_EP_Close>
 800936a:	4603      	mov	r3, r0
 800936c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800936e:	7bfb      	ldrb	r3, [r7, #15]
 8009370:	4618      	mov	r0, r3
 8009372:	f000 f8fd 	bl	8009570 <USBD_Get_USB_Status>
 8009376:	4603      	mov	r3, r0
 8009378:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800937a:	7bbb      	ldrb	r3, [r7, #14]
}
 800937c:	4618      	mov	r0, r3
 800937e:	3710      	adds	r7, #16
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	460b      	mov	r3, r1
 800938e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009390:	2300      	movs	r3, #0
 8009392:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009394:	2300      	movs	r3, #0
 8009396:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800939e:	78fa      	ldrb	r2, [r7, #3]
 80093a0:	4611      	mov	r1, r2
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7fa fb45 	bl	8003a32 <HAL_PCD_EP_SetStall>
 80093a8:	4603      	mov	r3, r0
 80093aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093ac:	7bfb      	ldrb	r3, [r7, #15]
 80093ae:	4618      	mov	r0, r3
 80093b0:	f000 f8de 	bl	8009570 <USBD_Get_USB_Status>
 80093b4:	4603      	mov	r3, r0
 80093b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}

080093c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093c2:	b580      	push	{r7, lr}
 80093c4:	b084      	sub	sp, #16
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
 80093ca:	460b      	mov	r3, r1
 80093cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093ce:	2300      	movs	r3, #0
 80093d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093d2:	2300      	movs	r3, #0
 80093d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80093dc:	78fa      	ldrb	r2, [r7, #3]
 80093de:	4611      	mov	r1, r2
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7fa fb8a 	bl	8003afa <HAL_PCD_EP_ClrStall>
 80093e6:	4603      	mov	r3, r0
 80093e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093ea:	7bfb      	ldrb	r3, [r7, #15]
 80093ec:	4618      	mov	r0, r3
 80093ee:	f000 f8bf 	bl	8009570 <USBD_Get_USB_Status>
 80093f2:	4603      	mov	r3, r0
 80093f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3710      	adds	r7, #16
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009400:	b480      	push	{r7}
 8009402:	b085      	sub	sp, #20
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	460b      	mov	r3, r1
 800940a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009412:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009414:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009418:	2b00      	cmp	r3, #0
 800941a:	da0b      	bge.n	8009434 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800941c:	78fb      	ldrb	r3, [r7, #3]
 800941e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009422:	68f9      	ldr	r1, [r7, #12]
 8009424:	4613      	mov	r3, r2
 8009426:	00db      	lsls	r3, r3, #3
 8009428:	4413      	add	r3, r2
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	440b      	add	r3, r1
 800942e:	333e      	adds	r3, #62	; 0x3e
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	e00b      	b.n	800944c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009434:	78fb      	ldrb	r3, [r7, #3]
 8009436:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800943a:	68f9      	ldr	r1, [r7, #12]
 800943c:	4613      	mov	r3, r2
 800943e:	00db      	lsls	r3, r3, #3
 8009440:	4413      	add	r3, r2
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	440b      	add	r3, r1
 8009446:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800944a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800944c:	4618      	mov	r0, r3
 800944e:	3714      	adds	r7, #20
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	460b      	mov	r3, r1
 8009462:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009464:	2300      	movs	r3, #0
 8009466:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009468:	2300      	movs	r3, #0
 800946a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009472:	78fa      	ldrb	r2, [r7, #3]
 8009474:	4611      	mov	r1, r2
 8009476:	4618      	mov	r0, r3
 8009478:	f7fa f957 	bl	800372a <HAL_PCD_SetAddress>
 800947c:	4603      	mov	r3, r0
 800947e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009480:	7bfb      	ldrb	r3, [r7, #15]
 8009482:	4618      	mov	r0, r3
 8009484:	f000 f874 	bl	8009570 <USBD_Get_USB_Status>
 8009488:	4603      	mov	r3, r0
 800948a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800948c:	7bbb      	ldrb	r3, [r7, #14]
}
 800948e:	4618      	mov	r0, r3
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}

08009496 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009496:	b580      	push	{r7, lr}
 8009498:	b086      	sub	sp, #24
 800949a:	af00      	add	r7, sp, #0
 800949c:	60f8      	str	r0, [r7, #12]
 800949e:	607a      	str	r2, [r7, #4]
 80094a0:	603b      	str	r3, [r7, #0]
 80094a2:	460b      	mov	r3, r1
 80094a4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094a6:	2300      	movs	r3, #0
 80094a8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094aa:	2300      	movs	r3, #0
 80094ac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80094b4:	7af9      	ldrb	r1, [r7, #11]
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	f7fa fa70 	bl	800399e <HAL_PCD_EP_Transmit>
 80094be:	4603      	mov	r3, r0
 80094c0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094c2:	7dfb      	ldrb	r3, [r7, #23]
 80094c4:	4618      	mov	r0, r3
 80094c6:	f000 f853 	bl	8009570 <USBD_Get_USB_Status>
 80094ca:	4603      	mov	r3, r0
 80094cc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80094ce:	7dbb      	ldrb	r3, [r7, #22]
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3718      	adds	r7, #24
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b086      	sub	sp, #24
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	607a      	str	r2, [r7, #4]
 80094e2:	603b      	str	r3, [r7, #0]
 80094e4:	460b      	mov	r3, r1
 80094e6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094e8:	2300      	movs	r3, #0
 80094ea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094ec:	2300      	movs	r3, #0
 80094ee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80094f6:	7af9      	ldrb	r1, [r7, #11]
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	f7fa f9ec 	bl	80038d8 <HAL_PCD_EP_Receive>
 8009500:	4603      	mov	r3, r0
 8009502:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009504:	7dfb      	ldrb	r3, [r7, #23]
 8009506:	4618      	mov	r0, r3
 8009508:	f000 f832 	bl	8009570 <USBD_Get_USB_Status>
 800950c:	4603      	mov	r3, r0
 800950e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009510:	7dbb      	ldrb	r3, [r7, #22]
}
 8009512:	4618      	mov	r0, r3
 8009514:	3718      	adds	r7, #24
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b082      	sub	sp, #8
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
 8009522:	460b      	mov	r3, r1
 8009524:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800952c:	78fa      	ldrb	r2, [r7, #3]
 800952e:	4611      	mov	r1, r2
 8009530:	4618      	mov	r0, r3
 8009532:	f7fa fa1c 	bl	800396e <HAL_PCD_EP_GetRxCount>
 8009536:	4603      	mov	r3, r0
}
 8009538:	4618      	mov	r0, r3
 800953a:	3708      	adds	r7, #8
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009540:	b480      	push	{r7}
 8009542:	b083      	sub	sp, #12
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009548:	4b03      	ldr	r3, [pc, #12]	; (8009558 <USBD_static_malloc+0x18>)
}
 800954a:	4618      	mov	r0, r3
 800954c:	370c      	adds	r7, #12
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr
 8009556:	bf00      	nop
 8009558:	2000160c 	.word	0x2000160c

0800955c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]

}
 8009564:	bf00      	nop
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr

08009570 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009570:	b480      	push	{r7}
 8009572:	b085      	sub	sp, #20
 8009574:	af00      	add	r7, sp, #0
 8009576:	4603      	mov	r3, r0
 8009578:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800957a:	2300      	movs	r3, #0
 800957c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800957e:	79fb      	ldrb	r3, [r7, #7]
 8009580:	2b03      	cmp	r3, #3
 8009582:	d817      	bhi.n	80095b4 <USBD_Get_USB_Status+0x44>
 8009584:	a201      	add	r2, pc, #4	; (adr r2, 800958c <USBD_Get_USB_Status+0x1c>)
 8009586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800958a:	bf00      	nop
 800958c:	0800959d 	.word	0x0800959d
 8009590:	080095a3 	.word	0x080095a3
 8009594:	080095a9 	.word	0x080095a9
 8009598:	080095af 	.word	0x080095af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800959c:	2300      	movs	r3, #0
 800959e:	73fb      	strb	r3, [r7, #15]
    break;
 80095a0:	e00b      	b.n	80095ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80095a2:	2303      	movs	r3, #3
 80095a4:	73fb      	strb	r3, [r7, #15]
    break;
 80095a6:	e008      	b.n	80095ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80095a8:	2301      	movs	r3, #1
 80095aa:	73fb      	strb	r3, [r7, #15]
    break;
 80095ac:	e005      	b.n	80095ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80095ae:	2303      	movs	r3, #3
 80095b0:	73fb      	strb	r3, [r7, #15]
    break;
 80095b2:	e002      	b.n	80095ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80095b4:	2303      	movs	r3, #3
 80095b6:	73fb      	strb	r3, [r7, #15]
    break;
 80095b8:	bf00      	nop
  }
  return usb_status;
 80095ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3714      	adds	r7, #20
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr

080095c8 <__errno>:
 80095c8:	4b01      	ldr	r3, [pc, #4]	; (80095d0 <__errno+0x8>)
 80095ca:	6818      	ldr	r0, [r3, #0]
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	20000100 	.word	0x20000100

080095d4 <__libc_init_array>:
 80095d4:	b570      	push	{r4, r5, r6, lr}
 80095d6:	4d0d      	ldr	r5, [pc, #52]	; (800960c <__libc_init_array+0x38>)
 80095d8:	4c0d      	ldr	r4, [pc, #52]	; (8009610 <__libc_init_array+0x3c>)
 80095da:	1b64      	subs	r4, r4, r5
 80095dc:	10a4      	asrs	r4, r4, #2
 80095de:	2600      	movs	r6, #0
 80095e0:	42a6      	cmp	r6, r4
 80095e2:	d109      	bne.n	80095f8 <__libc_init_array+0x24>
 80095e4:	4d0b      	ldr	r5, [pc, #44]	; (8009614 <__libc_init_array+0x40>)
 80095e6:	4c0c      	ldr	r4, [pc, #48]	; (8009618 <__libc_init_array+0x44>)
 80095e8:	f003 fc24 	bl	800ce34 <_init>
 80095ec:	1b64      	subs	r4, r4, r5
 80095ee:	10a4      	asrs	r4, r4, #2
 80095f0:	2600      	movs	r6, #0
 80095f2:	42a6      	cmp	r6, r4
 80095f4:	d105      	bne.n	8009602 <__libc_init_array+0x2e>
 80095f6:	bd70      	pop	{r4, r5, r6, pc}
 80095f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80095fc:	4798      	blx	r3
 80095fe:	3601      	adds	r6, #1
 8009600:	e7ee      	b.n	80095e0 <__libc_init_array+0xc>
 8009602:	f855 3b04 	ldr.w	r3, [r5], #4
 8009606:	4798      	blx	r3
 8009608:	3601      	adds	r6, #1
 800960a:	e7f2      	b.n	80095f2 <__libc_init_array+0x1e>
 800960c:	0800d3a4 	.word	0x0800d3a4
 8009610:	0800d3a4 	.word	0x0800d3a4
 8009614:	0800d3a4 	.word	0x0800d3a4
 8009618:	0800d3a8 	.word	0x0800d3a8

0800961c <memset>:
 800961c:	4402      	add	r2, r0
 800961e:	4603      	mov	r3, r0
 8009620:	4293      	cmp	r3, r2
 8009622:	d100      	bne.n	8009626 <memset+0xa>
 8009624:	4770      	bx	lr
 8009626:	f803 1b01 	strb.w	r1, [r3], #1
 800962a:	e7f9      	b.n	8009620 <memset+0x4>

0800962c <__cvt>:
 800962c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009630:	ec55 4b10 	vmov	r4, r5, d0
 8009634:	2d00      	cmp	r5, #0
 8009636:	460e      	mov	r6, r1
 8009638:	4619      	mov	r1, r3
 800963a:	462b      	mov	r3, r5
 800963c:	bfbb      	ittet	lt
 800963e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009642:	461d      	movlt	r5, r3
 8009644:	2300      	movge	r3, #0
 8009646:	232d      	movlt	r3, #45	; 0x2d
 8009648:	700b      	strb	r3, [r1, #0]
 800964a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800964c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009650:	4691      	mov	r9, r2
 8009652:	f023 0820 	bic.w	r8, r3, #32
 8009656:	bfbc      	itt	lt
 8009658:	4622      	movlt	r2, r4
 800965a:	4614      	movlt	r4, r2
 800965c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009660:	d005      	beq.n	800966e <__cvt+0x42>
 8009662:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009666:	d100      	bne.n	800966a <__cvt+0x3e>
 8009668:	3601      	adds	r6, #1
 800966a:	2102      	movs	r1, #2
 800966c:	e000      	b.n	8009670 <__cvt+0x44>
 800966e:	2103      	movs	r1, #3
 8009670:	ab03      	add	r3, sp, #12
 8009672:	9301      	str	r3, [sp, #4]
 8009674:	ab02      	add	r3, sp, #8
 8009676:	9300      	str	r3, [sp, #0]
 8009678:	ec45 4b10 	vmov	d0, r4, r5
 800967c:	4653      	mov	r3, sl
 800967e:	4632      	mov	r2, r6
 8009680:	f000 fe1a 	bl	800a2b8 <_dtoa_r>
 8009684:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009688:	4607      	mov	r7, r0
 800968a:	d102      	bne.n	8009692 <__cvt+0x66>
 800968c:	f019 0f01 	tst.w	r9, #1
 8009690:	d022      	beq.n	80096d8 <__cvt+0xac>
 8009692:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009696:	eb07 0906 	add.w	r9, r7, r6
 800969a:	d110      	bne.n	80096be <__cvt+0x92>
 800969c:	783b      	ldrb	r3, [r7, #0]
 800969e:	2b30      	cmp	r3, #48	; 0x30
 80096a0:	d10a      	bne.n	80096b8 <__cvt+0x8c>
 80096a2:	2200      	movs	r2, #0
 80096a4:	2300      	movs	r3, #0
 80096a6:	4620      	mov	r0, r4
 80096a8:	4629      	mov	r1, r5
 80096aa:	f7f7 fa15 	bl	8000ad8 <__aeabi_dcmpeq>
 80096ae:	b918      	cbnz	r0, 80096b8 <__cvt+0x8c>
 80096b0:	f1c6 0601 	rsb	r6, r6, #1
 80096b4:	f8ca 6000 	str.w	r6, [sl]
 80096b8:	f8da 3000 	ldr.w	r3, [sl]
 80096bc:	4499      	add	r9, r3
 80096be:	2200      	movs	r2, #0
 80096c0:	2300      	movs	r3, #0
 80096c2:	4620      	mov	r0, r4
 80096c4:	4629      	mov	r1, r5
 80096c6:	f7f7 fa07 	bl	8000ad8 <__aeabi_dcmpeq>
 80096ca:	b108      	cbz	r0, 80096d0 <__cvt+0xa4>
 80096cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80096d0:	2230      	movs	r2, #48	; 0x30
 80096d2:	9b03      	ldr	r3, [sp, #12]
 80096d4:	454b      	cmp	r3, r9
 80096d6:	d307      	bcc.n	80096e8 <__cvt+0xbc>
 80096d8:	9b03      	ldr	r3, [sp, #12]
 80096da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80096dc:	1bdb      	subs	r3, r3, r7
 80096de:	4638      	mov	r0, r7
 80096e0:	6013      	str	r3, [r2, #0]
 80096e2:	b004      	add	sp, #16
 80096e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096e8:	1c59      	adds	r1, r3, #1
 80096ea:	9103      	str	r1, [sp, #12]
 80096ec:	701a      	strb	r2, [r3, #0]
 80096ee:	e7f0      	b.n	80096d2 <__cvt+0xa6>

080096f0 <__exponent>:
 80096f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096f2:	4603      	mov	r3, r0
 80096f4:	2900      	cmp	r1, #0
 80096f6:	bfb8      	it	lt
 80096f8:	4249      	neglt	r1, r1
 80096fa:	f803 2b02 	strb.w	r2, [r3], #2
 80096fe:	bfb4      	ite	lt
 8009700:	222d      	movlt	r2, #45	; 0x2d
 8009702:	222b      	movge	r2, #43	; 0x2b
 8009704:	2909      	cmp	r1, #9
 8009706:	7042      	strb	r2, [r0, #1]
 8009708:	dd2a      	ble.n	8009760 <__exponent+0x70>
 800970a:	f10d 0407 	add.w	r4, sp, #7
 800970e:	46a4      	mov	ip, r4
 8009710:	270a      	movs	r7, #10
 8009712:	46a6      	mov	lr, r4
 8009714:	460a      	mov	r2, r1
 8009716:	fb91 f6f7 	sdiv	r6, r1, r7
 800971a:	fb07 1516 	mls	r5, r7, r6, r1
 800971e:	3530      	adds	r5, #48	; 0x30
 8009720:	2a63      	cmp	r2, #99	; 0x63
 8009722:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009726:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800972a:	4631      	mov	r1, r6
 800972c:	dcf1      	bgt.n	8009712 <__exponent+0x22>
 800972e:	3130      	adds	r1, #48	; 0x30
 8009730:	f1ae 0502 	sub.w	r5, lr, #2
 8009734:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009738:	1c44      	adds	r4, r0, #1
 800973a:	4629      	mov	r1, r5
 800973c:	4561      	cmp	r1, ip
 800973e:	d30a      	bcc.n	8009756 <__exponent+0x66>
 8009740:	f10d 0209 	add.w	r2, sp, #9
 8009744:	eba2 020e 	sub.w	r2, r2, lr
 8009748:	4565      	cmp	r5, ip
 800974a:	bf88      	it	hi
 800974c:	2200      	movhi	r2, #0
 800974e:	4413      	add	r3, r2
 8009750:	1a18      	subs	r0, r3, r0
 8009752:	b003      	add	sp, #12
 8009754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009756:	f811 2b01 	ldrb.w	r2, [r1], #1
 800975a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800975e:	e7ed      	b.n	800973c <__exponent+0x4c>
 8009760:	2330      	movs	r3, #48	; 0x30
 8009762:	3130      	adds	r1, #48	; 0x30
 8009764:	7083      	strb	r3, [r0, #2]
 8009766:	70c1      	strb	r1, [r0, #3]
 8009768:	1d03      	adds	r3, r0, #4
 800976a:	e7f1      	b.n	8009750 <__exponent+0x60>

0800976c <_printf_float>:
 800976c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009770:	ed2d 8b02 	vpush	{d8}
 8009774:	b08d      	sub	sp, #52	; 0x34
 8009776:	460c      	mov	r4, r1
 8009778:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800977c:	4616      	mov	r6, r2
 800977e:	461f      	mov	r7, r3
 8009780:	4605      	mov	r5, r0
 8009782:	f001 fd3f 	bl	800b204 <_localeconv_r>
 8009786:	f8d0 a000 	ldr.w	sl, [r0]
 800978a:	4650      	mov	r0, sl
 800978c:	f7f6 fd28 	bl	80001e0 <strlen>
 8009790:	2300      	movs	r3, #0
 8009792:	930a      	str	r3, [sp, #40]	; 0x28
 8009794:	6823      	ldr	r3, [r4, #0]
 8009796:	9305      	str	r3, [sp, #20]
 8009798:	f8d8 3000 	ldr.w	r3, [r8]
 800979c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80097a0:	3307      	adds	r3, #7
 80097a2:	f023 0307 	bic.w	r3, r3, #7
 80097a6:	f103 0208 	add.w	r2, r3, #8
 80097aa:	f8c8 2000 	str.w	r2, [r8]
 80097ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80097b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80097ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80097be:	9307      	str	r3, [sp, #28]
 80097c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80097c4:	ee08 0a10 	vmov	s16, r0
 80097c8:	4b9f      	ldr	r3, [pc, #636]	; (8009a48 <_printf_float+0x2dc>)
 80097ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80097ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097d2:	f7f7 f9b3 	bl	8000b3c <__aeabi_dcmpun>
 80097d6:	bb88      	cbnz	r0, 800983c <_printf_float+0xd0>
 80097d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80097dc:	4b9a      	ldr	r3, [pc, #616]	; (8009a48 <_printf_float+0x2dc>)
 80097de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097e2:	f7f7 f98d 	bl	8000b00 <__aeabi_dcmple>
 80097e6:	bb48      	cbnz	r0, 800983c <_printf_float+0xd0>
 80097e8:	2200      	movs	r2, #0
 80097ea:	2300      	movs	r3, #0
 80097ec:	4640      	mov	r0, r8
 80097ee:	4649      	mov	r1, r9
 80097f0:	f7f7 f97c 	bl	8000aec <__aeabi_dcmplt>
 80097f4:	b110      	cbz	r0, 80097fc <_printf_float+0x90>
 80097f6:	232d      	movs	r3, #45	; 0x2d
 80097f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097fc:	4b93      	ldr	r3, [pc, #588]	; (8009a4c <_printf_float+0x2e0>)
 80097fe:	4894      	ldr	r0, [pc, #592]	; (8009a50 <_printf_float+0x2e4>)
 8009800:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009804:	bf94      	ite	ls
 8009806:	4698      	movls	r8, r3
 8009808:	4680      	movhi	r8, r0
 800980a:	2303      	movs	r3, #3
 800980c:	6123      	str	r3, [r4, #16]
 800980e:	9b05      	ldr	r3, [sp, #20]
 8009810:	f023 0204 	bic.w	r2, r3, #4
 8009814:	6022      	str	r2, [r4, #0]
 8009816:	f04f 0900 	mov.w	r9, #0
 800981a:	9700      	str	r7, [sp, #0]
 800981c:	4633      	mov	r3, r6
 800981e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009820:	4621      	mov	r1, r4
 8009822:	4628      	mov	r0, r5
 8009824:	f000 f9d8 	bl	8009bd8 <_printf_common>
 8009828:	3001      	adds	r0, #1
 800982a:	f040 8090 	bne.w	800994e <_printf_float+0x1e2>
 800982e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009832:	b00d      	add	sp, #52	; 0x34
 8009834:	ecbd 8b02 	vpop	{d8}
 8009838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800983c:	4642      	mov	r2, r8
 800983e:	464b      	mov	r3, r9
 8009840:	4640      	mov	r0, r8
 8009842:	4649      	mov	r1, r9
 8009844:	f7f7 f97a 	bl	8000b3c <__aeabi_dcmpun>
 8009848:	b140      	cbz	r0, 800985c <_printf_float+0xf0>
 800984a:	464b      	mov	r3, r9
 800984c:	2b00      	cmp	r3, #0
 800984e:	bfbc      	itt	lt
 8009850:	232d      	movlt	r3, #45	; 0x2d
 8009852:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009856:	487f      	ldr	r0, [pc, #508]	; (8009a54 <_printf_float+0x2e8>)
 8009858:	4b7f      	ldr	r3, [pc, #508]	; (8009a58 <_printf_float+0x2ec>)
 800985a:	e7d1      	b.n	8009800 <_printf_float+0x94>
 800985c:	6863      	ldr	r3, [r4, #4]
 800985e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009862:	9206      	str	r2, [sp, #24]
 8009864:	1c5a      	adds	r2, r3, #1
 8009866:	d13f      	bne.n	80098e8 <_printf_float+0x17c>
 8009868:	2306      	movs	r3, #6
 800986a:	6063      	str	r3, [r4, #4]
 800986c:	9b05      	ldr	r3, [sp, #20]
 800986e:	6861      	ldr	r1, [r4, #4]
 8009870:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009874:	2300      	movs	r3, #0
 8009876:	9303      	str	r3, [sp, #12]
 8009878:	ab0a      	add	r3, sp, #40	; 0x28
 800987a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800987e:	ab09      	add	r3, sp, #36	; 0x24
 8009880:	ec49 8b10 	vmov	d0, r8, r9
 8009884:	9300      	str	r3, [sp, #0]
 8009886:	6022      	str	r2, [r4, #0]
 8009888:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800988c:	4628      	mov	r0, r5
 800988e:	f7ff fecd 	bl	800962c <__cvt>
 8009892:	9b06      	ldr	r3, [sp, #24]
 8009894:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009896:	2b47      	cmp	r3, #71	; 0x47
 8009898:	4680      	mov	r8, r0
 800989a:	d108      	bne.n	80098ae <_printf_float+0x142>
 800989c:	1cc8      	adds	r0, r1, #3
 800989e:	db02      	blt.n	80098a6 <_printf_float+0x13a>
 80098a0:	6863      	ldr	r3, [r4, #4]
 80098a2:	4299      	cmp	r1, r3
 80098a4:	dd41      	ble.n	800992a <_printf_float+0x1be>
 80098a6:	f1ab 0b02 	sub.w	fp, fp, #2
 80098aa:	fa5f fb8b 	uxtb.w	fp, fp
 80098ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80098b2:	d820      	bhi.n	80098f6 <_printf_float+0x18a>
 80098b4:	3901      	subs	r1, #1
 80098b6:	465a      	mov	r2, fp
 80098b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80098bc:	9109      	str	r1, [sp, #36]	; 0x24
 80098be:	f7ff ff17 	bl	80096f0 <__exponent>
 80098c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098c4:	1813      	adds	r3, r2, r0
 80098c6:	2a01      	cmp	r2, #1
 80098c8:	4681      	mov	r9, r0
 80098ca:	6123      	str	r3, [r4, #16]
 80098cc:	dc02      	bgt.n	80098d4 <_printf_float+0x168>
 80098ce:	6822      	ldr	r2, [r4, #0]
 80098d0:	07d2      	lsls	r2, r2, #31
 80098d2:	d501      	bpl.n	80098d8 <_printf_float+0x16c>
 80098d4:	3301      	adds	r3, #1
 80098d6:	6123      	str	r3, [r4, #16]
 80098d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d09c      	beq.n	800981a <_printf_float+0xae>
 80098e0:	232d      	movs	r3, #45	; 0x2d
 80098e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098e6:	e798      	b.n	800981a <_printf_float+0xae>
 80098e8:	9a06      	ldr	r2, [sp, #24]
 80098ea:	2a47      	cmp	r2, #71	; 0x47
 80098ec:	d1be      	bne.n	800986c <_printf_float+0x100>
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d1bc      	bne.n	800986c <_printf_float+0x100>
 80098f2:	2301      	movs	r3, #1
 80098f4:	e7b9      	b.n	800986a <_printf_float+0xfe>
 80098f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80098fa:	d118      	bne.n	800992e <_printf_float+0x1c2>
 80098fc:	2900      	cmp	r1, #0
 80098fe:	6863      	ldr	r3, [r4, #4]
 8009900:	dd0b      	ble.n	800991a <_printf_float+0x1ae>
 8009902:	6121      	str	r1, [r4, #16]
 8009904:	b913      	cbnz	r3, 800990c <_printf_float+0x1a0>
 8009906:	6822      	ldr	r2, [r4, #0]
 8009908:	07d0      	lsls	r0, r2, #31
 800990a:	d502      	bpl.n	8009912 <_printf_float+0x1a6>
 800990c:	3301      	adds	r3, #1
 800990e:	440b      	add	r3, r1
 8009910:	6123      	str	r3, [r4, #16]
 8009912:	65a1      	str	r1, [r4, #88]	; 0x58
 8009914:	f04f 0900 	mov.w	r9, #0
 8009918:	e7de      	b.n	80098d8 <_printf_float+0x16c>
 800991a:	b913      	cbnz	r3, 8009922 <_printf_float+0x1b6>
 800991c:	6822      	ldr	r2, [r4, #0]
 800991e:	07d2      	lsls	r2, r2, #31
 8009920:	d501      	bpl.n	8009926 <_printf_float+0x1ba>
 8009922:	3302      	adds	r3, #2
 8009924:	e7f4      	b.n	8009910 <_printf_float+0x1a4>
 8009926:	2301      	movs	r3, #1
 8009928:	e7f2      	b.n	8009910 <_printf_float+0x1a4>
 800992a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800992e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009930:	4299      	cmp	r1, r3
 8009932:	db05      	blt.n	8009940 <_printf_float+0x1d4>
 8009934:	6823      	ldr	r3, [r4, #0]
 8009936:	6121      	str	r1, [r4, #16]
 8009938:	07d8      	lsls	r0, r3, #31
 800993a:	d5ea      	bpl.n	8009912 <_printf_float+0x1a6>
 800993c:	1c4b      	adds	r3, r1, #1
 800993e:	e7e7      	b.n	8009910 <_printf_float+0x1a4>
 8009940:	2900      	cmp	r1, #0
 8009942:	bfd4      	ite	le
 8009944:	f1c1 0202 	rsble	r2, r1, #2
 8009948:	2201      	movgt	r2, #1
 800994a:	4413      	add	r3, r2
 800994c:	e7e0      	b.n	8009910 <_printf_float+0x1a4>
 800994e:	6823      	ldr	r3, [r4, #0]
 8009950:	055a      	lsls	r2, r3, #21
 8009952:	d407      	bmi.n	8009964 <_printf_float+0x1f8>
 8009954:	6923      	ldr	r3, [r4, #16]
 8009956:	4642      	mov	r2, r8
 8009958:	4631      	mov	r1, r6
 800995a:	4628      	mov	r0, r5
 800995c:	47b8      	blx	r7
 800995e:	3001      	adds	r0, #1
 8009960:	d12c      	bne.n	80099bc <_printf_float+0x250>
 8009962:	e764      	b.n	800982e <_printf_float+0xc2>
 8009964:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009968:	f240 80e0 	bls.w	8009b2c <_printf_float+0x3c0>
 800996c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009970:	2200      	movs	r2, #0
 8009972:	2300      	movs	r3, #0
 8009974:	f7f7 f8b0 	bl	8000ad8 <__aeabi_dcmpeq>
 8009978:	2800      	cmp	r0, #0
 800997a:	d034      	beq.n	80099e6 <_printf_float+0x27a>
 800997c:	4a37      	ldr	r2, [pc, #220]	; (8009a5c <_printf_float+0x2f0>)
 800997e:	2301      	movs	r3, #1
 8009980:	4631      	mov	r1, r6
 8009982:	4628      	mov	r0, r5
 8009984:	47b8      	blx	r7
 8009986:	3001      	adds	r0, #1
 8009988:	f43f af51 	beq.w	800982e <_printf_float+0xc2>
 800998c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009990:	429a      	cmp	r2, r3
 8009992:	db02      	blt.n	800999a <_printf_float+0x22e>
 8009994:	6823      	ldr	r3, [r4, #0]
 8009996:	07d8      	lsls	r0, r3, #31
 8009998:	d510      	bpl.n	80099bc <_printf_float+0x250>
 800999a:	ee18 3a10 	vmov	r3, s16
 800999e:	4652      	mov	r2, sl
 80099a0:	4631      	mov	r1, r6
 80099a2:	4628      	mov	r0, r5
 80099a4:	47b8      	blx	r7
 80099a6:	3001      	adds	r0, #1
 80099a8:	f43f af41 	beq.w	800982e <_printf_float+0xc2>
 80099ac:	f04f 0800 	mov.w	r8, #0
 80099b0:	f104 091a 	add.w	r9, r4, #26
 80099b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099b6:	3b01      	subs	r3, #1
 80099b8:	4543      	cmp	r3, r8
 80099ba:	dc09      	bgt.n	80099d0 <_printf_float+0x264>
 80099bc:	6823      	ldr	r3, [r4, #0]
 80099be:	079b      	lsls	r3, r3, #30
 80099c0:	f100 8105 	bmi.w	8009bce <_printf_float+0x462>
 80099c4:	68e0      	ldr	r0, [r4, #12]
 80099c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099c8:	4298      	cmp	r0, r3
 80099ca:	bfb8      	it	lt
 80099cc:	4618      	movlt	r0, r3
 80099ce:	e730      	b.n	8009832 <_printf_float+0xc6>
 80099d0:	2301      	movs	r3, #1
 80099d2:	464a      	mov	r2, r9
 80099d4:	4631      	mov	r1, r6
 80099d6:	4628      	mov	r0, r5
 80099d8:	47b8      	blx	r7
 80099da:	3001      	adds	r0, #1
 80099dc:	f43f af27 	beq.w	800982e <_printf_float+0xc2>
 80099e0:	f108 0801 	add.w	r8, r8, #1
 80099e4:	e7e6      	b.n	80099b4 <_printf_float+0x248>
 80099e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	dc39      	bgt.n	8009a60 <_printf_float+0x2f4>
 80099ec:	4a1b      	ldr	r2, [pc, #108]	; (8009a5c <_printf_float+0x2f0>)
 80099ee:	2301      	movs	r3, #1
 80099f0:	4631      	mov	r1, r6
 80099f2:	4628      	mov	r0, r5
 80099f4:	47b8      	blx	r7
 80099f6:	3001      	adds	r0, #1
 80099f8:	f43f af19 	beq.w	800982e <_printf_float+0xc2>
 80099fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a00:	4313      	orrs	r3, r2
 8009a02:	d102      	bne.n	8009a0a <_printf_float+0x29e>
 8009a04:	6823      	ldr	r3, [r4, #0]
 8009a06:	07d9      	lsls	r1, r3, #31
 8009a08:	d5d8      	bpl.n	80099bc <_printf_float+0x250>
 8009a0a:	ee18 3a10 	vmov	r3, s16
 8009a0e:	4652      	mov	r2, sl
 8009a10:	4631      	mov	r1, r6
 8009a12:	4628      	mov	r0, r5
 8009a14:	47b8      	blx	r7
 8009a16:	3001      	adds	r0, #1
 8009a18:	f43f af09 	beq.w	800982e <_printf_float+0xc2>
 8009a1c:	f04f 0900 	mov.w	r9, #0
 8009a20:	f104 0a1a 	add.w	sl, r4, #26
 8009a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a26:	425b      	negs	r3, r3
 8009a28:	454b      	cmp	r3, r9
 8009a2a:	dc01      	bgt.n	8009a30 <_printf_float+0x2c4>
 8009a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a2e:	e792      	b.n	8009956 <_printf_float+0x1ea>
 8009a30:	2301      	movs	r3, #1
 8009a32:	4652      	mov	r2, sl
 8009a34:	4631      	mov	r1, r6
 8009a36:	4628      	mov	r0, r5
 8009a38:	47b8      	blx	r7
 8009a3a:	3001      	adds	r0, #1
 8009a3c:	f43f aef7 	beq.w	800982e <_printf_float+0xc2>
 8009a40:	f109 0901 	add.w	r9, r9, #1
 8009a44:	e7ee      	b.n	8009a24 <_printf_float+0x2b8>
 8009a46:	bf00      	nop
 8009a48:	7fefffff 	.word	0x7fefffff
 8009a4c:	0800cf74 	.word	0x0800cf74
 8009a50:	0800cf78 	.word	0x0800cf78
 8009a54:	0800cf80 	.word	0x0800cf80
 8009a58:	0800cf7c 	.word	0x0800cf7c
 8009a5c:	0800cf84 	.word	0x0800cf84
 8009a60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a64:	429a      	cmp	r2, r3
 8009a66:	bfa8      	it	ge
 8009a68:	461a      	movge	r2, r3
 8009a6a:	2a00      	cmp	r2, #0
 8009a6c:	4691      	mov	r9, r2
 8009a6e:	dc37      	bgt.n	8009ae0 <_printf_float+0x374>
 8009a70:	f04f 0b00 	mov.w	fp, #0
 8009a74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a78:	f104 021a 	add.w	r2, r4, #26
 8009a7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a7e:	9305      	str	r3, [sp, #20]
 8009a80:	eba3 0309 	sub.w	r3, r3, r9
 8009a84:	455b      	cmp	r3, fp
 8009a86:	dc33      	bgt.n	8009af0 <_printf_float+0x384>
 8009a88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	db3b      	blt.n	8009b08 <_printf_float+0x39c>
 8009a90:	6823      	ldr	r3, [r4, #0]
 8009a92:	07da      	lsls	r2, r3, #31
 8009a94:	d438      	bmi.n	8009b08 <_printf_float+0x39c>
 8009a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a98:	9a05      	ldr	r2, [sp, #20]
 8009a9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a9c:	1a9a      	subs	r2, r3, r2
 8009a9e:	eba3 0901 	sub.w	r9, r3, r1
 8009aa2:	4591      	cmp	r9, r2
 8009aa4:	bfa8      	it	ge
 8009aa6:	4691      	movge	r9, r2
 8009aa8:	f1b9 0f00 	cmp.w	r9, #0
 8009aac:	dc35      	bgt.n	8009b1a <_printf_float+0x3ae>
 8009aae:	f04f 0800 	mov.w	r8, #0
 8009ab2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ab6:	f104 0a1a 	add.w	sl, r4, #26
 8009aba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009abe:	1a9b      	subs	r3, r3, r2
 8009ac0:	eba3 0309 	sub.w	r3, r3, r9
 8009ac4:	4543      	cmp	r3, r8
 8009ac6:	f77f af79 	ble.w	80099bc <_printf_float+0x250>
 8009aca:	2301      	movs	r3, #1
 8009acc:	4652      	mov	r2, sl
 8009ace:	4631      	mov	r1, r6
 8009ad0:	4628      	mov	r0, r5
 8009ad2:	47b8      	blx	r7
 8009ad4:	3001      	adds	r0, #1
 8009ad6:	f43f aeaa 	beq.w	800982e <_printf_float+0xc2>
 8009ada:	f108 0801 	add.w	r8, r8, #1
 8009ade:	e7ec      	b.n	8009aba <_printf_float+0x34e>
 8009ae0:	4613      	mov	r3, r2
 8009ae2:	4631      	mov	r1, r6
 8009ae4:	4642      	mov	r2, r8
 8009ae6:	4628      	mov	r0, r5
 8009ae8:	47b8      	blx	r7
 8009aea:	3001      	adds	r0, #1
 8009aec:	d1c0      	bne.n	8009a70 <_printf_float+0x304>
 8009aee:	e69e      	b.n	800982e <_printf_float+0xc2>
 8009af0:	2301      	movs	r3, #1
 8009af2:	4631      	mov	r1, r6
 8009af4:	4628      	mov	r0, r5
 8009af6:	9205      	str	r2, [sp, #20]
 8009af8:	47b8      	blx	r7
 8009afa:	3001      	adds	r0, #1
 8009afc:	f43f ae97 	beq.w	800982e <_printf_float+0xc2>
 8009b00:	9a05      	ldr	r2, [sp, #20]
 8009b02:	f10b 0b01 	add.w	fp, fp, #1
 8009b06:	e7b9      	b.n	8009a7c <_printf_float+0x310>
 8009b08:	ee18 3a10 	vmov	r3, s16
 8009b0c:	4652      	mov	r2, sl
 8009b0e:	4631      	mov	r1, r6
 8009b10:	4628      	mov	r0, r5
 8009b12:	47b8      	blx	r7
 8009b14:	3001      	adds	r0, #1
 8009b16:	d1be      	bne.n	8009a96 <_printf_float+0x32a>
 8009b18:	e689      	b.n	800982e <_printf_float+0xc2>
 8009b1a:	9a05      	ldr	r2, [sp, #20]
 8009b1c:	464b      	mov	r3, r9
 8009b1e:	4442      	add	r2, r8
 8009b20:	4631      	mov	r1, r6
 8009b22:	4628      	mov	r0, r5
 8009b24:	47b8      	blx	r7
 8009b26:	3001      	adds	r0, #1
 8009b28:	d1c1      	bne.n	8009aae <_printf_float+0x342>
 8009b2a:	e680      	b.n	800982e <_printf_float+0xc2>
 8009b2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b2e:	2a01      	cmp	r2, #1
 8009b30:	dc01      	bgt.n	8009b36 <_printf_float+0x3ca>
 8009b32:	07db      	lsls	r3, r3, #31
 8009b34:	d538      	bpl.n	8009ba8 <_printf_float+0x43c>
 8009b36:	2301      	movs	r3, #1
 8009b38:	4642      	mov	r2, r8
 8009b3a:	4631      	mov	r1, r6
 8009b3c:	4628      	mov	r0, r5
 8009b3e:	47b8      	blx	r7
 8009b40:	3001      	adds	r0, #1
 8009b42:	f43f ae74 	beq.w	800982e <_printf_float+0xc2>
 8009b46:	ee18 3a10 	vmov	r3, s16
 8009b4a:	4652      	mov	r2, sl
 8009b4c:	4631      	mov	r1, r6
 8009b4e:	4628      	mov	r0, r5
 8009b50:	47b8      	blx	r7
 8009b52:	3001      	adds	r0, #1
 8009b54:	f43f ae6b 	beq.w	800982e <_printf_float+0xc2>
 8009b58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	2300      	movs	r3, #0
 8009b60:	f7f6 ffba 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b64:	b9d8      	cbnz	r0, 8009b9e <_printf_float+0x432>
 8009b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b68:	f108 0201 	add.w	r2, r8, #1
 8009b6c:	3b01      	subs	r3, #1
 8009b6e:	4631      	mov	r1, r6
 8009b70:	4628      	mov	r0, r5
 8009b72:	47b8      	blx	r7
 8009b74:	3001      	adds	r0, #1
 8009b76:	d10e      	bne.n	8009b96 <_printf_float+0x42a>
 8009b78:	e659      	b.n	800982e <_printf_float+0xc2>
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	4652      	mov	r2, sl
 8009b7e:	4631      	mov	r1, r6
 8009b80:	4628      	mov	r0, r5
 8009b82:	47b8      	blx	r7
 8009b84:	3001      	adds	r0, #1
 8009b86:	f43f ae52 	beq.w	800982e <_printf_float+0xc2>
 8009b8a:	f108 0801 	add.w	r8, r8, #1
 8009b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b90:	3b01      	subs	r3, #1
 8009b92:	4543      	cmp	r3, r8
 8009b94:	dcf1      	bgt.n	8009b7a <_printf_float+0x40e>
 8009b96:	464b      	mov	r3, r9
 8009b98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009b9c:	e6dc      	b.n	8009958 <_printf_float+0x1ec>
 8009b9e:	f04f 0800 	mov.w	r8, #0
 8009ba2:	f104 0a1a 	add.w	sl, r4, #26
 8009ba6:	e7f2      	b.n	8009b8e <_printf_float+0x422>
 8009ba8:	2301      	movs	r3, #1
 8009baa:	4642      	mov	r2, r8
 8009bac:	e7df      	b.n	8009b6e <_printf_float+0x402>
 8009bae:	2301      	movs	r3, #1
 8009bb0:	464a      	mov	r2, r9
 8009bb2:	4631      	mov	r1, r6
 8009bb4:	4628      	mov	r0, r5
 8009bb6:	47b8      	blx	r7
 8009bb8:	3001      	adds	r0, #1
 8009bba:	f43f ae38 	beq.w	800982e <_printf_float+0xc2>
 8009bbe:	f108 0801 	add.w	r8, r8, #1
 8009bc2:	68e3      	ldr	r3, [r4, #12]
 8009bc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009bc6:	1a5b      	subs	r3, r3, r1
 8009bc8:	4543      	cmp	r3, r8
 8009bca:	dcf0      	bgt.n	8009bae <_printf_float+0x442>
 8009bcc:	e6fa      	b.n	80099c4 <_printf_float+0x258>
 8009bce:	f04f 0800 	mov.w	r8, #0
 8009bd2:	f104 0919 	add.w	r9, r4, #25
 8009bd6:	e7f4      	b.n	8009bc2 <_printf_float+0x456>

08009bd8 <_printf_common>:
 8009bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bdc:	4616      	mov	r6, r2
 8009bde:	4699      	mov	r9, r3
 8009be0:	688a      	ldr	r2, [r1, #8]
 8009be2:	690b      	ldr	r3, [r1, #16]
 8009be4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009be8:	4293      	cmp	r3, r2
 8009bea:	bfb8      	it	lt
 8009bec:	4613      	movlt	r3, r2
 8009bee:	6033      	str	r3, [r6, #0]
 8009bf0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009bf4:	4607      	mov	r7, r0
 8009bf6:	460c      	mov	r4, r1
 8009bf8:	b10a      	cbz	r2, 8009bfe <_printf_common+0x26>
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	6033      	str	r3, [r6, #0]
 8009bfe:	6823      	ldr	r3, [r4, #0]
 8009c00:	0699      	lsls	r1, r3, #26
 8009c02:	bf42      	ittt	mi
 8009c04:	6833      	ldrmi	r3, [r6, #0]
 8009c06:	3302      	addmi	r3, #2
 8009c08:	6033      	strmi	r3, [r6, #0]
 8009c0a:	6825      	ldr	r5, [r4, #0]
 8009c0c:	f015 0506 	ands.w	r5, r5, #6
 8009c10:	d106      	bne.n	8009c20 <_printf_common+0x48>
 8009c12:	f104 0a19 	add.w	sl, r4, #25
 8009c16:	68e3      	ldr	r3, [r4, #12]
 8009c18:	6832      	ldr	r2, [r6, #0]
 8009c1a:	1a9b      	subs	r3, r3, r2
 8009c1c:	42ab      	cmp	r3, r5
 8009c1e:	dc26      	bgt.n	8009c6e <_printf_common+0x96>
 8009c20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c24:	1e13      	subs	r3, r2, #0
 8009c26:	6822      	ldr	r2, [r4, #0]
 8009c28:	bf18      	it	ne
 8009c2a:	2301      	movne	r3, #1
 8009c2c:	0692      	lsls	r2, r2, #26
 8009c2e:	d42b      	bmi.n	8009c88 <_printf_common+0xb0>
 8009c30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c34:	4649      	mov	r1, r9
 8009c36:	4638      	mov	r0, r7
 8009c38:	47c0      	blx	r8
 8009c3a:	3001      	adds	r0, #1
 8009c3c:	d01e      	beq.n	8009c7c <_printf_common+0xa4>
 8009c3e:	6823      	ldr	r3, [r4, #0]
 8009c40:	68e5      	ldr	r5, [r4, #12]
 8009c42:	6832      	ldr	r2, [r6, #0]
 8009c44:	f003 0306 	and.w	r3, r3, #6
 8009c48:	2b04      	cmp	r3, #4
 8009c4a:	bf08      	it	eq
 8009c4c:	1aad      	subeq	r5, r5, r2
 8009c4e:	68a3      	ldr	r3, [r4, #8]
 8009c50:	6922      	ldr	r2, [r4, #16]
 8009c52:	bf0c      	ite	eq
 8009c54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c58:	2500      	movne	r5, #0
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	bfc4      	itt	gt
 8009c5e:	1a9b      	subgt	r3, r3, r2
 8009c60:	18ed      	addgt	r5, r5, r3
 8009c62:	2600      	movs	r6, #0
 8009c64:	341a      	adds	r4, #26
 8009c66:	42b5      	cmp	r5, r6
 8009c68:	d11a      	bne.n	8009ca0 <_printf_common+0xc8>
 8009c6a:	2000      	movs	r0, #0
 8009c6c:	e008      	b.n	8009c80 <_printf_common+0xa8>
 8009c6e:	2301      	movs	r3, #1
 8009c70:	4652      	mov	r2, sl
 8009c72:	4649      	mov	r1, r9
 8009c74:	4638      	mov	r0, r7
 8009c76:	47c0      	blx	r8
 8009c78:	3001      	adds	r0, #1
 8009c7a:	d103      	bne.n	8009c84 <_printf_common+0xac>
 8009c7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c84:	3501      	adds	r5, #1
 8009c86:	e7c6      	b.n	8009c16 <_printf_common+0x3e>
 8009c88:	18e1      	adds	r1, r4, r3
 8009c8a:	1c5a      	adds	r2, r3, #1
 8009c8c:	2030      	movs	r0, #48	; 0x30
 8009c8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c92:	4422      	add	r2, r4
 8009c94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c9c:	3302      	adds	r3, #2
 8009c9e:	e7c7      	b.n	8009c30 <_printf_common+0x58>
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	4622      	mov	r2, r4
 8009ca4:	4649      	mov	r1, r9
 8009ca6:	4638      	mov	r0, r7
 8009ca8:	47c0      	blx	r8
 8009caa:	3001      	adds	r0, #1
 8009cac:	d0e6      	beq.n	8009c7c <_printf_common+0xa4>
 8009cae:	3601      	adds	r6, #1
 8009cb0:	e7d9      	b.n	8009c66 <_printf_common+0x8e>
	...

08009cb4 <_printf_i>:
 8009cb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009cb8:	7e0f      	ldrb	r7, [r1, #24]
 8009cba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009cbc:	2f78      	cmp	r7, #120	; 0x78
 8009cbe:	4691      	mov	r9, r2
 8009cc0:	4680      	mov	r8, r0
 8009cc2:	460c      	mov	r4, r1
 8009cc4:	469a      	mov	sl, r3
 8009cc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009cca:	d807      	bhi.n	8009cdc <_printf_i+0x28>
 8009ccc:	2f62      	cmp	r7, #98	; 0x62
 8009cce:	d80a      	bhi.n	8009ce6 <_printf_i+0x32>
 8009cd0:	2f00      	cmp	r7, #0
 8009cd2:	f000 80d8 	beq.w	8009e86 <_printf_i+0x1d2>
 8009cd6:	2f58      	cmp	r7, #88	; 0x58
 8009cd8:	f000 80a3 	beq.w	8009e22 <_printf_i+0x16e>
 8009cdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ce0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ce4:	e03a      	b.n	8009d5c <_printf_i+0xa8>
 8009ce6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009cea:	2b15      	cmp	r3, #21
 8009cec:	d8f6      	bhi.n	8009cdc <_printf_i+0x28>
 8009cee:	a101      	add	r1, pc, #4	; (adr r1, 8009cf4 <_printf_i+0x40>)
 8009cf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009cf4:	08009d4d 	.word	0x08009d4d
 8009cf8:	08009d61 	.word	0x08009d61
 8009cfc:	08009cdd 	.word	0x08009cdd
 8009d00:	08009cdd 	.word	0x08009cdd
 8009d04:	08009cdd 	.word	0x08009cdd
 8009d08:	08009cdd 	.word	0x08009cdd
 8009d0c:	08009d61 	.word	0x08009d61
 8009d10:	08009cdd 	.word	0x08009cdd
 8009d14:	08009cdd 	.word	0x08009cdd
 8009d18:	08009cdd 	.word	0x08009cdd
 8009d1c:	08009cdd 	.word	0x08009cdd
 8009d20:	08009e6d 	.word	0x08009e6d
 8009d24:	08009d91 	.word	0x08009d91
 8009d28:	08009e4f 	.word	0x08009e4f
 8009d2c:	08009cdd 	.word	0x08009cdd
 8009d30:	08009cdd 	.word	0x08009cdd
 8009d34:	08009e8f 	.word	0x08009e8f
 8009d38:	08009cdd 	.word	0x08009cdd
 8009d3c:	08009d91 	.word	0x08009d91
 8009d40:	08009cdd 	.word	0x08009cdd
 8009d44:	08009cdd 	.word	0x08009cdd
 8009d48:	08009e57 	.word	0x08009e57
 8009d4c:	682b      	ldr	r3, [r5, #0]
 8009d4e:	1d1a      	adds	r2, r3, #4
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	602a      	str	r2, [r5, #0]
 8009d54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	e0a3      	b.n	8009ea8 <_printf_i+0x1f4>
 8009d60:	6820      	ldr	r0, [r4, #0]
 8009d62:	6829      	ldr	r1, [r5, #0]
 8009d64:	0606      	lsls	r6, r0, #24
 8009d66:	f101 0304 	add.w	r3, r1, #4
 8009d6a:	d50a      	bpl.n	8009d82 <_printf_i+0xce>
 8009d6c:	680e      	ldr	r6, [r1, #0]
 8009d6e:	602b      	str	r3, [r5, #0]
 8009d70:	2e00      	cmp	r6, #0
 8009d72:	da03      	bge.n	8009d7c <_printf_i+0xc8>
 8009d74:	232d      	movs	r3, #45	; 0x2d
 8009d76:	4276      	negs	r6, r6
 8009d78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d7c:	485e      	ldr	r0, [pc, #376]	; (8009ef8 <_printf_i+0x244>)
 8009d7e:	230a      	movs	r3, #10
 8009d80:	e019      	b.n	8009db6 <_printf_i+0x102>
 8009d82:	680e      	ldr	r6, [r1, #0]
 8009d84:	602b      	str	r3, [r5, #0]
 8009d86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d8a:	bf18      	it	ne
 8009d8c:	b236      	sxthne	r6, r6
 8009d8e:	e7ef      	b.n	8009d70 <_printf_i+0xbc>
 8009d90:	682b      	ldr	r3, [r5, #0]
 8009d92:	6820      	ldr	r0, [r4, #0]
 8009d94:	1d19      	adds	r1, r3, #4
 8009d96:	6029      	str	r1, [r5, #0]
 8009d98:	0601      	lsls	r1, r0, #24
 8009d9a:	d501      	bpl.n	8009da0 <_printf_i+0xec>
 8009d9c:	681e      	ldr	r6, [r3, #0]
 8009d9e:	e002      	b.n	8009da6 <_printf_i+0xf2>
 8009da0:	0646      	lsls	r6, r0, #25
 8009da2:	d5fb      	bpl.n	8009d9c <_printf_i+0xe8>
 8009da4:	881e      	ldrh	r6, [r3, #0]
 8009da6:	4854      	ldr	r0, [pc, #336]	; (8009ef8 <_printf_i+0x244>)
 8009da8:	2f6f      	cmp	r7, #111	; 0x6f
 8009daa:	bf0c      	ite	eq
 8009dac:	2308      	moveq	r3, #8
 8009dae:	230a      	movne	r3, #10
 8009db0:	2100      	movs	r1, #0
 8009db2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009db6:	6865      	ldr	r5, [r4, #4]
 8009db8:	60a5      	str	r5, [r4, #8]
 8009dba:	2d00      	cmp	r5, #0
 8009dbc:	bfa2      	ittt	ge
 8009dbe:	6821      	ldrge	r1, [r4, #0]
 8009dc0:	f021 0104 	bicge.w	r1, r1, #4
 8009dc4:	6021      	strge	r1, [r4, #0]
 8009dc6:	b90e      	cbnz	r6, 8009dcc <_printf_i+0x118>
 8009dc8:	2d00      	cmp	r5, #0
 8009dca:	d04d      	beq.n	8009e68 <_printf_i+0x1b4>
 8009dcc:	4615      	mov	r5, r2
 8009dce:	fbb6 f1f3 	udiv	r1, r6, r3
 8009dd2:	fb03 6711 	mls	r7, r3, r1, r6
 8009dd6:	5dc7      	ldrb	r7, [r0, r7]
 8009dd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009ddc:	4637      	mov	r7, r6
 8009dde:	42bb      	cmp	r3, r7
 8009de0:	460e      	mov	r6, r1
 8009de2:	d9f4      	bls.n	8009dce <_printf_i+0x11a>
 8009de4:	2b08      	cmp	r3, #8
 8009de6:	d10b      	bne.n	8009e00 <_printf_i+0x14c>
 8009de8:	6823      	ldr	r3, [r4, #0]
 8009dea:	07de      	lsls	r6, r3, #31
 8009dec:	d508      	bpl.n	8009e00 <_printf_i+0x14c>
 8009dee:	6923      	ldr	r3, [r4, #16]
 8009df0:	6861      	ldr	r1, [r4, #4]
 8009df2:	4299      	cmp	r1, r3
 8009df4:	bfde      	ittt	le
 8009df6:	2330      	movle	r3, #48	; 0x30
 8009df8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009dfc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009e00:	1b52      	subs	r2, r2, r5
 8009e02:	6122      	str	r2, [r4, #16]
 8009e04:	f8cd a000 	str.w	sl, [sp]
 8009e08:	464b      	mov	r3, r9
 8009e0a:	aa03      	add	r2, sp, #12
 8009e0c:	4621      	mov	r1, r4
 8009e0e:	4640      	mov	r0, r8
 8009e10:	f7ff fee2 	bl	8009bd8 <_printf_common>
 8009e14:	3001      	adds	r0, #1
 8009e16:	d14c      	bne.n	8009eb2 <_printf_i+0x1fe>
 8009e18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e1c:	b004      	add	sp, #16
 8009e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e22:	4835      	ldr	r0, [pc, #212]	; (8009ef8 <_printf_i+0x244>)
 8009e24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009e28:	6829      	ldr	r1, [r5, #0]
 8009e2a:	6823      	ldr	r3, [r4, #0]
 8009e2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009e30:	6029      	str	r1, [r5, #0]
 8009e32:	061d      	lsls	r5, r3, #24
 8009e34:	d514      	bpl.n	8009e60 <_printf_i+0x1ac>
 8009e36:	07df      	lsls	r7, r3, #31
 8009e38:	bf44      	itt	mi
 8009e3a:	f043 0320 	orrmi.w	r3, r3, #32
 8009e3e:	6023      	strmi	r3, [r4, #0]
 8009e40:	b91e      	cbnz	r6, 8009e4a <_printf_i+0x196>
 8009e42:	6823      	ldr	r3, [r4, #0]
 8009e44:	f023 0320 	bic.w	r3, r3, #32
 8009e48:	6023      	str	r3, [r4, #0]
 8009e4a:	2310      	movs	r3, #16
 8009e4c:	e7b0      	b.n	8009db0 <_printf_i+0xfc>
 8009e4e:	6823      	ldr	r3, [r4, #0]
 8009e50:	f043 0320 	orr.w	r3, r3, #32
 8009e54:	6023      	str	r3, [r4, #0]
 8009e56:	2378      	movs	r3, #120	; 0x78
 8009e58:	4828      	ldr	r0, [pc, #160]	; (8009efc <_printf_i+0x248>)
 8009e5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e5e:	e7e3      	b.n	8009e28 <_printf_i+0x174>
 8009e60:	0659      	lsls	r1, r3, #25
 8009e62:	bf48      	it	mi
 8009e64:	b2b6      	uxthmi	r6, r6
 8009e66:	e7e6      	b.n	8009e36 <_printf_i+0x182>
 8009e68:	4615      	mov	r5, r2
 8009e6a:	e7bb      	b.n	8009de4 <_printf_i+0x130>
 8009e6c:	682b      	ldr	r3, [r5, #0]
 8009e6e:	6826      	ldr	r6, [r4, #0]
 8009e70:	6961      	ldr	r1, [r4, #20]
 8009e72:	1d18      	adds	r0, r3, #4
 8009e74:	6028      	str	r0, [r5, #0]
 8009e76:	0635      	lsls	r5, r6, #24
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	d501      	bpl.n	8009e80 <_printf_i+0x1cc>
 8009e7c:	6019      	str	r1, [r3, #0]
 8009e7e:	e002      	b.n	8009e86 <_printf_i+0x1d2>
 8009e80:	0670      	lsls	r0, r6, #25
 8009e82:	d5fb      	bpl.n	8009e7c <_printf_i+0x1c8>
 8009e84:	8019      	strh	r1, [r3, #0]
 8009e86:	2300      	movs	r3, #0
 8009e88:	6123      	str	r3, [r4, #16]
 8009e8a:	4615      	mov	r5, r2
 8009e8c:	e7ba      	b.n	8009e04 <_printf_i+0x150>
 8009e8e:	682b      	ldr	r3, [r5, #0]
 8009e90:	1d1a      	adds	r2, r3, #4
 8009e92:	602a      	str	r2, [r5, #0]
 8009e94:	681d      	ldr	r5, [r3, #0]
 8009e96:	6862      	ldr	r2, [r4, #4]
 8009e98:	2100      	movs	r1, #0
 8009e9a:	4628      	mov	r0, r5
 8009e9c:	f7f6 f9a8 	bl	80001f0 <memchr>
 8009ea0:	b108      	cbz	r0, 8009ea6 <_printf_i+0x1f2>
 8009ea2:	1b40      	subs	r0, r0, r5
 8009ea4:	6060      	str	r0, [r4, #4]
 8009ea6:	6863      	ldr	r3, [r4, #4]
 8009ea8:	6123      	str	r3, [r4, #16]
 8009eaa:	2300      	movs	r3, #0
 8009eac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009eb0:	e7a8      	b.n	8009e04 <_printf_i+0x150>
 8009eb2:	6923      	ldr	r3, [r4, #16]
 8009eb4:	462a      	mov	r2, r5
 8009eb6:	4649      	mov	r1, r9
 8009eb8:	4640      	mov	r0, r8
 8009eba:	47d0      	blx	sl
 8009ebc:	3001      	adds	r0, #1
 8009ebe:	d0ab      	beq.n	8009e18 <_printf_i+0x164>
 8009ec0:	6823      	ldr	r3, [r4, #0]
 8009ec2:	079b      	lsls	r3, r3, #30
 8009ec4:	d413      	bmi.n	8009eee <_printf_i+0x23a>
 8009ec6:	68e0      	ldr	r0, [r4, #12]
 8009ec8:	9b03      	ldr	r3, [sp, #12]
 8009eca:	4298      	cmp	r0, r3
 8009ecc:	bfb8      	it	lt
 8009ece:	4618      	movlt	r0, r3
 8009ed0:	e7a4      	b.n	8009e1c <_printf_i+0x168>
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	4632      	mov	r2, r6
 8009ed6:	4649      	mov	r1, r9
 8009ed8:	4640      	mov	r0, r8
 8009eda:	47d0      	blx	sl
 8009edc:	3001      	adds	r0, #1
 8009ede:	d09b      	beq.n	8009e18 <_printf_i+0x164>
 8009ee0:	3501      	adds	r5, #1
 8009ee2:	68e3      	ldr	r3, [r4, #12]
 8009ee4:	9903      	ldr	r1, [sp, #12]
 8009ee6:	1a5b      	subs	r3, r3, r1
 8009ee8:	42ab      	cmp	r3, r5
 8009eea:	dcf2      	bgt.n	8009ed2 <_printf_i+0x21e>
 8009eec:	e7eb      	b.n	8009ec6 <_printf_i+0x212>
 8009eee:	2500      	movs	r5, #0
 8009ef0:	f104 0619 	add.w	r6, r4, #25
 8009ef4:	e7f5      	b.n	8009ee2 <_printf_i+0x22e>
 8009ef6:	bf00      	nop
 8009ef8:	0800cf86 	.word	0x0800cf86
 8009efc:	0800cf97 	.word	0x0800cf97

08009f00 <iprintf>:
 8009f00:	b40f      	push	{r0, r1, r2, r3}
 8009f02:	4b0a      	ldr	r3, [pc, #40]	; (8009f2c <iprintf+0x2c>)
 8009f04:	b513      	push	{r0, r1, r4, lr}
 8009f06:	681c      	ldr	r4, [r3, #0]
 8009f08:	b124      	cbz	r4, 8009f14 <iprintf+0x14>
 8009f0a:	69a3      	ldr	r3, [r4, #24]
 8009f0c:	b913      	cbnz	r3, 8009f14 <iprintf+0x14>
 8009f0e:	4620      	mov	r0, r4
 8009f10:	f001 f8da 	bl	800b0c8 <__sinit>
 8009f14:	ab05      	add	r3, sp, #20
 8009f16:	9a04      	ldr	r2, [sp, #16]
 8009f18:	68a1      	ldr	r1, [r4, #8]
 8009f1a:	9301      	str	r3, [sp, #4]
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	f001 fe97 	bl	800bc50 <_vfiprintf_r>
 8009f22:	b002      	add	sp, #8
 8009f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f28:	b004      	add	sp, #16
 8009f2a:	4770      	bx	lr
 8009f2c:	20000100 	.word	0x20000100

08009f30 <_puts_r>:
 8009f30:	b570      	push	{r4, r5, r6, lr}
 8009f32:	460e      	mov	r6, r1
 8009f34:	4605      	mov	r5, r0
 8009f36:	b118      	cbz	r0, 8009f40 <_puts_r+0x10>
 8009f38:	6983      	ldr	r3, [r0, #24]
 8009f3a:	b90b      	cbnz	r3, 8009f40 <_puts_r+0x10>
 8009f3c:	f001 f8c4 	bl	800b0c8 <__sinit>
 8009f40:	69ab      	ldr	r3, [r5, #24]
 8009f42:	68ac      	ldr	r4, [r5, #8]
 8009f44:	b913      	cbnz	r3, 8009f4c <_puts_r+0x1c>
 8009f46:	4628      	mov	r0, r5
 8009f48:	f001 f8be 	bl	800b0c8 <__sinit>
 8009f4c:	4b2c      	ldr	r3, [pc, #176]	; (800a000 <_puts_r+0xd0>)
 8009f4e:	429c      	cmp	r4, r3
 8009f50:	d120      	bne.n	8009f94 <_puts_r+0x64>
 8009f52:	686c      	ldr	r4, [r5, #4]
 8009f54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f56:	07db      	lsls	r3, r3, #31
 8009f58:	d405      	bmi.n	8009f66 <_puts_r+0x36>
 8009f5a:	89a3      	ldrh	r3, [r4, #12]
 8009f5c:	0598      	lsls	r0, r3, #22
 8009f5e:	d402      	bmi.n	8009f66 <_puts_r+0x36>
 8009f60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f62:	f001 f954 	bl	800b20e <__retarget_lock_acquire_recursive>
 8009f66:	89a3      	ldrh	r3, [r4, #12]
 8009f68:	0719      	lsls	r1, r3, #28
 8009f6a:	d51d      	bpl.n	8009fa8 <_puts_r+0x78>
 8009f6c:	6923      	ldr	r3, [r4, #16]
 8009f6e:	b1db      	cbz	r3, 8009fa8 <_puts_r+0x78>
 8009f70:	3e01      	subs	r6, #1
 8009f72:	68a3      	ldr	r3, [r4, #8]
 8009f74:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009f78:	3b01      	subs	r3, #1
 8009f7a:	60a3      	str	r3, [r4, #8]
 8009f7c:	bb39      	cbnz	r1, 8009fce <_puts_r+0x9e>
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	da38      	bge.n	8009ff4 <_puts_r+0xc4>
 8009f82:	4622      	mov	r2, r4
 8009f84:	210a      	movs	r1, #10
 8009f86:	4628      	mov	r0, r5
 8009f88:	f000 f848 	bl	800a01c <__swbuf_r>
 8009f8c:	3001      	adds	r0, #1
 8009f8e:	d011      	beq.n	8009fb4 <_puts_r+0x84>
 8009f90:	250a      	movs	r5, #10
 8009f92:	e011      	b.n	8009fb8 <_puts_r+0x88>
 8009f94:	4b1b      	ldr	r3, [pc, #108]	; (800a004 <_puts_r+0xd4>)
 8009f96:	429c      	cmp	r4, r3
 8009f98:	d101      	bne.n	8009f9e <_puts_r+0x6e>
 8009f9a:	68ac      	ldr	r4, [r5, #8]
 8009f9c:	e7da      	b.n	8009f54 <_puts_r+0x24>
 8009f9e:	4b1a      	ldr	r3, [pc, #104]	; (800a008 <_puts_r+0xd8>)
 8009fa0:	429c      	cmp	r4, r3
 8009fa2:	bf08      	it	eq
 8009fa4:	68ec      	ldreq	r4, [r5, #12]
 8009fa6:	e7d5      	b.n	8009f54 <_puts_r+0x24>
 8009fa8:	4621      	mov	r1, r4
 8009faa:	4628      	mov	r0, r5
 8009fac:	f000 f888 	bl	800a0c0 <__swsetup_r>
 8009fb0:	2800      	cmp	r0, #0
 8009fb2:	d0dd      	beq.n	8009f70 <_puts_r+0x40>
 8009fb4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009fb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fba:	07da      	lsls	r2, r3, #31
 8009fbc:	d405      	bmi.n	8009fca <_puts_r+0x9a>
 8009fbe:	89a3      	ldrh	r3, [r4, #12]
 8009fc0:	059b      	lsls	r3, r3, #22
 8009fc2:	d402      	bmi.n	8009fca <_puts_r+0x9a>
 8009fc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fc6:	f001 f923 	bl	800b210 <__retarget_lock_release_recursive>
 8009fca:	4628      	mov	r0, r5
 8009fcc:	bd70      	pop	{r4, r5, r6, pc}
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	da04      	bge.n	8009fdc <_puts_r+0xac>
 8009fd2:	69a2      	ldr	r2, [r4, #24]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	dc06      	bgt.n	8009fe6 <_puts_r+0xb6>
 8009fd8:	290a      	cmp	r1, #10
 8009fda:	d004      	beq.n	8009fe6 <_puts_r+0xb6>
 8009fdc:	6823      	ldr	r3, [r4, #0]
 8009fde:	1c5a      	adds	r2, r3, #1
 8009fe0:	6022      	str	r2, [r4, #0]
 8009fe2:	7019      	strb	r1, [r3, #0]
 8009fe4:	e7c5      	b.n	8009f72 <_puts_r+0x42>
 8009fe6:	4622      	mov	r2, r4
 8009fe8:	4628      	mov	r0, r5
 8009fea:	f000 f817 	bl	800a01c <__swbuf_r>
 8009fee:	3001      	adds	r0, #1
 8009ff0:	d1bf      	bne.n	8009f72 <_puts_r+0x42>
 8009ff2:	e7df      	b.n	8009fb4 <_puts_r+0x84>
 8009ff4:	6823      	ldr	r3, [r4, #0]
 8009ff6:	250a      	movs	r5, #10
 8009ff8:	1c5a      	adds	r2, r3, #1
 8009ffa:	6022      	str	r2, [r4, #0]
 8009ffc:	701d      	strb	r5, [r3, #0]
 8009ffe:	e7db      	b.n	8009fb8 <_puts_r+0x88>
 800a000:	0800d058 	.word	0x0800d058
 800a004:	0800d078 	.word	0x0800d078
 800a008:	0800d038 	.word	0x0800d038

0800a00c <puts>:
 800a00c:	4b02      	ldr	r3, [pc, #8]	; (800a018 <puts+0xc>)
 800a00e:	4601      	mov	r1, r0
 800a010:	6818      	ldr	r0, [r3, #0]
 800a012:	f7ff bf8d 	b.w	8009f30 <_puts_r>
 800a016:	bf00      	nop
 800a018:	20000100 	.word	0x20000100

0800a01c <__swbuf_r>:
 800a01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a01e:	460e      	mov	r6, r1
 800a020:	4614      	mov	r4, r2
 800a022:	4605      	mov	r5, r0
 800a024:	b118      	cbz	r0, 800a02e <__swbuf_r+0x12>
 800a026:	6983      	ldr	r3, [r0, #24]
 800a028:	b90b      	cbnz	r3, 800a02e <__swbuf_r+0x12>
 800a02a:	f001 f84d 	bl	800b0c8 <__sinit>
 800a02e:	4b21      	ldr	r3, [pc, #132]	; (800a0b4 <__swbuf_r+0x98>)
 800a030:	429c      	cmp	r4, r3
 800a032:	d12b      	bne.n	800a08c <__swbuf_r+0x70>
 800a034:	686c      	ldr	r4, [r5, #4]
 800a036:	69a3      	ldr	r3, [r4, #24]
 800a038:	60a3      	str	r3, [r4, #8]
 800a03a:	89a3      	ldrh	r3, [r4, #12]
 800a03c:	071a      	lsls	r2, r3, #28
 800a03e:	d52f      	bpl.n	800a0a0 <__swbuf_r+0x84>
 800a040:	6923      	ldr	r3, [r4, #16]
 800a042:	b36b      	cbz	r3, 800a0a0 <__swbuf_r+0x84>
 800a044:	6923      	ldr	r3, [r4, #16]
 800a046:	6820      	ldr	r0, [r4, #0]
 800a048:	1ac0      	subs	r0, r0, r3
 800a04a:	6963      	ldr	r3, [r4, #20]
 800a04c:	b2f6      	uxtb	r6, r6
 800a04e:	4283      	cmp	r3, r0
 800a050:	4637      	mov	r7, r6
 800a052:	dc04      	bgt.n	800a05e <__swbuf_r+0x42>
 800a054:	4621      	mov	r1, r4
 800a056:	4628      	mov	r0, r5
 800a058:	f000 ffa2 	bl	800afa0 <_fflush_r>
 800a05c:	bb30      	cbnz	r0, 800a0ac <__swbuf_r+0x90>
 800a05e:	68a3      	ldr	r3, [r4, #8]
 800a060:	3b01      	subs	r3, #1
 800a062:	60a3      	str	r3, [r4, #8]
 800a064:	6823      	ldr	r3, [r4, #0]
 800a066:	1c5a      	adds	r2, r3, #1
 800a068:	6022      	str	r2, [r4, #0]
 800a06a:	701e      	strb	r6, [r3, #0]
 800a06c:	6963      	ldr	r3, [r4, #20]
 800a06e:	3001      	adds	r0, #1
 800a070:	4283      	cmp	r3, r0
 800a072:	d004      	beq.n	800a07e <__swbuf_r+0x62>
 800a074:	89a3      	ldrh	r3, [r4, #12]
 800a076:	07db      	lsls	r3, r3, #31
 800a078:	d506      	bpl.n	800a088 <__swbuf_r+0x6c>
 800a07a:	2e0a      	cmp	r6, #10
 800a07c:	d104      	bne.n	800a088 <__swbuf_r+0x6c>
 800a07e:	4621      	mov	r1, r4
 800a080:	4628      	mov	r0, r5
 800a082:	f000 ff8d 	bl	800afa0 <_fflush_r>
 800a086:	b988      	cbnz	r0, 800a0ac <__swbuf_r+0x90>
 800a088:	4638      	mov	r0, r7
 800a08a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a08c:	4b0a      	ldr	r3, [pc, #40]	; (800a0b8 <__swbuf_r+0x9c>)
 800a08e:	429c      	cmp	r4, r3
 800a090:	d101      	bne.n	800a096 <__swbuf_r+0x7a>
 800a092:	68ac      	ldr	r4, [r5, #8]
 800a094:	e7cf      	b.n	800a036 <__swbuf_r+0x1a>
 800a096:	4b09      	ldr	r3, [pc, #36]	; (800a0bc <__swbuf_r+0xa0>)
 800a098:	429c      	cmp	r4, r3
 800a09a:	bf08      	it	eq
 800a09c:	68ec      	ldreq	r4, [r5, #12]
 800a09e:	e7ca      	b.n	800a036 <__swbuf_r+0x1a>
 800a0a0:	4621      	mov	r1, r4
 800a0a2:	4628      	mov	r0, r5
 800a0a4:	f000 f80c 	bl	800a0c0 <__swsetup_r>
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	d0cb      	beq.n	800a044 <__swbuf_r+0x28>
 800a0ac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a0b0:	e7ea      	b.n	800a088 <__swbuf_r+0x6c>
 800a0b2:	bf00      	nop
 800a0b4:	0800d058 	.word	0x0800d058
 800a0b8:	0800d078 	.word	0x0800d078
 800a0bc:	0800d038 	.word	0x0800d038

0800a0c0 <__swsetup_r>:
 800a0c0:	4b32      	ldr	r3, [pc, #200]	; (800a18c <__swsetup_r+0xcc>)
 800a0c2:	b570      	push	{r4, r5, r6, lr}
 800a0c4:	681d      	ldr	r5, [r3, #0]
 800a0c6:	4606      	mov	r6, r0
 800a0c8:	460c      	mov	r4, r1
 800a0ca:	b125      	cbz	r5, 800a0d6 <__swsetup_r+0x16>
 800a0cc:	69ab      	ldr	r3, [r5, #24]
 800a0ce:	b913      	cbnz	r3, 800a0d6 <__swsetup_r+0x16>
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	f000 fff9 	bl	800b0c8 <__sinit>
 800a0d6:	4b2e      	ldr	r3, [pc, #184]	; (800a190 <__swsetup_r+0xd0>)
 800a0d8:	429c      	cmp	r4, r3
 800a0da:	d10f      	bne.n	800a0fc <__swsetup_r+0x3c>
 800a0dc:	686c      	ldr	r4, [r5, #4]
 800a0de:	89a3      	ldrh	r3, [r4, #12]
 800a0e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0e4:	0719      	lsls	r1, r3, #28
 800a0e6:	d42c      	bmi.n	800a142 <__swsetup_r+0x82>
 800a0e8:	06dd      	lsls	r5, r3, #27
 800a0ea:	d411      	bmi.n	800a110 <__swsetup_r+0x50>
 800a0ec:	2309      	movs	r3, #9
 800a0ee:	6033      	str	r3, [r6, #0]
 800a0f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a0f4:	81a3      	strh	r3, [r4, #12]
 800a0f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0fa:	e03e      	b.n	800a17a <__swsetup_r+0xba>
 800a0fc:	4b25      	ldr	r3, [pc, #148]	; (800a194 <__swsetup_r+0xd4>)
 800a0fe:	429c      	cmp	r4, r3
 800a100:	d101      	bne.n	800a106 <__swsetup_r+0x46>
 800a102:	68ac      	ldr	r4, [r5, #8]
 800a104:	e7eb      	b.n	800a0de <__swsetup_r+0x1e>
 800a106:	4b24      	ldr	r3, [pc, #144]	; (800a198 <__swsetup_r+0xd8>)
 800a108:	429c      	cmp	r4, r3
 800a10a:	bf08      	it	eq
 800a10c:	68ec      	ldreq	r4, [r5, #12]
 800a10e:	e7e6      	b.n	800a0de <__swsetup_r+0x1e>
 800a110:	0758      	lsls	r0, r3, #29
 800a112:	d512      	bpl.n	800a13a <__swsetup_r+0x7a>
 800a114:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a116:	b141      	cbz	r1, 800a12a <__swsetup_r+0x6a>
 800a118:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a11c:	4299      	cmp	r1, r3
 800a11e:	d002      	beq.n	800a126 <__swsetup_r+0x66>
 800a120:	4630      	mov	r0, r6
 800a122:	f001 fc8b 	bl	800ba3c <_free_r>
 800a126:	2300      	movs	r3, #0
 800a128:	6363      	str	r3, [r4, #52]	; 0x34
 800a12a:	89a3      	ldrh	r3, [r4, #12]
 800a12c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a130:	81a3      	strh	r3, [r4, #12]
 800a132:	2300      	movs	r3, #0
 800a134:	6063      	str	r3, [r4, #4]
 800a136:	6923      	ldr	r3, [r4, #16]
 800a138:	6023      	str	r3, [r4, #0]
 800a13a:	89a3      	ldrh	r3, [r4, #12]
 800a13c:	f043 0308 	orr.w	r3, r3, #8
 800a140:	81a3      	strh	r3, [r4, #12]
 800a142:	6923      	ldr	r3, [r4, #16]
 800a144:	b94b      	cbnz	r3, 800a15a <__swsetup_r+0x9a>
 800a146:	89a3      	ldrh	r3, [r4, #12]
 800a148:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a14c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a150:	d003      	beq.n	800a15a <__swsetup_r+0x9a>
 800a152:	4621      	mov	r1, r4
 800a154:	4630      	mov	r0, r6
 800a156:	f001 f881 	bl	800b25c <__smakebuf_r>
 800a15a:	89a0      	ldrh	r0, [r4, #12]
 800a15c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a160:	f010 0301 	ands.w	r3, r0, #1
 800a164:	d00a      	beq.n	800a17c <__swsetup_r+0xbc>
 800a166:	2300      	movs	r3, #0
 800a168:	60a3      	str	r3, [r4, #8]
 800a16a:	6963      	ldr	r3, [r4, #20]
 800a16c:	425b      	negs	r3, r3
 800a16e:	61a3      	str	r3, [r4, #24]
 800a170:	6923      	ldr	r3, [r4, #16]
 800a172:	b943      	cbnz	r3, 800a186 <__swsetup_r+0xc6>
 800a174:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a178:	d1ba      	bne.n	800a0f0 <__swsetup_r+0x30>
 800a17a:	bd70      	pop	{r4, r5, r6, pc}
 800a17c:	0781      	lsls	r1, r0, #30
 800a17e:	bf58      	it	pl
 800a180:	6963      	ldrpl	r3, [r4, #20]
 800a182:	60a3      	str	r3, [r4, #8]
 800a184:	e7f4      	b.n	800a170 <__swsetup_r+0xb0>
 800a186:	2000      	movs	r0, #0
 800a188:	e7f7      	b.n	800a17a <__swsetup_r+0xba>
 800a18a:	bf00      	nop
 800a18c:	20000100 	.word	0x20000100
 800a190:	0800d058 	.word	0x0800d058
 800a194:	0800d078 	.word	0x0800d078
 800a198:	0800d038 	.word	0x0800d038

0800a19c <quorem>:
 800a19c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a0:	6903      	ldr	r3, [r0, #16]
 800a1a2:	690c      	ldr	r4, [r1, #16]
 800a1a4:	42a3      	cmp	r3, r4
 800a1a6:	4607      	mov	r7, r0
 800a1a8:	f2c0 8081 	blt.w	800a2ae <quorem+0x112>
 800a1ac:	3c01      	subs	r4, #1
 800a1ae:	f101 0814 	add.w	r8, r1, #20
 800a1b2:	f100 0514 	add.w	r5, r0, #20
 800a1b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1ba:	9301      	str	r3, [sp, #4]
 800a1bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a1c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a1cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a1d0:	fbb2 f6f3 	udiv	r6, r2, r3
 800a1d4:	d331      	bcc.n	800a23a <quorem+0x9e>
 800a1d6:	f04f 0e00 	mov.w	lr, #0
 800a1da:	4640      	mov	r0, r8
 800a1dc:	46ac      	mov	ip, r5
 800a1de:	46f2      	mov	sl, lr
 800a1e0:	f850 2b04 	ldr.w	r2, [r0], #4
 800a1e4:	b293      	uxth	r3, r2
 800a1e6:	fb06 e303 	mla	r3, r6, r3, lr
 800a1ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	ebaa 0303 	sub.w	r3, sl, r3
 800a1f4:	f8dc a000 	ldr.w	sl, [ip]
 800a1f8:	0c12      	lsrs	r2, r2, #16
 800a1fa:	fa13 f38a 	uxtah	r3, r3, sl
 800a1fe:	fb06 e202 	mla	r2, r6, r2, lr
 800a202:	9300      	str	r3, [sp, #0]
 800a204:	9b00      	ldr	r3, [sp, #0]
 800a206:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a20a:	b292      	uxth	r2, r2
 800a20c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a210:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a214:	f8bd 3000 	ldrh.w	r3, [sp]
 800a218:	4581      	cmp	r9, r0
 800a21a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a21e:	f84c 3b04 	str.w	r3, [ip], #4
 800a222:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a226:	d2db      	bcs.n	800a1e0 <quorem+0x44>
 800a228:	f855 300b 	ldr.w	r3, [r5, fp]
 800a22c:	b92b      	cbnz	r3, 800a23a <quorem+0x9e>
 800a22e:	9b01      	ldr	r3, [sp, #4]
 800a230:	3b04      	subs	r3, #4
 800a232:	429d      	cmp	r5, r3
 800a234:	461a      	mov	r2, r3
 800a236:	d32e      	bcc.n	800a296 <quorem+0xfa>
 800a238:	613c      	str	r4, [r7, #16]
 800a23a:	4638      	mov	r0, r7
 800a23c:	f001 fae6 	bl	800b80c <__mcmp>
 800a240:	2800      	cmp	r0, #0
 800a242:	db24      	blt.n	800a28e <quorem+0xf2>
 800a244:	3601      	adds	r6, #1
 800a246:	4628      	mov	r0, r5
 800a248:	f04f 0c00 	mov.w	ip, #0
 800a24c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a250:	f8d0 e000 	ldr.w	lr, [r0]
 800a254:	b293      	uxth	r3, r2
 800a256:	ebac 0303 	sub.w	r3, ip, r3
 800a25a:	0c12      	lsrs	r2, r2, #16
 800a25c:	fa13 f38e 	uxtah	r3, r3, lr
 800a260:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a264:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a268:	b29b      	uxth	r3, r3
 800a26a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a26e:	45c1      	cmp	r9, r8
 800a270:	f840 3b04 	str.w	r3, [r0], #4
 800a274:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a278:	d2e8      	bcs.n	800a24c <quorem+0xb0>
 800a27a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a27e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a282:	b922      	cbnz	r2, 800a28e <quorem+0xf2>
 800a284:	3b04      	subs	r3, #4
 800a286:	429d      	cmp	r5, r3
 800a288:	461a      	mov	r2, r3
 800a28a:	d30a      	bcc.n	800a2a2 <quorem+0x106>
 800a28c:	613c      	str	r4, [r7, #16]
 800a28e:	4630      	mov	r0, r6
 800a290:	b003      	add	sp, #12
 800a292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a296:	6812      	ldr	r2, [r2, #0]
 800a298:	3b04      	subs	r3, #4
 800a29a:	2a00      	cmp	r2, #0
 800a29c:	d1cc      	bne.n	800a238 <quorem+0x9c>
 800a29e:	3c01      	subs	r4, #1
 800a2a0:	e7c7      	b.n	800a232 <quorem+0x96>
 800a2a2:	6812      	ldr	r2, [r2, #0]
 800a2a4:	3b04      	subs	r3, #4
 800a2a6:	2a00      	cmp	r2, #0
 800a2a8:	d1f0      	bne.n	800a28c <quorem+0xf0>
 800a2aa:	3c01      	subs	r4, #1
 800a2ac:	e7eb      	b.n	800a286 <quorem+0xea>
 800a2ae:	2000      	movs	r0, #0
 800a2b0:	e7ee      	b.n	800a290 <quorem+0xf4>
 800a2b2:	0000      	movs	r0, r0
 800a2b4:	0000      	movs	r0, r0
	...

0800a2b8 <_dtoa_r>:
 800a2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2bc:	ed2d 8b04 	vpush	{d8-d9}
 800a2c0:	ec57 6b10 	vmov	r6, r7, d0
 800a2c4:	b093      	sub	sp, #76	; 0x4c
 800a2c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a2c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a2cc:	9106      	str	r1, [sp, #24]
 800a2ce:	ee10 aa10 	vmov	sl, s0
 800a2d2:	4604      	mov	r4, r0
 800a2d4:	9209      	str	r2, [sp, #36]	; 0x24
 800a2d6:	930c      	str	r3, [sp, #48]	; 0x30
 800a2d8:	46bb      	mov	fp, r7
 800a2da:	b975      	cbnz	r5, 800a2fa <_dtoa_r+0x42>
 800a2dc:	2010      	movs	r0, #16
 800a2de:	f000 fffd 	bl	800b2dc <malloc>
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	6260      	str	r0, [r4, #36]	; 0x24
 800a2e6:	b920      	cbnz	r0, 800a2f2 <_dtoa_r+0x3a>
 800a2e8:	4ba7      	ldr	r3, [pc, #668]	; (800a588 <_dtoa_r+0x2d0>)
 800a2ea:	21ea      	movs	r1, #234	; 0xea
 800a2ec:	48a7      	ldr	r0, [pc, #668]	; (800a58c <_dtoa_r+0x2d4>)
 800a2ee:	f001 fe45 	bl	800bf7c <__assert_func>
 800a2f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a2f6:	6005      	str	r5, [r0, #0]
 800a2f8:	60c5      	str	r5, [r0, #12]
 800a2fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2fc:	6819      	ldr	r1, [r3, #0]
 800a2fe:	b151      	cbz	r1, 800a316 <_dtoa_r+0x5e>
 800a300:	685a      	ldr	r2, [r3, #4]
 800a302:	604a      	str	r2, [r1, #4]
 800a304:	2301      	movs	r3, #1
 800a306:	4093      	lsls	r3, r2
 800a308:	608b      	str	r3, [r1, #8]
 800a30a:	4620      	mov	r0, r4
 800a30c:	f001 f83c 	bl	800b388 <_Bfree>
 800a310:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a312:	2200      	movs	r2, #0
 800a314:	601a      	str	r2, [r3, #0]
 800a316:	1e3b      	subs	r3, r7, #0
 800a318:	bfaa      	itet	ge
 800a31a:	2300      	movge	r3, #0
 800a31c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a320:	f8c8 3000 	strge.w	r3, [r8]
 800a324:	4b9a      	ldr	r3, [pc, #616]	; (800a590 <_dtoa_r+0x2d8>)
 800a326:	bfbc      	itt	lt
 800a328:	2201      	movlt	r2, #1
 800a32a:	f8c8 2000 	strlt.w	r2, [r8]
 800a32e:	ea33 030b 	bics.w	r3, r3, fp
 800a332:	d11b      	bne.n	800a36c <_dtoa_r+0xb4>
 800a334:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a336:	f242 730f 	movw	r3, #9999	; 0x270f
 800a33a:	6013      	str	r3, [r2, #0]
 800a33c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a340:	4333      	orrs	r3, r6
 800a342:	f000 8592 	beq.w	800ae6a <_dtoa_r+0xbb2>
 800a346:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a348:	b963      	cbnz	r3, 800a364 <_dtoa_r+0xac>
 800a34a:	4b92      	ldr	r3, [pc, #584]	; (800a594 <_dtoa_r+0x2dc>)
 800a34c:	e022      	b.n	800a394 <_dtoa_r+0xdc>
 800a34e:	4b92      	ldr	r3, [pc, #584]	; (800a598 <_dtoa_r+0x2e0>)
 800a350:	9301      	str	r3, [sp, #4]
 800a352:	3308      	adds	r3, #8
 800a354:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a356:	6013      	str	r3, [r2, #0]
 800a358:	9801      	ldr	r0, [sp, #4]
 800a35a:	b013      	add	sp, #76	; 0x4c
 800a35c:	ecbd 8b04 	vpop	{d8-d9}
 800a360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a364:	4b8b      	ldr	r3, [pc, #556]	; (800a594 <_dtoa_r+0x2dc>)
 800a366:	9301      	str	r3, [sp, #4]
 800a368:	3303      	adds	r3, #3
 800a36a:	e7f3      	b.n	800a354 <_dtoa_r+0x9c>
 800a36c:	2200      	movs	r2, #0
 800a36e:	2300      	movs	r3, #0
 800a370:	4650      	mov	r0, sl
 800a372:	4659      	mov	r1, fp
 800a374:	f7f6 fbb0 	bl	8000ad8 <__aeabi_dcmpeq>
 800a378:	ec4b ab19 	vmov	d9, sl, fp
 800a37c:	4680      	mov	r8, r0
 800a37e:	b158      	cbz	r0, 800a398 <_dtoa_r+0xe0>
 800a380:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a382:	2301      	movs	r3, #1
 800a384:	6013      	str	r3, [r2, #0]
 800a386:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a388:	2b00      	cmp	r3, #0
 800a38a:	f000 856b 	beq.w	800ae64 <_dtoa_r+0xbac>
 800a38e:	4883      	ldr	r0, [pc, #524]	; (800a59c <_dtoa_r+0x2e4>)
 800a390:	6018      	str	r0, [r3, #0]
 800a392:	1e43      	subs	r3, r0, #1
 800a394:	9301      	str	r3, [sp, #4]
 800a396:	e7df      	b.n	800a358 <_dtoa_r+0xa0>
 800a398:	ec4b ab10 	vmov	d0, sl, fp
 800a39c:	aa10      	add	r2, sp, #64	; 0x40
 800a39e:	a911      	add	r1, sp, #68	; 0x44
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	f001 fad9 	bl	800b958 <__d2b>
 800a3a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a3aa:	ee08 0a10 	vmov	s16, r0
 800a3ae:	2d00      	cmp	r5, #0
 800a3b0:	f000 8084 	beq.w	800a4bc <_dtoa_r+0x204>
 800a3b4:	ee19 3a90 	vmov	r3, s19
 800a3b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a3c0:	4656      	mov	r6, sl
 800a3c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a3c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a3ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a3ce:	4b74      	ldr	r3, [pc, #464]	; (800a5a0 <_dtoa_r+0x2e8>)
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	4630      	mov	r0, r6
 800a3d4:	4639      	mov	r1, r7
 800a3d6:	f7f5 ff5f 	bl	8000298 <__aeabi_dsub>
 800a3da:	a365      	add	r3, pc, #404	; (adr r3, 800a570 <_dtoa_r+0x2b8>)
 800a3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e0:	f7f6 f912 	bl	8000608 <__aeabi_dmul>
 800a3e4:	a364      	add	r3, pc, #400	; (adr r3, 800a578 <_dtoa_r+0x2c0>)
 800a3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ea:	f7f5 ff57 	bl	800029c <__adddf3>
 800a3ee:	4606      	mov	r6, r0
 800a3f0:	4628      	mov	r0, r5
 800a3f2:	460f      	mov	r7, r1
 800a3f4:	f7f6 f89e 	bl	8000534 <__aeabi_i2d>
 800a3f8:	a361      	add	r3, pc, #388	; (adr r3, 800a580 <_dtoa_r+0x2c8>)
 800a3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fe:	f7f6 f903 	bl	8000608 <__aeabi_dmul>
 800a402:	4602      	mov	r2, r0
 800a404:	460b      	mov	r3, r1
 800a406:	4630      	mov	r0, r6
 800a408:	4639      	mov	r1, r7
 800a40a:	f7f5 ff47 	bl	800029c <__adddf3>
 800a40e:	4606      	mov	r6, r0
 800a410:	460f      	mov	r7, r1
 800a412:	f7f6 fba9 	bl	8000b68 <__aeabi_d2iz>
 800a416:	2200      	movs	r2, #0
 800a418:	9000      	str	r0, [sp, #0]
 800a41a:	2300      	movs	r3, #0
 800a41c:	4630      	mov	r0, r6
 800a41e:	4639      	mov	r1, r7
 800a420:	f7f6 fb64 	bl	8000aec <__aeabi_dcmplt>
 800a424:	b150      	cbz	r0, 800a43c <_dtoa_r+0x184>
 800a426:	9800      	ldr	r0, [sp, #0]
 800a428:	f7f6 f884 	bl	8000534 <__aeabi_i2d>
 800a42c:	4632      	mov	r2, r6
 800a42e:	463b      	mov	r3, r7
 800a430:	f7f6 fb52 	bl	8000ad8 <__aeabi_dcmpeq>
 800a434:	b910      	cbnz	r0, 800a43c <_dtoa_r+0x184>
 800a436:	9b00      	ldr	r3, [sp, #0]
 800a438:	3b01      	subs	r3, #1
 800a43a:	9300      	str	r3, [sp, #0]
 800a43c:	9b00      	ldr	r3, [sp, #0]
 800a43e:	2b16      	cmp	r3, #22
 800a440:	d85a      	bhi.n	800a4f8 <_dtoa_r+0x240>
 800a442:	9a00      	ldr	r2, [sp, #0]
 800a444:	4b57      	ldr	r3, [pc, #348]	; (800a5a4 <_dtoa_r+0x2ec>)
 800a446:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44e:	ec51 0b19 	vmov	r0, r1, d9
 800a452:	f7f6 fb4b 	bl	8000aec <__aeabi_dcmplt>
 800a456:	2800      	cmp	r0, #0
 800a458:	d050      	beq.n	800a4fc <_dtoa_r+0x244>
 800a45a:	9b00      	ldr	r3, [sp, #0]
 800a45c:	3b01      	subs	r3, #1
 800a45e:	9300      	str	r3, [sp, #0]
 800a460:	2300      	movs	r3, #0
 800a462:	930b      	str	r3, [sp, #44]	; 0x2c
 800a464:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a466:	1b5d      	subs	r5, r3, r5
 800a468:	1e6b      	subs	r3, r5, #1
 800a46a:	9305      	str	r3, [sp, #20]
 800a46c:	bf45      	ittet	mi
 800a46e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a472:	9304      	strmi	r3, [sp, #16]
 800a474:	2300      	movpl	r3, #0
 800a476:	2300      	movmi	r3, #0
 800a478:	bf4c      	ite	mi
 800a47a:	9305      	strmi	r3, [sp, #20]
 800a47c:	9304      	strpl	r3, [sp, #16]
 800a47e:	9b00      	ldr	r3, [sp, #0]
 800a480:	2b00      	cmp	r3, #0
 800a482:	db3d      	blt.n	800a500 <_dtoa_r+0x248>
 800a484:	9b05      	ldr	r3, [sp, #20]
 800a486:	9a00      	ldr	r2, [sp, #0]
 800a488:	920a      	str	r2, [sp, #40]	; 0x28
 800a48a:	4413      	add	r3, r2
 800a48c:	9305      	str	r3, [sp, #20]
 800a48e:	2300      	movs	r3, #0
 800a490:	9307      	str	r3, [sp, #28]
 800a492:	9b06      	ldr	r3, [sp, #24]
 800a494:	2b09      	cmp	r3, #9
 800a496:	f200 8089 	bhi.w	800a5ac <_dtoa_r+0x2f4>
 800a49a:	2b05      	cmp	r3, #5
 800a49c:	bfc4      	itt	gt
 800a49e:	3b04      	subgt	r3, #4
 800a4a0:	9306      	strgt	r3, [sp, #24]
 800a4a2:	9b06      	ldr	r3, [sp, #24]
 800a4a4:	f1a3 0302 	sub.w	r3, r3, #2
 800a4a8:	bfcc      	ite	gt
 800a4aa:	2500      	movgt	r5, #0
 800a4ac:	2501      	movle	r5, #1
 800a4ae:	2b03      	cmp	r3, #3
 800a4b0:	f200 8087 	bhi.w	800a5c2 <_dtoa_r+0x30a>
 800a4b4:	e8df f003 	tbb	[pc, r3]
 800a4b8:	59383a2d 	.word	0x59383a2d
 800a4bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a4c0:	441d      	add	r5, r3
 800a4c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a4c6:	2b20      	cmp	r3, #32
 800a4c8:	bfc1      	itttt	gt
 800a4ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a4ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a4d2:	fa0b f303 	lslgt.w	r3, fp, r3
 800a4d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a4da:	bfda      	itte	le
 800a4dc:	f1c3 0320 	rsble	r3, r3, #32
 800a4e0:	fa06 f003 	lslle.w	r0, r6, r3
 800a4e4:	4318      	orrgt	r0, r3
 800a4e6:	f7f6 f815 	bl	8000514 <__aeabi_ui2d>
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	4606      	mov	r6, r0
 800a4ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a4f2:	3d01      	subs	r5, #1
 800a4f4:	930e      	str	r3, [sp, #56]	; 0x38
 800a4f6:	e76a      	b.n	800a3ce <_dtoa_r+0x116>
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	e7b2      	b.n	800a462 <_dtoa_r+0x1aa>
 800a4fc:	900b      	str	r0, [sp, #44]	; 0x2c
 800a4fe:	e7b1      	b.n	800a464 <_dtoa_r+0x1ac>
 800a500:	9b04      	ldr	r3, [sp, #16]
 800a502:	9a00      	ldr	r2, [sp, #0]
 800a504:	1a9b      	subs	r3, r3, r2
 800a506:	9304      	str	r3, [sp, #16]
 800a508:	4253      	negs	r3, r2
 800a50a:	9307      	str	r3, [sp, #28]
 800a50c:	2300      	movs	r3, #0
 800a50e:	930a      	str	r3, [sp, #40]	; 0x28
 800a510:	e7bf      	b.n	800a492 <_dtoa_r+0x1da>
 800a512:	2300      	movs	r3, #0
 800a514:	9308      	str	r3, [sp, #32]
 800a516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a518:	2b00      	cmp	r3, #0
 800a51a:	dc55      	bgt.n	800a5c8 <_dtoa_r+0x310>
 800a51c:	2301      	movs	r3, #1
 800a51e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a522:	461a      	mov	r2, r3
 800a524:	9209      	str	r2, [sp, #36]	; 0x24
 800a526:	e00c      	b.n	800a542 <_dtoa_r+0x28a>
 800a528:	2301      	movs	r3, #1
 800a52a:	e7f3      	b.n	800a514 <_dtoa_r+0x25c>
 800a52c:	2300      	movs	r3, #0
 800a52e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a530:	9308      	str	r3, [sp, #32]
 800a532:	9b00      	ldr	r3, [sp, #0]
 800a534:	4413      	add	r3, r2
 800a536:	9302      	str	r3, [sp, #8]
 800a538:	3301      	adds	r3, #1
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	9303      	str	r3, [sp, #12]
 800a53e:	bfb8      	it	lt
 800a540:	2301      	movlt	r3, #1
 800a542:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a544:	2200      	movs	r2, #0
 800a546:	6042      	str	r2, [r0, #4]
 800a548:	2204      	movs	r2, #4
 800a54a:	f102 0614 	add.w	r6, r2, #20
 800a54e:	429e      	cmp	r6, r3
 800a550:	6841      	ldr	r1, [r0, #4]
 800a552:	d93d      	bls.n	800a5d0 <_dtoa_r+0x318>
 800a554:	4620      	mov	r0, r4
 800a556:	f000 fed7 	bl	800b308 <_Balloc>
 800a55a:	9001      	str	r0, [sp, #4]
 800a55c:	2800      	cmp	r0, #0
 800a55e:	d13b      	bne.n	800a5d8 <_dtoa_r+0x320>
 800a560:	4b11      	ldr	r3, [pc, #68]	; (800a5a8 <_dtoa_r+0x2f0>)
 800a562:	4602      	mov	r2, r0
 800a564:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a568:	e6c0      	b.n	800a2ec <_dtoa_r+0x34>
 800a56a:	2301      	movs	r3, #1
 800a56c:	e7df      	b.n	800a52e <_dtoa_r+0x276>
 800a56e:	bf00      	nop
 800a570:	636f4361 	.word	0x636f4361
 800a574:	3fd287a7 	.word	0x3fd287a7
 800a578:	8b60c8b3 	.word	0x8b60c8b3
 800a57c:	3fc68a28 	.word	0x3fc68a28
 800a580:	509f79fb 	.word	0x509f79fb
 800a584:	3fd34413 	.word	0x3fd34413
 800a588:	0800cfb5 	.word	0x0800cfb5
 800a58c:	0800cfcc 	.word	0x0800cfcc
 800a590:	7ff00000 	.word	0x7ff00000
 800a594:	0800cfb1 	.word	0x0800cfb1
 800a598:	0800cfa8 	.word	0x0800cfa8
 800a59c:	0800cf85 	.word	0x0800cf85
 800a5a0:	3ff80000 	.word	0x3ff80000
 800a5a4:	0800d120 	.word	0x0800d120
 800a5a8:	0800d027 	.word	0x0800d027
 800a5ac:	2501      	movs	r5, #1
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	9306      	str	r3, [sp, #24]
 800a5b2:	9508      	str	r5, [sp, #32]
 800a5b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a5b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	2312      	movs	r3, #18
 800a5c0:	e7b0      	b.n	800a524 <_dtoa_r+0x26c>
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	9308      	str	r3, [sp, #32]
 800a5c6:	e7f5      	b.n	800a5b4 <_dtoa_r+0x2fc>
 800a5c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a5ce:	e7b8      	b.n	800a542 <_dtoa_r+0x28a>
 800a5d0:	3101      	adds	r1, #1
 800a5d2:	6041      	str	r1, [r0, #4]
 800a5d4:	0052      	lsls	r2, r2, #1
 800a5d6:	e7b8      	b.n	800a54a <_dtoa_r+0x292>
 800a5d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5da:	9a01      	ldr	r2, [sp, #4]
 800a5dc:	601a      	str	r2, [r3, #0]
 800a5de:	9b03      	ldr	r3, [sp, #12]
 800a5e0:	2b0e      	cmp	r3, #14
 800a5e2:	f200 809d 	bhi.w	800a720 <_dtoa_r+0x468>
 800a5e6:	2d00      	cmp	r5, #0
 800a5e8:	f000 809a 	beq.w	800a720 <_dtoa_r+0x468>
 800a5ec:	9b00      	ldr	r3, [sp, #0]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	dd32      	ble.n	800a658 <_dtoa_r+0x3a0>
 800a5f2:	4ab7      	ldr	r2, [pc, #732]	; (800a8d0 <_dtoa_r+0x618>)
 800a5f4:	f003 030f 	and.w	r3, r3, #15
 800a5f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a5fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a600:	9b00      	ldr	r3, [sp, #0]
 800a602:	05d8      	lsls	r0, r3, #23
 800a604:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a608:	d516      	bpl.n	800a638 <_dtoa_r+0x380>
 800a60a:	4bb2      	ldr	r3, [pc, #712]	; (800a8d4 <_dtoa_r+0x61c>)
 800a60c:	ec51 0b19 	vmov	r0, r1, d9
 800a610:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a614:	f7f6 f922 	bl	800085c <__aeabi_ddiv>
 800a618:	f007 070f 	and.w	r7, r7, #15
 800a61c:	4682      	mov	sl, r0
 800a61e:	468b      	mov	fp, r1
 800a620:	2503      	movs	r5, #3
 800a622:	4eac      	ldr	r6, [pc, #688]	; (800a8d4 <_dtoa_r+0x61c>)
 800a624:	b957      	cbnz	r7, 800a63c <_dtoa_r+0x384>
 800a626:	4642      	mov	r2, r8
 800a628:	464b      	mov	r3, r9
 800a62a:	4650      	mov	r0, sl
 800a62c:	4659      	mov	r1, fp
 800a62e:	f7f6 f915 	bl	800085c <__aeabi_ddiv>
 800a632:	4682      	mov	sl, r0
 800a634:	468b      	mov	fp, r1
 800a636:	e028      	b.n	800a68a <_dtoa_r+0x3d2>
 800a638:	2502      	movs	r5, #2
 800a63a:	e7f2      	b.n	800a622 <_dtoa_r+0x36a>
 800a63c:	07f9      	lsls	r1, r7, #31
 800a63e:	d508      	bpl.n	800a652 <_dtoa_r+0x39a>
 800a640:	4640      	mov	r0, r8
 800a642:	4649      	mov	r1, r9
 800a644:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a648:	f7f5 ffde 	bl	8000608 <__aeabi_dmul>
 800a64c:	3501      	adds	r5, #1
 800a64e:	4680      	mov	r8, r0
 800a650:	4689      	mov	r9, r1
 800a652:	107f      	asrs	r7, r7, #1
 800a654:	3608      	adds	r6, #8
 800a656:	e7e5      	b.n	800a624 <_dtoa_r+0x36c>
 800a658:	f000 809b 	beq.w	800a792 <_dtoa_r+0x4da>
 800a65c:	9b00      	ldr	r3, [sp, #0]
 800a65e:	4f9d      	ldr	r7, [pc, #628]	; (800a8d4 <_dtoa_r+0x61c>)
 800a660:	425e      	negs	r6, r3
 800a662:	4b9b      	ldr	r3, [pc, #620]	; (800a8d0 <_dtoa_r+0x618>)
 800a664:	f006 020f 	and.w	r2, r6, #15
 800a668:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a670:	ec51 0b19 	vmov	r0, r1, d9
 800a674:	f7f5 ffc8 	bl	8000608 <__aeabi_dmul>
 800a678:	1136      	asrs	r6, r6, #4
 800a67a:	4682      	mov	sl, r0
 800a67c:	468b      	mov	fp, r1
 800a67e:	2300      	movs	r3, #0
 800a680:	2502      	movs	r5, #2
 800a682:	2e00      	cmp	r6, #0
 800a684:	d17a      	bne.n	800a77c <_dtoa_r+0x4c4>
 800a686:	2b00      	cmp	r3, #0
 800a688:	d1d3      	bne.n	800a632 <_dtoa_r+0x37a>
 800a68a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	f000 8082 	beq.w	800a796 <_dtoa_r+0x4de>
 800a692:	4b91      	ldr	r3, [pc, #580]	; (800a8d8 <_dtoa_r+0x620>)
 800a694:	2200      	movs	r2, #0
 800a696:	4650      	mov	r0, sl
 800a698:	4659      	mov	r1, fp
 800a69a:	f7f6 fa27 	bl	8000aec <__aeabi_dcmplt>
 800a69e:	2800      	cmp	r0, #0
 800a6a0:	d079      	beq.n	800a796 <_dtoa_r+0x4de>
 800a6a2:	9b03      	ldr	r3, [sp, #12]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d076      	beq.n	800a796 <_dtoa_r+0x4de>
 800a6a8:	9b02      	ldr	r3, [sp, #8]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	dd36      	ble.n	800a71c <_dtoa_r+0x464>
 800a6ae:	9b00      	ldr	r3, [sp, #0]
 800a6b0:	4650      	mov	r0, sl
 800a6b2:	4659      	mov	r1, fp
 800a6b4:	1e5f      	subs	r7, r3, #1
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	4b88      	ldr	r3, [pc, #544]	; (800a8dc <_dtoa_r+0x624>)
 800a6ba:	f7f5 ffa5 	bl	8000608 <__aeabi_dmul>
 800a6be:	9e02      	ldr	r6, [sp, #8]
 800a6c0:	4682      	mov	sl, r0
 800a6c2:	468b      	mov	fp, r1
 800a6c4:	3501      	adds	r5, #1
 800a6c6:	4628      	mov	r0, r5
 800a6c8:	f7f5 ff34 	bl	8000534 <__aeabi_i2d>
 800a6cc:	4652      	mov	r2, sl
 800a6ce:	465b      	mov	r3, fp
 800a6d0:	f7f5 ff9a 	bl	8000608 <__aeabi_dmul>
 800a6d4:	4b82      	ldr	r3, [pc, #520]	; (800a8e0 <_dtoa_r+0x628>)
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f7f5 fde0 	bl	800029c <__adddf3>
 800a6dc:	46d0      	mov	r8, sl
 800a6de:	46d9      	mov	r9, fp
 800a6e0:	4682      	mov	sl, r0
 800a6e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a6e6:	2e00      	cmp	r6, #0
 800a6e8:	d158      	bne.n	800a79c <_dtoa_r+0x4e4>
 800a6ea:	4b7e      	ldr	r3, [pc, #504]	; (800a8e4 <_dtoa_r+0x62c>)
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	4640      	mov	r0, r8
 800a6f0:	4649      	mov	r1, r9
 800a6f2:	f7f5 fdd1 	bl	8000298 <__aeabi_dsub>
 800a6f6:	4652      	mov	r2, sl
 800a6f8:	465b      	mov	r3, fp
 800a6fa:	4680      	mov	r8, r0
 800a6fc:	4689      	mov	r9, r1
 800a6fe:	f7f6 fa13 	bl	8000b28 <__aeabi_dcmpgt>
 800a702:	2800      	cmp	r0, #0
 800a704:	f040 8295 	bne.w	800ac32 <_dtoa_r+0x97a>
 800a708:	4652      	mov	r2, sl
 800a70a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a70e:	4640      	mov	r0, r8
 800a710:	4649      	mov	r1, r9
 800a712:	f7f6 f9eb 	bl	8000aec <__aeabi_dcmplt>
 800a716:	2800      	cmp	r0, #0
 800a718:	f040 8289 	bne.w	800ac2e <_dtoa_r+0x976>
 800a71c:	ec5b ab19 	vmov	sl, fp, d9
 800a720:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a722:	2b00      	cmp	r3, #0
 800a724:	f2c0 8148 	blt.w	800a9b8 <_dtoa_r+0x700>
 800a728:	9a00      	ldr	r2, [sp, #0]
 800a72a:	2a0e      	cmp	r2, #14
 800a72c:	f300 8144 	bgt.w	800a9b8 <_dtoa_r+0x700>
 800a730:	4b67      	ldr	r3, [pc, #412]	; (800a8d0 <_dtoa_r+0x618>)
 800a732:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a736:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a73a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	f280 80d5 	bge.w	800a8ec <_dtoa_r+0x634>
 800a742:	9b03      	ldr	r3, [sp, #12]
 800a744:	2b00      	cmp	r3, #0
 800a746:	f300 80d1 	bgt.w	800a8ec <_dtoa_r+0x634>
 800a74a:	f040 826f 	bne.w	800ac2c <_dtoa_r+0x974>
 800a74e:	4b65      	ldr	r3, [pc, #404]	; (800a8e4 <_dtoa_r+0x62c>)
 800a750:	2200      	movs	r2, #0
 800a752:	4640      	mov	r0, r8
 800a754:	4649      	mov	r1, r9
 800a756:	f7f5 ff57 	bl	8000608 <__aeabi_dmul>
 800a75a:	4652      	mov	r2, sl
 800a75c:	465b      	mov	r3, fp
 800a75e:	f7f6 f9d9 	bl	8000b14 <__aeabi_dcmpge>
 800a762:	9e03      	ldr	r6, [sp, #12]
 800a764:	4637      	mov	r7, r6
 800a766:	2800      	cmp	r0, #0
 800a768:	f040 8245 	bne.w	800abf6 <_dtoa_r+0x93e>
 800a76c:	9d01      	ldr	r5, [sp, #4]
 800a76e:	2331      	movs	r3, #49	; 0x31
 800a770:	f805 3b01 	strb.w	r3, [r5], #1
 800a774:	9b00      	ldr	r3, [sp, #0]
 800a776:	3301      	adds	r3, #1
 800a778:	9300      	str	r3, [sp, #0]
 800a77a:	e240      	b.n	800abfe <_dtoa_r+0x946>
 800a77c:	07f2      	lsls	r2, r6, #31
 800a77e:	d505      	bpl.n	800a78c <_dtoa_r+0x4d4>
 800a780:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a784:	f7f5 ff40 	bl	8000608 <__aeabi_dmul>
 800a788:	3501      	adds	r5, #1
 800a78a:	2301      	movs	r3, #1
 800a78c:	1076      	asrs	r6, r6, #1
 800a78e:	3708      	adds	r7, #8
 800a790:	e777      	b.n	800a682 <_dtoa_r+0x3ca>
 800a792:	2502      	movs	r5, #2
 800a794:	e779      	b.n	800a68a <_dtoa_r+0x3d2>
 800a796:	9f00      	ldr	r7, [sp, #0]
 800a798:	9e03      	ldr	r6, [sp, #12]
 800a79a:	e794      	b.n	800a6c6 <_dtoa_r+0x40e>
 800a79c:	9901      	ldr	r1, [sp, #4]
 800a79e:	4b4c      	ldr	r3, [pc, #304]	; (800a8d0 <_dtoa_r+0x618>)
 800a7a0:	4431      	add	r1, r6
 800a7a2:	910d      	str	r1, [sp, #52]	; 0x34
 800a7a4:	9908      	ldr	r1, [sp, #32]
 800a7a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a7aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a7ae:	2900      	cmp	r1, #0
 800a7b0:	d043      	beq.n	800a83a <_dtoa_r+0x582>
 800a7b2:	494d      	ldr	r1, [pc, #308]	; (800a8e8 <_dtoa_r+0x630>)
 800a7b4:	2000      	movs	r0, #0
 800a7b6:	f7f6 f851 	bl	800085c <__aeabi_ddiv>
 800a7ba:	4652      	mov	r2, sl
 800a7bc:	465b      	mov	r3, fp
 800a7be:	f7f5 fd6b 	bl	8000298 <__aeabi_dsub>
 800a7c2:	9d01      	ldr	r5, [sp, #4]
 800a7c4:	4682      	mov	sl, r0
 800a7c6:	468b      	mov	fp, r1
 800a7c8:	4649      	mov	r1, r9
 800a7ca:	4640      	mov	r0, r8
 800a7cc:	f7f6 f9cc 	bl	8000b68 <__aeabi_d2iz>
 800a7d0:	4606      	mov	r6, r0
 800a7d2:	f7f5 feaf 	bl	8000534 <__aeabi_i2d>
 800a7d6:	4602      	mov	r2, r0
 800a7d8:	460b      	mov	r3, r1
 800a7da:	4640      	mov	r0, r8
 800a7dc:	4649      	mov	r1, r9
 800a7de:	f7f5 fd5b 	bl	8000298 <__aeabi_dsub>
 800a7e2:	3630      	adds	r6, #48	; 0x30
 800a7e4:	f805 6b01 	strb.w	r6, [r5], #1
 800a7e8:	4652      	mov	r2, sl
 800a7ea:	465b      	mov	r3, fp
 800a7ec:	4680      	mov	r8, r0
 800a7ee:	4689      	mov	r9, r1
 800a7f0:	f7f6 f97c 	bl	8000aec <__aeabi_dcmplt>
 800a7f4:	2800      	cmp	r0, #0
 800a7f6:	d163      	bne.n	800a8c0 <_dtoa_r+0x608>
 800a7f8:	4642      	mov	r2, r8
 800a7fa:	464b      	mov	r3, r9
 800a7fc:	4936      	ldr	r1, [pc, #216]	; (800a8d8 <_dtoa_r+0x620>)
 800a7fe:	2000      	movs	r0, #0
 800a800:	f7f5 fd4a 	bl	8000298 <__aeabi_dsub>
 800a804:	4652      	mov	r2, sl
 800a806:	465b      	mov	r3, fp
 800a808:	f7f6 f970 	bl	8000aec <__aeabi_dcmplt>
 800a80c:	2800      	cmp	r0, #0
 800a80e:	f040 80b5 	bne.w	800a97c <_dtoa_r+0x6c4>
 800a812:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a814:	429d      	cmp	r5, r3
 800a816:	d081      	beq.n	800a71c <_dtoa_r+0x464>
 800a818:	4b30      	ldr	r3, [pc, #192]	; (800a8dc <_dtoa_r+0x624>)
 800a81a:	2200      	movs	r2, #0
 800a81c:	4650      	mov	r0, sl
 800a81e:	4659      	mov	r1, fp
 800a820:	f7f5 fef2 	bl	8000608 <__aeabi_dmul>
 800a824:	4b2d      	ldr	r3, [pc, #180]	; (800a8dc <_dtoa_r+0x624>)
 800a826:	4682      	mov	sl, r0
 800a828:	468b      	mov	fp, r1
 800a82a:	4640      	mov	r0, r8
 800a82c:	4649      	mov	r1, r9
 800a82e:	2200      	movs	r2, #0
 800a830:	f7f5 feea 	bl	8000608 <__aeabi_dmul>
 800a834:	4680      	mov	r8, r0
 800a836:	4689      	mov	r9, r1
 800a838:	e7c6      	b.n	800a7c8 <_dtoa_r+0x510>
 800a83a:	4650      	mov	r0, sl
 800a83c:	4659      	mov	r1, fp
 800a83e:	f7f5 fee3 	bl	8000608 <__aeabi_dmul>
 800a842:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a844:	9d01      	ldr	r5, [sp, #4]
 800a846:	930f      	str	r3, [sp, #60]	; 0x3c
 800a848:	4682      	mov	sl, r0
 800a84a:	468b      	mov	fp, r1
 800a84c:	4649      	mov	r1, r9
 800a84e:	4640      	mov	r0, r8
 800a850:	f7f6 f98a 	bl	8000b68 <__aeabi_d2iz>
 800a854:	4606      	mov	r6, r0
 800a856:	f7f5 fe6d 	bl	8000534 <__aeabi_i2d>
 800a85a:	3630      	adds	r6, #48	; 0x30
 800a85c:	4602      	mov	r2, r0
 800a85e:	460b      	mov	r3, r1
 800a860:	4640      	mov	r0, r8
 800a862:	4649      	mov	r1, r9
 800a864:	f7f5 fd18 	bl	8000298 <__aeabi_dsub>
 800a868:	f805 6b01 	strb.w	r6, [r5], #1
 800a86c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a86e:	429d      	cmp	r5, r3
 800a870:	4680      	mov	r8, r0
 800a872:	4689      	mov	r9, r1
 800a874:	f04f 0200 	mov.w	r2, #0
 800a878:	d124      	bne.n	800a8c4 <_dtoa_r+0x60c>
 800a87a:	4b1b      	ldr	r3, [pc, #108]	; (800a8e8 <_dtoa_r+0x630>)
 800a87c:	4650      	mov	r0, sl
 800a87e:	4659      	mov	r1, fp
 800a880:	f7f5 fd0c 	bl	800029c <__adddf3>
 800a884:	4602      	mov	r2, r0
 800a886:	460b      	mov	r3, r1
 800a888:	4640      	mov	r0, r8
 800a88a:	4649      	mov	r1, r9
 800a88c:	f7f6 f94c 	bl	8000b28 <__aeabi_dcmpgt>
 800a890:	2800      	cmp	r0, #0
 800a892:	d173      	bne.n	800a97c <_dtoa_r+0x6c4>
 800a894:	4652      	mov	r2, sl
 800a896:	465b      	mov	r3, fp
 800a898:	4913      	ldr	r1, [pc, #76]	; (800a8e8 <_dtoa_r+0x630>)
 800a89a:	2000      	movs	r0, #0
 800a89c:	f7f5 fcfc 	bl	8000298 <__aeabi_dsub>
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	460b      	mov	r3, r1
 800a8a4:	4640      	mov	r0, r8
 800a8a6:	4649      	mov	r1, r9
 800a8a8:	f7f6 f920 	bl	8000aec <__aeabi_dcmplt>
 800a8ac:	2800      	cmp	r0, #0
 800a8ae:	f43f af35 	beq.w	800a71c <_dtoa_r+0x464>
 800a8b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a8b4:	1e6b      	subs	r3, r5, #1
 800a8b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a8bc:	2b30      	cmp	r3, #48	; 0x30
 800a8be:	d0f8      	beq.n	800a8b2 <_dtoa_r+0x5fa>
 800a8c0:	9700      	str	r7, [sp, #0]
 800a8c2:	e049      	b.n	800a958 <_dtoa_r+0x6a0>
 800a8c4:	4b05      	ldr	r3, [pc, #20]	; (800a8dc <_dtoa_r+0x624>)
 800a8c6:	f7f5 fe9f 	bl	8000608 <__aeabi_dmul>
 800a8ca:	4680      	mov	r8, r0
 800a8cc:	4689      	mov	r9, r1
 800a8ce:	e7bd      	b.n	800a84c <_dtoa_r+0x594>
 800a8d0:	0800d120 	.word	0x0800d120
 800a8d4:	0800d0f8 	.word	0x0800d0f8
 800a8d8:	3ff00000 	.word	0x3ff00000
 800a8dc:	40240000 	.word	0x40240000
 800a8e0:	401c0000 	.word	0x401c0000
 800a8e4:	40140000 	.word	0x40140000
 800a8e8:	3fe00000 	.word	0x3fe00000
 800a8ec:	9d01      	ldr	r5, [sp, #4]
 800a8ee:	4656      	mov	r6, sl
 800a8f0:	465f      	mov	r7, fp
 800a8f2:	4642      	mov	r2, r8
 800a8f4:	464b      	mov	r3, r9
 800a8f6:	4630      	mov	r0, r6
 800a8f8:	4639      	mov	r1, r7
 800a8fa:	f7f5 ffaf 	bl	800085c <__aeabi_ddiv>
 800a8fe:	f7f6 f933 	bl	8000b68 <__aeabi_d2iz>
 800a902:	4682      	mov	sl, r0
 800a904:	f7f5 fe16 	bl	8000534 <__aeabi_i2d>
 800a908:	4642      	mov	r2, r8
 800a90a:	464b      	mov	r3, r9
 800a90c:	f7f5 fe7c 	bl	8000608 <__aeabi_dmul>
 800a910:	4602      	mov	r2, r0
 800a912:	460b      	mov	r3, r1
 800a914:	4630      	mov	r0, r6
 800a916:	4639      	mov	r1, r7
 800a918:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a91c:	f7f5 fcbc 	bl	8000298 <__aeabi_dsub>
 800a920:	f805 6b01 	strb.w	r6, [r5], #1
 800a924:	9e01      	ldr	r6, [sp, #4]
 800a926:	9f03      	ldr	r7, [sp, #12]
 800a928:	1bae      	subs	r6, r5, r6
 800a92a:	42b7      	cmp	r7, r6
 800a92c:	4602      	mov	r2, r0
 800a92e:	460b      	mov	r3, r1
 800a930:	d135      	bne.n	800a99e <_dtoa_r+0x6e6>
 800a932:	f7f5 fcb3 	bl	800029c <__adddf3>
 800a936:	4642      	mov	r2, r8
 800a938:	464b      	mov	r3, r9
 800a93a:	4606      	mov	r6, r0
 800a93c:	460f      	mov	r7, r1
 800a93e:	f7f6 f8f3 	bl	8000b28 <__aeabi_dcmpgt>
 800a942:	b9d0      	cbnz	r0, 800a97a <_dtoa_r+0x6c2>
 800a944:	4642      	mov	r2, r8
 800a946:	464b      	mov	r3, r9
 800a948:	4630      	mov	r0, r6
 800a94a:	4639      	mov	r1, r7
 800a94c:	f7f6 f8c4 	bl	8000ad8 <__aeabi_dcmpeq>
 800a950:	b110      	cbz	r0, 800a958 <_dtoa_r+0x6a0>
 800a952:	f01a 0f01 	tst.w	sl, #1
 800a956:	d110      	bne.n	800a97a <_dtoa_r+0x6c2>
 800a958:	4620      	mov	r0, r4
 800a95a:	ee18 1a10 	vmov	r1, s16
 800a95e:	f000 fd13 	bl	800b388 <_Bfree>
 800a962:	2300      	movs	r3, #0
 800a964:	9800      	ldr	r0, [sp, #0]
 800a966:	702b      	strb	r3, [r5, #0]
 800a968:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a96a:	3001      	adds	r0, #1
 800a96c:	6018      	str	r0, [r3, #0]
 800a96e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a970:	2b00      	cmp	r3, #0
 800a972:	f43f acf1 	beq.w	800a358 <_dtoa_r+0xa0>
 800a976:	601d      	str	r5, [r3, #0]
 800a978:	e4ee      	b.n	800a358 <_dtoa_r+0xa0>
 800a97a:	9f00      	ldr	r7, [sp, #0]
 800a97c:	462b      	mov	r3, r5
 800a97e:	461d      	mov	r5, r3
 800a980:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a984:	2a39      	cmp	r2, #57	; 0x39
 800a986:	d106      	bne.n	800a996 <_dtoa_r+0x6de>
 800a988:	9a01      	ldr	r2, [sp, #4]
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d1f7      	bne.n	800a97e <_dtoa_r+0x6c6>
 800a98e:	9901      	ldr	r1, [sp, #4]
 800a990:	2230      	movs	r2, #48	; 0x30
 800a992:	3701      	adds	r7, #1
 800a994:	700a      	strb	r2, [r1, #0]
 800a996:	781a      	ldrb	r2, [r3, #0]
 800a998:	3201      	adds	r2, #1
 800a99a:	701a      	strb	r2, [r3, #0]
 800a99c:	e790      	b.n	800a8c0 <_dtoa_r+0x608>
 800a99e:	4ba6      	ldr	r3, [pc, #664]	; (800ac38 <_dtoa_r+0x980>)
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	f7f5 fe31 	bl	8000608 <__aeabi_dmul>
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	4606      	mov	r6, r0
 800a9ac:	460f      	mov	r7, r1
 800a9ae:	f7f6 f893 	bl	8000ad8 <__aeabi_dcmpeq>
 800a9b2:	2800      	cmp	r0, #0
 800a9b4:	d09d      	beq.n	800a8f2 <_dtoa_r+0x63a>
 800a9b6:	e7cf      	b.n	800a958 <_dtoa_r+0x6a0>
 800a9b8:	9a08      	ldr	r2, [sp, #32]
 800a9ba:	2a00      	cmp	r2, #0
 800a9bc:	f000 80d7 	beq.w	800ab6e <_dtoa_r+0x8b6>
 800a9c0:	9a06      	ldr	r2, [sp, #24]
 800a9c2:	2a01      	cmp	r2, #1
 800a9c4:	f300 80ba 	bgt.w	800ab3c <_dtoa_r+0x884>
 800a9c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a9ca:	2a00      	cmp	r2, #0
 800a9cc:	f000 80b2 	beq.w	800ab34 <_dtoa_r+0x87c>
 800a9d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a9d4:	9e07      	ldr	r6, [sp, #28]
 800a9d6:	9d04      	ldr	r5, [sp, #16]
 800a9d8:	9a04      	ldr	r2, [sp, #16]
 800a9da:	441a      	add	r2, r3
 800a9dc:	9204      	str	r2, [sp, #16]
 800a9de:	9a05      	ldr	r2, [sp, #20]
 800a9e0:	2101      	movs	r1, #1
 800a9e2:	441a      	add	r2, r3
 800a9e4:	4620      	mov	r0, r4
 800a9e6:	9205      	str	r2, [sp, #20]
 800a9e8:	f000 fd86 	bl	800b4f8 <__i2b>
 800a9ec:	4607      	mov	r7, r0
 800a9ee:	2d00      	cmp	r5, #0
 800a9f0:	dd0c      	ble.n	800aa0c <_dtoa_r+0x754>
 800a9f2:	9b05      	ldr	r3, [sp, #20]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	dd09      	ble.n	800aa0c <_dtoa_r+0x754>
 800a9f8:	42ab      	cmp	r3, r5
 800a9fa:	9a04      	ldr	r2, [sp, #16]
 800a9fc:	bfa8      	it	ge
 800a9fe:	462b      	movge	r3, r5
 800aa00:	1ad2      	subs	r2, r2, r3
 800aa02:	9204      	str	r2, [sp, #16]
 800aa04:	9a05      	ldr	r2, [sp, #20]
 800aa06:	1aed      	subs	r5, r5, r3
 800aa08:	1ad3      	subs	r3, r2, r3
 800aa0a:	9305      	str	r3, [sp, #20]
 800aa0c:	9b07      	ldr	r3, [sp, #28]
 800aa0e:	b31b      	cbz	r3, 800aa58 <_dtoa_r+0x7a0>
 800aa10:	9b08      	ldr	r3, [sp, #32]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	f000 80af 	beq.w	800ab76 <_dtoa_r+0x8be>
 800aa18:	2e00      	cmp	r6, #0
 800aa1a:	dd13      	ble.n	800aa44 <_dtoa_r+0x78c>
 800aa1c:	4639      	mov	r1, r7
 800aa1e:	4632      	mov	r2, r6
 800aa20:	4620      	mov	r0, r4
 800aa22:	f000 fe29 	bl	800b678 <__pow5mult>
 800aa26:	ee18 2a10 	vmov	r2, s16
 800aa2a:	4601      	mov	r1, r0
 800aa2c:	4607      	mov	r7, r0
 800aa2e:	4620      	mov	r0, r4
 800aa30:	f000 fd78 	bl	800b524 <__multiply>
 800aa34:	ee18 1a10 	vmov	r1, s16
 800aa38:	4680      	mov	r8, r0
 800aa3a:	4620      	mov	r0, r4
 800aa3c:	f000 fca4 	bl	800b388 <_Bfree>
 800aa40:	ee08 8a10 	vmov	s16, r8
 800aa44:	9b07      	ldr	r3, [sp, #28]
 800aa46:	1b9a      	subs	r2, r3, r6
 800aa48:	d006      	beq.n	800aa58 <_dtoa_r+0x7a0>
 800aa4a:	ee18 1a10 	vmov	r1, s16
 800aa4e:	4620      	mov	r0, r4
 800aa50:	f000 fe12 	bl	800b678 <__pow5mult>
 800aa54:	ee08 0a10 	vmov	s16, r0
 800aa58:	2101      	movs	r1, #1
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	f000 fd4c 	bl	800b4f8 <__i2b>
 800aa60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	4606      	mov	r6, r0
 800aa66:	f340 8088 	ble.w	800ab7a <_dtoa_r+0x8c2>
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	4601      	mov	r1, r0
 800aa6e:	4620      	mov	r0, r4
 800aa70:	f000 fe02 	bl	800b678 <__pow5mult>
 800aa74:	9b06      	ldr	r3, [sp, #24]
 800aa76:	2b01      	cmp	r3, #1
 800aa78:	4606      	mov	r6, r0
 800aa7a:	f340 8081 	ble.w	800ab80 <_dtoa_r+0x8c8>
 800aa7e:	f04f 0800 	mov.w	r8, #0
 800aa82:	6933      	ldr	r3, [r6, #16]
 800aa84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aa88:	6918      	ldr	r0, [r3, #16]
 800aa8a:	f000 fce5 	bl	800b458 <__hi0bits>
 800aa8e:	f1c0 0020 	rsb	r0, r0, #32
 800aa92:	9b05      	ldr	r3, [sp, #20]
 800aa94:	4418      	add	r0, r3
 800aa96:	f010 001f 	ands.w	r0, r0, #31
 800aa9a:	f000 8092 	beq.w	800abc2 <_dtoa_r+0x90a>
 800aa9e:	f1c0 0320 	rsb	r3, r0, #32
 800aaa2:	2b04      	cmp	r3, #4
 800aaa4:	f340 808a 	ble.w	800abbc <_dtoa_r+0x904>
 800aaa8:	f1c0 001c 	rsb	r0, r0, #28
 800aaac:	9b04      	ldr	r3, [sp, #16]
 800aaae:	4403      	add	r3, r0
 800aab0:	9304      	str	r3, [sp, #16]
 800aab2:	9b05      	ldr	r3, [sp, #20]
 800aab4:	4403      	add	r3, r0
 800aab6:	4405      	add	r5, r0
 800aab8:	9305      	str	r3, [sp, #20]
 800aaba:	9b04      	ldr	r3, [sp, #16]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	dd07      	ble.n	800aad0 <_dtoa_r+0x818>
 800aac0:	ee18 1a10 	vmov	r1, s16
 800aac4:	461a      	mov	r2, r3
 800aac6:	4620      	mov	r0, r4
 800aac8:	f000 fe30 	bl	800b72c <__lshift>
 800aacc:	ee08 0a10 	vmov	s16, r0
 800aad0:	9b05      	ldr	r3, [sp, #20]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	dd05      	ble.n	800aae2 <_dtoa_r+0x82a>
 800aad6:	4631      	mov	r1, r6
 800aad8:	461a      	mov	r2, r3
 800aada:	4620      	mov	r0, r4
 800aadc:	f000 fe26 	bl	800b72c <__lshift>
 800aae0:	4606      	mov	r6, r0
 800aae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d06e      	beq.n	800abc6 <_dtoa_r+0x90e>
 800aae8:	ee18 0a10 	vmov	r0, s16
 800aaec:	4631      	mov	r1, r6
 800aaee:	f000 fe8d 	bl	800b80c <__mcmp>
 800aaf2:	2800      	cmp	r0, #0
 800aaf4:	da67      	bge.n	800abc6 <_dtoa_r+0x90e>
 800aaf6:	9b00      	ldr	r3, [sp, #0]
 800aaf8:	3b01      	subs	r3, #1
 800aafa:	ee18 1a10 	vmov	r1, s16
 800aafe:	9300      	str	r3, [sp, #0]
 800ab00:	220a      	movs	r2, #10
 800ab02:	2300      	movs	r3, #0
 800ab04:	4620      	mov	r0, r4
 800ab06:	f000 fc61 	bl	800b3cc <__multadd>
 800ab0a:	9b08      	ldr	r3, [sp, #32]
 800ab0c:	ee08 0a10 	vmov	s16, r0
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	f000 81b1 	beq.w	800ae78 <_dtoa_r+0xbc0>
 800ab16:	2300      	movs	r3, #0
 800ab18:	4639      	mov	r1, r7
 800ab1a:	220a      	movs	r2, #10
 800ab1c:	4620      	mov	r0, r4
 800ab1e:	f000 fc55 	bl	800b3cc <__multadd>
 800ab22:	9b02      	ldr	r3, [sp, #8]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	4607      	mov	r7, r0
 800ab28:	f300 808e 	bgt.w	800ac48 <_dtoa_r+0x990>
 800ab2c:	9b06      	ldr	r3, [sp, #24]
 800ab2e:	2b02      	cmp	r3, #2
 800ab30:	dc51      	bgt.n	800abd6 <_dtoa_r+0x91e>
 800ab32:	e089      	b.n	800ac48 <_dtoa_r+0x990>
 800ab34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ab3a:	e74b      	b.n	800a9d4 <_dtoa_r+0x71c>
 800ab3c:	9b03      	ldr	r3, [sp, #12]
 800ab3e:	1e5e      	subs	r6, r3, #1
 800ab40:	9b07      	ldr	r3, [sp, #28]
 800ab42:	42b3      	cmp	r3, r6
 800ab44:	bfbf      	itttt	lt
 800ab46:	9b07      	ldrlt	r3, [sp, #28]
 800ab48:	9607      	strlt	r6, [sp, #28]
 800ab4a:	1af2      	sublt	r2, r6, r3
 800ab4c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ab4e:	bfb6      	itet	lt
 800ab50:	189b      	addlt	r3, r3, r2
 800ab52:	1b9e      	subge	r6, r3, r6
 800ab54:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ab56:	9b03      	ldr	r3, [sp, #12]
 800ab58:	bfb8      	it	lt
 800ab5a:	2600      	movlt	r6, #0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	bfb7      	itett	lt
 800ab60:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ab64:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ab68:	1a9d      	sublt	r5, r3, r2
 800ab6a:	2300      	movlt	r3, #0
 800ab6c:	e734      	b.n	800a9d8 <_dtoa_r+0x720>
 800ab6e:	9e07      	ldr	r6, [sp, #28]
 800ab70:	9d04      	ldr	r5, [sp, #16]
 800ab72:	9f08      	ldr	r7, [sp, #32]
 800ab74:	e73b      	b.n	800a9ee <_dtoa_r+0x736>
 800ab76:	9a07      	ldr	r2, [sp, #28]
 800ab78:	e767      	b.n	800aa4a <_dtoa_r+0x792>
 800ab7a:	9b06      	ldr	r3, [sp, #24]
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	dc18      	bgt.n	800abb2 <_dtoa_r+0x8fa>
 800ab80:	f1ba 0f00 	cmp.w	sl, #0
 800ab84:	d115      	bne.n	800abb2 <_dtoa_r+0x8fa>
 800ab86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab8a:	b993      	cbnz	r3, 800abb2 <_dtoa_r+0x8fa>
 800ab8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ab90:	0d1b      	lsrs	r3, r3, #20
 800ab92:	051b      	lsls	r3, r3, #20
 800ab94:	b183      	cbz	r3, 800abb8 <_dtoa_r+0x900>
 800ab96:	9b04      	ldr	r3, [sp, #16]
 800ab98:	3301      	adds	r3, #1
 800ab9a:	9304      	str	r3, [sp, #16]
 800ab9c:	9b05      	ldr	r3, [sp, #20]
 800ab9e:	3301      	adds	r3, #1
 800aba0:	9305      	str	r3, [sp, #20]
 800aba2:	f04f 0801 	mov.w	r8, #1
 800aba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	f47f af6a 	bne.w	800aa82 <_dtoa_r+0x7ca>
 800abae:	2001      	movs	r0, #1
 800abb0:	e76f      	b.n	800aa92 <_dtoa_r+0x7da>
 800abb2:	f04f 0800 	mov.w	r8, #0
 800abb6:	e7f6      	b.n	800aba6 <_dtoa_r+0x8ee>
 800abb8:	4698      	mov	r8, r3
 800abba:	e7f4      	b.n	800aba6 <_dtoa_r+0x8ee>
 800abbc:	f43f af7d 	beq.w	800aaba <_dtoa_r+0x802>
 800abc0:	4618      	mov	r0, r3
 800abc2:	301c      	adds	r0, #28
 800abc4:	e772      	b.n	800aaac <_dtoa_r+0x7f4>
 800abc6:	9b03      	ldr	r3, [sp, #12]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	dc37      	bgt.n	800ac3c <_dtoa_r+0x984>
 800abcc:	9b06      	ldr	r3, [sp, #24]
 800abce:	2b02      	cmp	r3, #2
 800abd0:	dd34      	ble.n	800ac3c <_dtoa_r+0x984>
 800abd2:	9b03      	ldr	r3, [sp, #12]
 800abd4:	9302      	str	r3, [sp, #8]
 800abd6:	9b02      	ldr	r3, [sp, #8]
 800abd8:	b96b      	cbnz	r3, 800abf6 <_dtoa_r+0x93e>
 800abda:	4631      	mov	r1, r6
 800abdc:	2205      	movs	r2, #5
 800abde:	4620      	mov	r0, r4
 800abe0:	f000 fbf4 	bl	800b3cc <__multadd>
 800abe4:	4601      	mov	r1, r0
 800abe6:	4606      	mov	r6, r0
 800abe8:	ee18 0a10 	vmov	r0, s16
 800abec:	f000 fe0e 	bl	800b80c <__mcmp>
 800abf0:	2800      	cmp	r0, #0
 800abf2:	f73f adbb 	bgt.w	800a76c <_dtoa_r+0x4b4>
 800abf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abf8:	9d01      	ldr	r5, [sp, #4]
 800abfa:	43db      	mvns	r3, r3
 800abfc:	9300      	str	r3, [sp, #0]
 800abfe:	f04f 0800 	mov.w	r8, #0
 800ac02:	4631      	mov	r1, r6
 800ac04:	4620      	mov	r0, r4
 800ac06:	f000 fbbf 	bl	800b388 <_Bfree>
 800ac0a:	2f00      	cmp	r7, #0
 800ac0c:	f43f aea4 	beq.w	800a958 <_dtoa_r+0x6a0>
 800ac10:	f1b8 0f00 	cmp.w	r8, #0
 800ac14:	d005      	beq.n	800ac22 <_dtoa_r+0x96a>
 800ac16:	45b8      	cmp	r8, r7
 800ac18:	d003      	beq.n	800ac22 <_dtoa_r+0x96a>
 800ac1a:	4641      	mov	r1, r8
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	f000 fbb3 	bl	800b388 <_Bfree>
 800ac22:	4639      	mov	r1, r7
 800ac24:	4620      	mov	r0, r4
 800ac26:	f000 fbaf 	bl	800b388 <_Bfree>
 800ac2a:	e695      	b.n	800a958 <_dtoa_r+0x6a0>
 800ac2c:	2600      	movs	r6, #0
 800ac2e:	4637      	mov	r7, r6
 800ac30:	e7e1      	b.n	800abf6 <_dtoa_r+0x93e>
 800ac32:	9700      	str	r7, [sp, #0]
 800ac34:	4637      	mov	r7, r6
 800ac36:	e599      	b.n	800a76c <_dtoa_r+0x4b4>
 800ac38:	40240000 	.word	0x40240000
 800ac3c:	9b08      	ldr	r3, [sp, #32]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	f000 80ca 	beq.w	800add8 <_dtoa_r+0xb20>
 800ac44:	9b03      	ldr	r3, [sp, #12]
 800ac46:	9302      	str	r3, [sp, #8]
 800ac48:	2d00      	cmp	r5, #0
 800ac4a:	dd05      	ble.n	800ac58 <_dtoa_r+0x9a0>
 800ac4c:	4639      	mov	r1, r7
 800ac4e:	462a      	mov	r2, r5
 800ac50:	4620      	mov	r0, r4
 800ac52:	f000 fd6b 	bl	800b72c <__lshift>
 800ac56:	4607      	mov	r7, r0
 800ac58:	f1b8 0f00 	cmp.w	r8, #0
 800ac5c:	d05b      	beq.n	800ad16 <_dtoa_r+0xa5e>
 800ac5e:	6879      	ldr	r1, [r7, #4]
 800ac60:	4620      	mov	r0, r4
 800ac62:	f000 fb51 	bl	800b308 <_Balloc>
 800ac66:	4605      	mov	r5, r0
 800ac68:	b928      	cbnz	r0, 800ac76 <_dtoa_r+0x9be>
 800ac6a:	4b87      	ldr	r3, [pc, #540]	; (800ae88 <_dtoa_r+0xbd0>)
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ac72:	f7ff bb3b 	b.w	800a2ec <_dtoa_r+0x34>
 800ac76:	693a      	ldr	r2, [r7, #16]
 800ac78:	3202      	adds	r2, #2
 800ac7a:	0092      	lsls	r2, r2, #2
 800ac7c:	f107 010c 	add.w	r1, r7, #12
 800ac80:	300c      	adds	r0, #12
 800ac82:	f000 fb33 	bl	800b2ec <memcpy>
 800ac86:	2201      	movs	r2, #1
 800ac88:	4629      	mov	r1, r5
 800ac8a:	4620      	mov	r0, r4
 800ac8c:	f000 fd4e 	bl	800b72c <__lshift>
 800ac90:	9b01      	ldr	r3, [sp, #4]
 800ac92:	f103 0901 	add.w	r9, r3, #1
 800ac96:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ac9a:	4413      	add	r3, r2
 800ac9c:	9305      	str	r3, [sp, #20]
 800ac9e:	f00a 0301 	and.w	r3, sl, #1
 800aca2:	46b8      	mov	r8, r7
 800aca4:	9304      	str	r3, [sp, #16]
 800aca6:	4607      	mov	r7, r0
 800aca8:	4631      	mov	r1, r6
 800acaa:	ee18 0a10 	vmov	r0, s16
 800acae:	f7ff fa75 	bl	800a19c <quorem>
 800acb2:	4641      	mov	r1, r8
 800acb4:	9002      	str	r0, [sp, #8]
 800acb6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800acba:	ee18 0a10 	vmov	r0, s16
 800acbe:	f000 fda5 	bl	800b80c <__mcmp>
 800acc2:	463a      	mov	r2, r7
 800acc4:	9003      	str	r0, [sp, #12]
 800acc6:	4631      	mov	r1, r6
 800acc8:	4620      	mov	r0, r4
 800acca:	f000 fdbb 	bl	800b844 <__mdiff>
 800acce:	68c2      	ldr	r2, [r0, #12]
 800acd0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800acd4:	4605      	mov	r5, r0
 800acd6:	bb02      	cbnz	r2, 800ad1a <_dtoa_r+0xa62>
 800acd8:	4601      	mov	r1, r0
 800acda:	ee18 0a10 	vmov	r0, s16
 800acde:	f000 fd95 	bl	800b80c <__mcmp>
 800ace2:	4602      	mov	r2, r0
 800ace4:	4629      	mov	r1, r5
 800ace6:	4620      	mov	r0, r4
 800ace8:	9207      	str	r2, [sp, #28]
 800acea:	f000 fb4d 	bl	800b388 <_Bfree>
 800acee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800acf2:	ea43 0102 	orr.w	r1, r3, r2
 800acf6:	9b04      	ldr	r3, [sp, #16]
 800acf8:	430b      	orrs	r3, r1
 800acfa:	464d      	mov	r5, r9
 800acfc:	d10f      	bne.n	800ad1e <_dtoa_r+0xa66>
 800acfe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ad02:	d02a      	beq.n	800ad5a <_dtoa_r+0xaa2>
 800ad04:	9b03      	ldr	r3, [sp, #12]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	dd02      	ble.n	800ad10 <_dtoa_r+0xa58>
 800ad0a:	9b02      	ldr	r3, [sp, #8]
 800ad0c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ad10:	f88b a000 	strb.w	sl, [fp]
 800ad14:	e775      	b.n	800ac02 <_dtoa_r+0x94a>
 800ad16:	4638      	mov	r0, r7
 800ad18:	e7ba      	b.n	800ac90 <_dtoa_r+0x9d8>
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	e7e2      	b.n	800ace4 <_dtoa_r+0xa2c>
 800ad1e:	9b03      	ldr	r3, [sp, #12]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	db04      	blt.n	800ad2e <_dtoa_r+0xa76>
 800ad24:	9906      	ldr	r1, [sp, #24]
 800ad26:	430b      	orrs	r3, r1
 800ad28:	9904      	ldr	r1, [sp, #16]
 800ad2a:	430b      	orrs	r3, r1
 800ad2c:	d122      	bne.n	800ad74 <_dtoa_r+0xabc>
 800ad2e:	2a00      	cmp	r2, #0
 800ad30:	ddee      	ble.n	800ad10 <_dtoa_r+0xa58>
 800ad32:	ee18 1a10 	vmov	r1, s16
 800ad36:	2201      	movs	r2, #1
 800ad38:	4620      	mov	r0, r4
 800ad3a:	f000 fcf7 	bl	800b72c <__lshift>
 800ad3e:	4631      	mov	r1, r6
 800ad40:	ee08 0a10 	vmov	s16, r0
 800ad44:	f000 fd62 	bl	800b80c <__mcmp>
 800ad48:	2800      	cmp	r0, #0
 800ad4a:	dc03      	bgt.n	800ad54 <_dtoa_r+0xa9c>
 800ad4c:	d1e0      	bne.n	800ad10 <_dtoa_r+0xa58>
 800ad4e:	f01a 0f01 	tst.w	sl, #1
 800ad52:	d0dd      	beq.n	800ad10 <_dtoa_r+0xa58>
 800ad54:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ad58:	d1d7      	bne.n	800ad0a <_dtoa_r+0xa52>
 800ad5a:	2339      	movs	r3, #57	; 0x39
 800ad5c:	f88b 3000 	strb.w	r3, [fp]
 800ad60:	462b      	mov	r3, r5
 800ad62:	461d      	mov	r5, r3
 800ad64:	3b01      	subs	r3, #1
 800ad66:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ad6a:	2a39      	cmp	r2, #57	; 0x39
 800ad6c:	d071      	beq.n	800ae52 <_dtoa_r+0xb9a>
 800ad6e:	3201      	adds	r2, #1
 800ad70:	701a      	strb	r2, [r3, #0]
 800ad72:	e746      	b.n	800ac02 <_dtoa_r+0x94a>
 800ad74:	2a00      	cmp	r2, #0
 800ad76:	dd07      	ble.n	800ad88 <_dtoa_r+0xad0>
 800ad78:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ad7c:	d0ed      	beq.n	800ad5a <_dtoa_r+0xaa2>
 800ad7e:	f10a 0301 	add.w	r3, sl, #1
 800ad82:	f88b 3000 	strb.w	r3, [fp]
 800ad86:	e73c      	b.n	800ac02 <_dtoa_r+0x94a>
 800ad88:	9b05      	ldr	r3, [sp, #20]
 800ad8a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ad8e:	4599      	cmp	r9, r3
 800ad90:	d047      	beq.n	800ae22 <_dtoa_r+0xb6a>
 800ad92:	ee18 1a10 	vmov	r1, s16
 800ad96:	2300      	movs	r3, #0
 800ad98:	220a      	movs	r2, #10
 800ad9a:	4620      	mov	r0, r4
 800ad9c:	f000 fb16 	bl	800b3cc <__multadd>
 800ada0:	45b8      	cmp	r8, r7
 800ada2:	ee08 0a10 	vmov	s16, r0
 800ada6:	f04f 0300 	mov.w	r3, #0
 800adaa:	f04f 020a 	mov.w	r2, #10
 800adae:	4641      	mov	r1, r8
 800adb0:	4620      	mov	r0, r4
 800adb2:	d106      	bne.n	800adc2 <_dtoa_r+0xb0a>
 800adb4:	f000 fb0a 	bl	800b3cc <__multadd>
 800adb8:	4680      	mov	r8, r0
 800adba:	4607      	mov	r7, r0
 800adbc:	f109 0901 	add.w	r9, r9, #1
 800adc0:	e772      	b.n	800aca8 <_dtoa_r+0x9f0>
 800adc2:	f000 fb03 	bl	800b3cc <__multadd>
 800adc6:	4639      	mov	r1, r7
 800adc8:	4680      	mov	r8, r0
 800adca:	2300      	movs	r3, #0
 800adcc:	220a      	movs	r2, #10
 800adce:	4620      	mov	r0, r4
 800add0:	f000 fafc 	bl	800b3cc <__multadd>
 800add4:	4607      	mov	r7, r0
 800add6:	e7f1      	b.n	800adbc <_dtoa_r+0xb04>
 800add8:	9b03      	ldr	r3, [sp, #12]
 800adda:	9302      	str	r3, [sp, #8]
 800addc:	9d01      	ldr	r5, [sp, #4]
 800adde:	ee18 0a10 	vmov	r0, s16
 800ade2:	4631      	mov	r1, r6
 800ade4:	f7ff f9da 	bl	800a19c <quorem>
 800ade8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800adec:	9b01      	ldr	r3, [sp, #4]
 800adee:	f805 ab01 	strb.w	sl, [r5], #1
 800adf2:	1aea      	subs	r2, r5, r3
 800adf4:	9b02      	ldr	r3, [sp, #8]
 800adf6:	4293      	cmp	r3, r2
 800adf8:	dd09      	ble.n	800ae0e <_dtoa_r+0xb56>
 800adfa:	ee18 1a10 	vmov	r1, s16
 800adfe:	2300      	movs	r3, #0
 800ae00:	220a      	movs	r2, #10
 800ae02:	4620      	mov	r0, r4
 800ae04:	f000 fae2 	bl	800b3cc <__multadd>
 800ae08:	ee08 0a10 	vmov	s16, r0
 800ae0c:	e7e7      	b.n	800adde <_dtoa_r+0xb26>
 800ae0e:	9b02      	ldr	r3, [sp, #8]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	bfc8      	it	gt
 800ae14:	461d      	movgt	r5, r3
 800ae16:	9b01      	ldr	r3, [sp, #4]
 800ae18:	bfd8      	it	le
 800ae1a:	2501      	movle	r5, #1
 800ae1c:	441d      	add	r5, r3
 800ae1e:	f04f 0800 	mov.w	r8, #0
 800ae22:	ee18 1a10 	vmov	r1, s16
 800ae26:	2201      	movs	r2, #1
 800ae28:	4620      	mov	r0, r4
 800ae2a:	f000 fc7f 	bl	800b72c <__lshift>
 800ae2e:	4631      	mov	r1, r6
 800ae30:	ee08 0a10 	vmov	s16, r0
 800ae34:	f000 fcea 	bl	800b80c <__mcmp>
 800ae38:	2800      	cmp	r0, #0
 800ae3a:	dc91      	bgt.n	800ad60 <_dtoa_r+0xaa8>
 800ae3c:	d102      	bne.n	800ae44 <_dtoa_r+0xb8c>
 800ae3e:	f01a 0f01 	tst.w	sl, #1
 800ae42:	d18d      	bne.n	800ad60 <_dtoa_r+0xaa8>
 800ae44:	462b      	mov	r3, r5
 800ae46:	461d      	mov	r5, r3
 800ae48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae4c:	2a30      	cmp	r2, #48	; 0x30
 800ae4e:	d0fa      	beq.n	800ae46 <_dtoa_r+0xb8e>
 800ae50:	e6d7      	b.n	800ac02 <_dtoa_r+0x94a>
 800ae52:	9a01      	ldr	r2, [sp, #4]
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d184      	bne.n	800ad62 <_dtoa_r+0xaaa>
 800ae58:	9b00      	ldr	r3, [sp, #0]
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	9300      	str	r3, [sp, #0]
 800ae5e:	2331      	movs	r3, #49	; 0x31
 800ae60:	7013      	strb	r3, [r2, #0]
 800ae62:	e6ce      	b.n	800ac02 <_dtoa_r+0x94a>
 800ae64:	4b09      	ldr	r3, [pc, #36]	; (800ae8c <_dtoa_r+0xbd4>)
 800ae66:	f7ff ba95 	b.w	800a394 <_dtoa_r+0xdc>
 800ae6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	f47f aa6e 	bne.w	800a34e <_dtoa_r+0x96>
 800ae72:	4b07      	ldr	r3, [pc, #28]	; (800ae90 <_dtoa_r+0xbd8>)
 800ae74:	f7ff ba8e 	b.w	800a394 <_dtoa_r+0xdc>
 800ae78:	9b02      	ldr	r3, [sp, #8]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	dcae      	bgt.n	800addc <_dtoa_r+0xb24>
 800ae7e:	9b06      	ldr	r3, [sp, #24]
 800ae80:	2b02      	cmp	r3, #2
 800ae82:	f73f aea8 	bgt.w	800abd6 <_dtoa_r+0x91e>
 800ae86:	e7a9      	b.n	800addc <_dtoa_r+0xb24>
 800ae88:	0800d027 	.word	0x0800d027
 800ae8c:	0800cf84 	.word	0x0800cf84
 800ae90:	0800cfa8 	.word	0x0800cfa8

0800ae94 <__sflush_r>:
 800ae94:	898a      	ldrh	r2, [r1, #12]
 800ae96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae9a:	4605      	mov	r5, r0
 800ae9c:	0710      	lsls	r0, r2, #28
 800ae9e:	460c      	mov	r4, r1
 800aea0:	d458      	bmi.n	800af54 <__sflush_r+0xc0>
 800aea2:	684b      	ldr	r3, [r1, #4]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	dc05      	bgt.n	800aeb4 <__sflush_r+0x20>
 800aea8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	dc02      	bgt.n	800aeb4 <__sflush_r+0x20>
 800aeae:	2000      	movs	r0, #0
 800aeb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aeb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aeb6:	2e00      	cmp	r6, #0
 800aeb8:	d0f9      	beq.n	800aeae <__sflush_r+0x1a>
 800aeba:	2300      	movs	r3, #0
 800aebc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aec0:	682f      	ldr	r7, [r5, #0]
 800aec2:	602b      	str	r3, [r5, #0]
 800aec4:	d032      	beq.n	800af2c <__sflush_r+0x98>
 800aec6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aec8:	89a3      	ldrh	r3, [r4, #12]
 800aeca:	075a      	lsls	r2, r3, #29
 800aecc:	d505      	bpl.n	800aeda <__sflush_r+0x46>
 800aece:	6863      	ldr	r3, [r4, #4]
 800aed0:	1ac0      	subs	r0, r0, r3
 800aed2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aed4:	b10b      	cbz	r3, 800aeda <__sflush_r+0x46>
 800aed6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aed8:	1ac0      	subs	r0, r0, r3
 800aeda:	2300      	movs	r3, #0
 800aedc:	4602      	mov	r2, r0
 800aede:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aee0:	6a21      	ldr	r1, [r4, #32]
 800aee2:	4628      	mov	r0, r5
 800aee4:	47b0      	blx	r6
 800aee6:	1c43      	adds	r3, r0, #1
 800aee8:	89a3      	ldrh	r3, [r4, #12]
 800aeea:	d106      	bne.n	800aefa <__sflush_r+0x66>
 800aeec:	6829      	ldr	r1, [r5, #0]
 800aeee:	291d      	cmp	r1, #29
 800aef0:	d82c      	bhi.n	800af4c <__sflush_r+0xb8>
 800aef2:	4a2a      	ldr	r2, [pc, #168]	; (800af9c <__sflush_r+0x108>)
 800aef4:	40ca      	lsrs	r2, r1
 800aef6:	07d6      	lsls	r6, r2, #31
 800aef8:	d528      	bpl.n	800af4c <__sflush_r+0xb8>
 800aefa:	2200      	movs	r2, #0
 800aefc:	6062      	str	r2, [r4, #4]
 800aefe:	04d9      	lsls	r1, r3, #19
 800af00:	6922      	ldr	r2, [r4, #16]
 800af02:	6022      	str	r2, [r4, #0]
 800af04:	d504      	bpl.n	800af10 <__sflush_r+0x7c>
 800af06:	1c42      	adds	r2, r0, #1
 800af08:	d101      	bne.n	800af0e <__sflush_r+0x7a>
 800af0a:	682b      	ldr	r3, [r5, #0]
 800af0c:	b903      	cbnz	r3, 800af10 <__sflush_r+0x7c>
 800af0e:	6560      	str	r0, [r4, #84]	; 0x54
 800af10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af12:	602f      	str	r7, [r5, #0]
 800af14:	2900      	cmp	r1, #0
 800af16:	d0ca      	beq.n	800aeae <__sflush_r+0x1a>
 800af18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af1c:	4299      	cmp	r1, r3
 800af1e:	d002      	beq.n	800af26 <__sflush_r+0x92>
 800af20:	4628      	mov	r0, r5
 800af22:	f000 fd8b 	bl	800ba3c <_free_r>
 800af26:	2000      	movs	r0, #0
 800af28:	6360      	str	r0, [r4, #52]	; 0x34
 800af2a:	e7c1      	b.n	800aeb0 <__sflush_r+0x1c>
 800af2c:	6a21      	ldr	r1, [r4, #32]
 800af2e:	2301      	movs	r3, #1
 800af30:	4628      	mov	r0, r5
 800af32:	47b0      	blx	r6
 800af34:	1c41      	adds	r1, r0, #1
 800af36:	d1c7      	bne.n	800aec8 <__sflush_r+0x34>
 800af38:	682b      	ldr	r3, [r5, #0]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d0c4      	beq.n	800aec8 <__sflush_r+0x34>
 800af3e:	2b1d      	cmp	r3, #29
 800af40:	d001      	beq.n	800af46 <__sflush_r+0xb2>
 800af42:	2b16      	cmp	r3, #22
 800af44:	d101      	bne.n	800af4a <__sflush_r+0xb6>
 800af46:	602f      	str	r7, [r5, #0]
 800af48:	e7b1      	b.n	800aeae <__sflush_r+0x1a>
 800af4a:	89a3      	ldrh	r3, [r4, #12]
 800af4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af50:	81a3      	strh	r3, [r4, #12]
 800af52:	e7ad      	b.n	800aeb0 <__sflush_r+0x1c>
 800af54:	690f      	ldr	r7, [r1, #16]
 800af56:	2f00      	cmp	r7, #0
 800af58:	d0a9      	beq.n	800aeae <__sflush_r+0x1a>
 800af5a:	0793      	lsls	r3, r2, #30
 800af5c:	680e      	ldr	r6, [r1, #0]
 800af5e:	bf08      	it	eq
 800af60:	694b      	ldreq	r3, [r1, #20]
 800af62:	600f      	str	r7, [r1, #0]
 800af64:	bf18      	it	ne
 800af66:	2300      	movne	r3, #0
 800af68:	eba6 0807 	sub.w	r8, r6, r7
 800af6c:	608b      	str	r3, [r1, #8]
 800af6e:	f1b8 0f00 	cmp.w	r8, #0
 800af72:	dd9c      	ble.n	800aeae <__sflush_r+0x1a>
 800af74:	6a21      	ldr	r1, [r4, #32]
 800af76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af78:	4643      	mov	r3, r8
 800af7a:	463a      	mov	r2, r7
 800af7c:	4628      	mov	r0, r5
 800af7e:	47b0      	blx	r6
 800af80:	2800      	cmp	r0, #0
 800af82:	dc06      	bgt.n	800af92 <__sflush_r+0xfe>
 800af84:	89a3      	ldrh	r3, [r4, #12]
 800af86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af8a:	81a3      	strh	r3, [r4, #12]
 800af8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af90:	e78e      	b.n	800aeb0 <__sflush_r+0x1c>
 800af92:	4407      	add	r7, r0
 800af94:	eba8 0800 	sub.w	r8, r8, r0
 800af98:	e7e9      	b.n	800af6e <__sflush_r+0xda>
 800af9a:	bf00      	nop
 800af9c:	20400001 	.word	0x20400001

0800afa0 <_fflush_r>:
 800afa0:	b538      	push	{r3, r4, r5, lr}
 800afa2:	690b      	ldr	r3, [r1, #16]
 800afa4:	4605      	mov	r5, r0
 800afa6:	460c      	mov	r4, r1
 800afa8:	b913      	cbnz	r3, 800afb0 <_fflush_r+0x10>
 800afaa:	2500      	movs	r5, #0
 800afac:	4628      	mov	r0, r5
 800afae:	bd38      	pop	{r3, r4, r5, pc}
 800afb0:	b118      	cbz	r0, 800afba <_fflush_r+0x1a>
 800afb2:	6983      	ldr	r3, [r0, #24]
 800afb4:	b90b      	cbnz	r3, 800afba <_fflush_r+0x1a>
 800afb6:	f000 f887 	bl	800b0c8 <__sinit>
 800afba:	4b14      	ldr	r3, [pc, #80]	; (800b00c <_fflush_r+0x6c>)
 800afbc:	429c      	cmp	r4, r3
 800afbe:	d11b      	bne.n	800aff8 <_fflush_r+0x58>
 800afc0:	686c      	ldr	r4, [r5, #4]
 800afc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d0ef      	beq.n	800afaa <_fflush_r+0xa>
 800afca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800afcc:	07d0      	lsls	r0, r2, #31
 800afce:	d404      	bmi.n	800afda <_fflush_r+0x3a>
 800afd0:	0599      	lsls	r1, r3, #22
 800afd2:	d402      	bmi.n	800afda <_fflush_r+0x3a>
 800afd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afd6:	f000 f91a 	bl	800b20e <__retarget_lock_acquire_recursive>
 800afda:	4628      	mov	r0, r5
 800afdc:	4621      	mov	r1, r4
 800afde:	f7ff ff59 	bl	800ae94 <__sflush_r>
 800afe2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800afe4:	07da      	lsls	r2, r3, #31
 800afe6:	4605      	mov	r5, r0
 800afe8:	d4e0      	bmi.n	800afac <_fflush_r+0xc>
 800afea:	89a3      	ldrh	r3, [r4, #12]
 800afec:	059b      	lsls	r3, r3, #22
 800afee:	d4dd      	bmi.n	800afac <_fflush_r+0xc>
 800aff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aff2:	f000 f90d 	bl	800b210 <__retarget_lock_release_recursive>
 800aff6:	e7d9      	b.n	800afac <_fflush_r+0xc>
 800aff8:	4b05      	ldr	r3, [pc, #20]	; (800b010 <_fflush_r+0x70>)
 800affa:	429c      	cmp	r4, r3
 800affc:	d101      	bne.n	800b002 <_fflush_r+0x62>
 800affe:	68ac      	ldr	r4, [r5, #8]
 800b000:	e7df      	b.n	800afc2 <_fflush_r+0x22>
 800b002:	4b04      	ldr	r3, [pc, #16]	; (800b014 <_fflush_r+0x74>)
 800b004:	429c      	cmp	r4, r3
 800b006:	bf08      	it	eq
 800b008:	68ec      	ldreq	r4, [r5, #12]
 800b00a:	e7da      	b.n	800afc2 <_fflush_r+0x22>
 800b00c:	0800d058 	.word	0x0800d058
 800b010:	0800d078 	.word	0x0800d078
 800b014:	0800d038 	.word	0x0800d038

0800b018 <std>:
 800b018:	2300      	movs	r3, #0
 800b01a:	b510      	push	{r4, lr}
 800b01c:	4604      	mov	r4, r0
 800b01e:	e9c0 3300 	strd	r3, r3, [r0]
 800b022:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b026:	6083      	str	r3, [r0, #8]
 800b028:	8181      	strh	r1, [r0, #12]
 800b02a:	6643      	str	r3, [r0, #100]	; 0x64
 800b02c:	81c2      	strh	r2, [r0, #14]
 800b02e:	6183      	str	r3, [r0, #24]
 800b030:	4619      	mov	r1, r3
 800b032:	2208      	movs	r2, #8
 800b034:	305c      	adds	r0, #92	; 0x5c
 800b036:	f7fe faf1 	bl	800961c <memset>
 800b03a:	4b05      	ldr	r3, [pc, #20]	; (800b050 <std+0x38>)
 800b03c:	6263      	str	r3, [r4, #36]	; 0x24
 800b03e:	4b05      	ldr	r3, [pc, #20]	; (800b054 <std+0x3c>)
 800b040:	62a3      	str	r3, [r4, #40]	; 0x28
 800b042:	4b05      	ldr	r3, [pc, #20]	; (800b058 <std+0x40>)
 800b044:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b046:	4b05      	ldr	r3, [pc, #20]	; (800b05c <std+0x44>)
 800b048:	6224      	str	r4, [r4, #32]
 800b04a:	6323      	str	r3, [r4, #48]	; 0x30
 800b04c:	bd10      	pop	{r4, pc}
 800b04e:	bf00      	nop
 800b050:	0800bed1 	.word	0x0800bed1
 800b054:	0800bef3 	.word	0x0800bef3
 800b058:	0800bf2b 	.word	0x0800bf2b
 800b05c:	0800bf4f 	.word	0x0800bf4f

0800b060 <_cleanup_r>:
 800b060:	4901      	ldr	r1, [pc, #4]	; (800b068 <_cleanup_r+0x8>)
 800b062:	f000 b8af 	b.w	800b1c4 <_fwalk_reent>
 800b066:	bf00      	nop
 800b068:	0800afa1 	.word	0x0800afa1

0800b06c <__sfmoreglue>:
 800b06c:	b570      	push	{r4, r5, r6, lr}
 800b06e:	2268      	movs	r2, #104	; 0x68
 800b070:	1e4d      	subs	r5, r1, #1
 800b072:	4355      	muls	r5, r2
 800b074:	460e      	mov	r6, r1
 800b076:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b07a:	f000 fd4b 	bl	800bb14 <_malloc_r>
 800b07e:	4604      	mov	r4, r0
 800b080:	b140      	cbz	r0, 800b094 <__sfmoreglue+0x28>
 800b082:	2100      	movs	r1, #0
 800b084:	e9c0 1600 	strd	r1, r6, [r0]
 800b088:	300c      	adds	r0, #12
 800b08a:	60a0      	str	r0, [r4, #8]
 800b08c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b090:	f7fe fac4 	bl	800961c <memset>
 800b094:	4620      	mov	r0, r4
 800b096:	bd70      	pop	{r4, r5, r6, pc}

0800b098 <__sfp_lock_acquire>:
 800b098:	4801      	ldr	r0, [pc, #4]	; (800b0a0 <__sfp_lock_acquire+0x8>)
 800b09a:	f000 b8b8 	b.w	800b20e <__retarget_lock_acquire_recursive>
 800b09e:	bf00      	nop
 800b0a0:	2000182d 	.word	0x2000182d

0800b0a4 <__sfp_lock_release>:
 800b0a4:	4801      	ldr	r0, [pc, #4]	; (800b0ac <__sfp_lock_release+0x8>)
 800b0a6:	f000 b8b3 	b.w	800b210 <__retarget_lock_release_recursive>
 800b0aa:	bf00      	nop
 800b0ac:	2000182d 	.word	0x2000182d

0800b0b0 <__sinit_lock_acquire>:
 800b0b0:	4801      	ldr	r0, [pc, #4]	; (800b0b8 <__sinit_lock_acquire+0x8>)
 800b0b2:	f000 b8ac 	b.w	800b20e <__retarget_lock_acquire_recursive>
 800b0b6:	bf00      	nop
 800b0b8:	2000182e 	.word	0x2000182e

0800b0bc <__sinit_lock_release>:
 800b0bc:	4801      	ldr	r0, [pc, #4]	; (800b0c4 <__sinit_lock_release+0x8>)
 800b0be:	f000 b8a7 	b.w	800b210 <__retarget_lock_release_recursive>
 800b0c2:	bf00      	nop
 800b0c4:	2000182e 	.word	0x2000182e

0800b0c8 <__sinit>:
 800b0c8:	b510      	push	{r4, lr}
 800b0ca:	4604      	mov	r4, r0
 800b0cc:	f7ff fff0 	bl	800b0b0 <__sinit_lock_acquire>
 800b0d0:	69a3      	ldr	r3, [r4, #24]
 800b0d2:	b11b      	cbz	r3, 800b0dc <__sinit+0x14>
 800b0d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0d8:	f7ff bff0 	b.w	800b0bc <__sinit_lock_release>
 800b0dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b0e0:	6523      	str	r3, [r4, #80]	; 0x50
 800b0e2:	4b13      	ldr	r3, [pc, #76]	; (800b130 <__sinit+0x68>)
 800b0e4:	4a13      	ldr	r2, [pc, #76]	; (800b134 <__sinit+0x6c>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b0ea:	42a3      	cmp	r3, r4
 800b0ec:	bf04      	itt	eq
 800b0ee:	2301      	moveq	r3, #1
 800b0f0:	61a3      	streq	r3, [r4, #24]
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	f000 f820 	bl	800b138 <__sfp>
 800b0f8:	6060      	str	r0, [r4, #4]
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	f000 f81c 	bl	800b138 <__sfp>
 800b100:	60a0      	str	r0, [r4, #8]
 800b102:	4620      	mov	r0, r4
 800b104:	f000 f818 	bl	800b138 <__sfp>
 800b108:	2200      	movs	r2, #0
 800b10a:	60e0      	str	r0, [r4, #12]
 800b10c:	2104      	movs	r1, #4
 800b10e:	6860      	ldr	r0, [r4, #4]
 800b110:	f7ff ff82 	bl	800b018 <std>
 800b114:	68a0      	ldr	r0, [r4, #8]
 800b116:	2201      	movs	r2, #1
 800b118:	2109      	movs	r1, #9
 800b11a:	f7ff ff7d 	bl	800b018 <std>
 800b11e:	68e0      	ldr	r0, [r4, #12]
 800b120:	2202      	movs	r2, #2
 800b122:	2112      	movs	r1, #18
 800b124:	f7ff ff78 	bl	800b018 <std>
 800b128:	2301      	movs	r3, #1
 800b12a:	61a3      	str	r3, [r4, #24]
 800b12c:	e7d2      	b.n	800b0d4 <__sinit+0xc>
 800b12e:	bf00      	nop
 800b130:	0800cf70 	.word	0x0800cf70
 800b134:	0800b061 	.word	0x0800b061

0800b138 <__sfp>:
 800b138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b13a:	4607      	mov	r7, r0
 800b13c:	f7ff ffac 	bl	800b098 <__sfp_lock_acquire>
 800b140:	4b1e      	ldr	r3, [pc, #120]	; (800b1bc <__sfp+0x84>)
 800b142:	681e      	ldr	r6, [r3, #0]
 800b144:	69b3      	ldr	r3, [r6, #24]
 800b146:	b913      	cbnz	r3, 800b14e <__sfp+0x16>
 800b148:	4630      	mov	r0, r6
 800b14a:	f7ff ffbd 	bl	800b0c8 <__sinit>
 800b14e:	3648      	adds	r6, #72	; 0x48
 800b150:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b154:	3b01      	subs	r3, #1
 800b156:	d503      	bpl.n	800b160 <__sfp+0x28>
 800b158:	6833      	ldr	r3, [r6, #0]
 800b15a:	b30b      	cbz	r3, 800b1a0 <__sfp+0x68>
 800b15c:	6836      	ldr	r6, [r6, #0]
 800b15e:	e7f7      	b.n	800b150 <__sfp+0x18>
 800b160:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b164:	b9d5      	cbnz	r5, 800b19c <__sfp+0x64>
 800b166:	4b16      	ldr	r3, [pc, #88]	; (800b1c0 <__sfp+0x88>)
 800b168:	60e3      	str	r3, [r4, #12]
 800b16a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b16e:	6665      	str	r5, [r4, #100]	; 0x64
 800b170:	f000 f84c 	bl	800b20c <__retarget_lock_init_recursive>
 800b174:	f7ff ff96 	bl	800b0a4 <__sfp_lock_release>
 800b178:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b17c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b180:	6025      	str	r5, [r4, #0]
 800b182:	61a5      	str	r5, [r4, #24]
 800b184:	2208      	movs	r2, #8
 800b186:	4629      	mov	r1, r5
 800b188:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b18c:	f7fe fa46 	bl	800961c <memset>
 800b190:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b194:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b198:	4620      	mov	r0, r4
 800b19a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b19c:	3468      	adds	r4, #104	; 0x68
 800b19e:	e7d9      	b.n	800b154 <__sfp+0x1c>
 800b1a0:	2104      	movs	r1, #4
 800b1a2:	4638      	mov	r0, r7
 800b1a4:	f7ff ff62 	bl	800b06c <__sfmoreglue>
 800b1a8:	4604      	mov	r4, r0
 800b1aa:	6030      	str	r0, [r6, #0]
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	d1d5      	bne.n	800b15c <__sfp+0x24>
 800b1b0:	f7ff ff78 	bl	800b0a4 <__sfp_lock_release>
 800b1b4:	230c      	movs	r3, #12
 800b1b6:	603b      	str	r3, [r7, #0]
 800b1b8:	e7ee      	b.n	800b198 <__sfp+0x60>
 800b1ba:	bf00      	nop
 800b1bc:	0800cf70 	.word	0x0800cf70
 800b1c0:	ffff0001 	.word	0xffff0001

0800b1c4 <_fwalk_reent>:
 800b1c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1c8:	4606      	mov	r6, r0
 800b1ca:	4688      	mov	r8, r1
 800b1cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b1d0:	2700      	movs	r7, #0
 800b1d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b1d6:	f1b9 0901 	subs.w	r9, r9, #1
 800b1da:	d505      	bpl.n	800b1e8 <_fwalk_reent+0x24>
 800b1dc:	6824      	ldr	r4, [r4, #0]
 800b1de:	2c00      	cmp	r4, #0
 800b1e0:	d1f7      	bne.n	800b1d2 <_fwalk_reent+0xe>
 800b1e2:	4638      	mov	r0, r7
 800b1e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1e8:	89ab      	ldrh	r3, [r5, #12]
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	d907      	bls.n	800b1fe <_fwalk_reent+0x3a>
 800b1ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	d003      	beq.n	800b1fe <_fwalk_reent+0x3a>
 800b1f6:	4629      	mov	r1, r5
 800b1f8:	4630      	mov	r0, r6
 800b1fa:	47c0      	blx	r8
 800b1fc:	4307      	orrs	r7, r0
 800b1fe:	3568      	adds	r5, #104	; 0x68
 800b200:	e7e9      	b.n	800b1d6 <_fwalk_reent+0x12>
	...

0800b204 <_localeconv_r>:
 800b204:	4800      	ldr	r0, [pc, #0]	; (800b208 <_localeconv_r+0x4>)
 800b206:	4770      	bx	lr
 800b208:	20000254 	.word	0x20000254

0800b20c <__retarget_lock_init_recursive>:
 800b20c:	4770      	bx	lr

0800b20e <__retarget_lock_acquire_recursive>:
 800b20e:	4770      	bx	lr

0800b210 <__retarget_lock_release_recursive>:
 800b210:	4770      	bx	lr

0800b212 <__swhatbuf_r>:
 800b212:	b570      	push	{r4, r5, r6, lr}
 800b214:	460e      	mov	r6, r1
 800b216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b21a:	2900      	cmp	r1, #0
 800b21c:	b096      	sub	sp, #88	; 0x58
 800b21e:	4614      	mov	r4, r2
 800b220:	461d      	mov	r5, r3
 800b222:	da08      	bge.n	800b236 <__swhatbuf_r+0x24>
 800b224:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b228:	2200      	movs	r2, #0
 800b22a:	602a      	str	r2, [r5, #0]
 800b22c:	061a      	lsls	r2, r3, #24
 800b22e:	d410      	bmi.n	800b252 <__swhatbuf_r+0x40>
 800b230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b234:	e00e      	b.n	800b254 <__swhatbuf_r+0x42>
 800b236:	466a      	mov	r2, sp
 800b238:	f000 fee0 	bl	800bffc <_fstat_r>
 800b23c:	2800      	cmp	r0, #0
 800b23e:	dbf1      	blt.n	800b224 <__swhatbuf_r+0x12>
 800b240:	9a01      	ldr	r2, [sp, #4]
 800b242:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b246:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b24a:	425a      	negs	r2, r3
 800b24c:	415a      	adcs	r2, r3
 800b24e:	602a      	str	r2, [r5, #0]
 800b250:	e7ee      	b.n	800b230 <__swhatbuf_r+0x1e>
 800b252:	2340      	movs	r3, #64	; 0x40
 800b254:	2000      	movs	r0, #0
 800b256:	6023      	str	r3, [r4, #0]
 800b258:	b016      	add	sp, #88	; 0x58
 800b25a:	bd70      	pop	{r4, r5, r6, pc}

0800b25c <__smakebuf_r>:
 800b25c:	898b      	ldrh	r3, [r1, #12]
 800b25e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b260:	079d      	lsls	r5, r3, #30
 800b262:	4606      	mov	r6, r0
 800b264:	460c      	mov	r4, r1
 800b266:	d507      	bpl.n	800b278 <__smakebuf_r+0x1c>
 800b268:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b26c:	6023      	str	r3, [r4, #0]
 800b26e:	6123      	str	r3, [r4, #16]
 800b270:	2301      	movs	r3, #1
 800b272:	6163      	str	r3, [r4, #20]
 800b274:	b002      	add	sp, #8
 800b276:	bd70      	pop	{r4, r5, r6, pc}
 800b278:	ab01      	add	r3, sp, #4
 800b27a:	466a      	mov	r2, sp
 800b27c:	f7ff ffc9 	bl	800b212 <__swhatbuf_r>
 800b280:	9900      	ldr	r1, [sp, #0]
 800b282:	4605      	mov	r5, r0
 800b284:	4630      	mov	r0, r6
 800b286:	f000 fc45 	bl	800bb14 <_malloc_r>
 800b28a:	b948      	cbnz	r0, 800b2a0 <__smakebuf_r+0x44>
 800b28c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b290:	059a      	lsls	r2, r3, #22
 800b292:	d4ef      	bmi.n	800b274 <__smakebuf_r+0x18>
 800b294:	f023 0303 	bic.w	r3, r3, #3
 800b298:	f043 0302 	orr.w	r3, r3, #2
 800b29c:	81a3      	strh	r3, [r4, #12]
 800b29e:	e7e3      	b.n	800b268 <__smakebuf_r+0xc>
 800b2a0:	4b0d      	ldr	r3, [pc, #52]	; (800b2d8 <__smakebuf_r+0x7c>)
 800b2a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800b2a4:	89a3      	ldrh	r3, [r4, #12]
 800b2a6:	6020      	str	r0, [r4, #0]
 800b2a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2ac:	81a3      	strh	r3, [r4, #12]
 800b2ae:	9b00      	ldr	r3, [sp, #0]
 800b2b0:	6163      	str	r3, [r4, #20]
 800b2b2:	9b01      	ldr	r3, [sp, #4]
 800b2b4:	6120      	str	r0, [r4, #16]
 800b2b6:	b15b      	cbz	r3, 800b2d0 <__smakebuf_r+0x74>
 800b2b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2bc:	4630      	mov	r0, r6
 800b2be:	f000 feaf 	bl	800c020 <_isatty_r>
 800b2c2:	b128      	cbz	r0, 800b2d0 <__smakebuf_r+0x74>
 800b2c4:	89a3      	ldrh	r3, [r4, #12]
 800b2c6:	f023 0303 	bic.w	r3, r3, #3
 800b2ca:	f043 0301 	orr.w	r3, r3, #1
 800b2ce:	81a3      	strh	r3, [r4, #12]
 800b2d0:	89a0      	ldrh	r0, [r4, #12]
 800b2d2:	4305      	orrs	r5, r0
 800b2d4:	81a5      	strh	r5, [r4, #12]
 800b2d6:	e7cd      	b.n	800b274 <__smakebuf_r+0x18>
 800b2d8:	0800b061 	.word	0x0800b061

0800b2dc <malloc>:
 800b2dc:	4b02      	ldr	r3, [pc, #8]	; (800b2e8 <malloc+0xc>)
 800b2de:	4601      	mov	r1, r0
 800b2e0:	6818      	ldr	r0, [r3, #0]
 800b2e2:	f000 bc17 	b.w	800bb14 <_malloc_r>
 800b2e6:	bf00      	nop
 800b2e8:	20000100 	.word	0x20000100

0800b2ec <memcpy>:
 800b2ec:	440a      	add	r2, r1
 800b2ee:	4291      	cmp	r1, r2
 800b2f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b2f4:	d100      	bne.n	800b2f8 <memcpy+0xc>
 800b2f6:	4770      	bx	lr
 800b2f8:	b510      	push	{r4, lr}
 800b2fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b302:	4291      	cmp	r1, r2
 800b304:	d1f9      	bne.n	800b2fa <memcpy+0xe>
 800b306:	bd10      	pop	{r4, pc}

0800b308 <_Balloc>:
 800b308:	b570      	push	{r4, r5, r6, lr}
 800b30a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b30c:	4604      	mov	r4, r0
 800b30e:	460d      	mov	r5, r1
 800b310:	b976      	cbnz	r6, 800b330 <_Balloc+0x28>
 800b312:	2010      	movs	r0, #16
 800b314:	f7ff ffe2 	bl	800b2dc <malloc>
 800b318:	4602      	mov	r2, r0
 800b31a:	6260      	str	r0, [r4, #36]	; 0x24
 800b31c:	b920      	cbnz	r0, 800b328 <_Balloc+0x20>
 800b31e:	4b18      	ldr	r3, [pc, #96]	; (800b380 <_Balloc+0x78>)
 800b320:	4818      	ldr	r0, [pc, #96]	; (800b384 <_Balloc+0x7c>)
 800b322:	2166      	movs	r1, #102	; 0x66
 800b324:	f000 fe2a 	bl	800bf7c <__assert_func>
 800b328:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b32c:	6006      	str	r6, [r0, #0]
 800b32e:	60c6      	str	r6, [r0, #12]
 800b330:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b332:	68f3      	ldr	r3, [r6, #12]
 800b334:	b183      	cbz	r3, 800b358 <_Balloc+0x50>
 800b336:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b338:	68db      	ldr	r3, [r3, #12]
 800b33a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b33e:	b9b8      	cbnz	r0, 800b370 <_Balloc+0x68>
 800b340:	2101      	movs	r1, #1
 800b342:	fa01 f605 	lsl.w	r6, r1, r5
 800b346:	1d72      	adds	r2, r6, #5
 800b348:	0092      	lsls	r2, r2, #2
 800b34a:	4620      	mov	r0, r4
 800b34c:	f000 fb60 	bl	800ba10 <_calloc_r>
 800b350:	b160      	cbz	r0, 800b36c <_Balloc+0x64>
 800b352:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b356:	e00e      	b.n	800b376 <_Balloc+0x6e>
 800b358:	2221      	movs	r2, #33	; 0x21
 800b35a:	2104      	movs	r1, #4
 800b35c:	4620      	mov	r0, r4
 800b35e:	f000 fb57 	bl	800ba10 <_calloc_r>
 800b362:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b364:	60f0      	str	r0, [r6, #12]
 800b366:	68db      	ldr	r3, [r3, #12]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d1e4      	bne.n	800b336 <_Balloc+0x2e>
 800b36c:	2000      	movs	r0, #0
 800b36e:	bd70      	pop	{r4, r5, r6, pc}
 800b370:	6802      	ldr	r2, [r0, #0]
 800b372:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b376:	2300      	movs	r3, #0
 800b378:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b37c:	e7f7      	b.n	800b36e <_Balloc+0x66>
 800b37e:	bf00      	nop
 800b380:	0800cfb5 	.word	0x0800cfb5
 800b384:	0800d098 	.word	0x0800d098

0800b388 <_Bfree>:
 800b388:	b570      	push	{r4, r5, r6, lr}
 800b38a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b38c:	4605      	mov	r5, r0
 800b38e:	460c      	mov	r4, r1
 800b390:	b976      	cbnz	r6, 800b3b0 <_Bfree+0x28>
 800b392:	2010      	movs	r0, #16
 800b394:	f7ff ffa2 	bl	800b2dc <malloc>
 800b398:	4602      	mov	r2, r0
 800b39a:	6268      	str	r0, [r5, #36]	; 0x24
 800b39c:	b920      	cbnz	r0, 800b3a8 <_Bfree+0x20>
 800b39e:	4b09      	ldr	r3, [pc, #36]	; (800b3c4 <_Bfree+0x3c>)
 800b3a0:	4809      	ldr	r0, [pc, #36]	; (800b3c8 <_Bfree+0x40>)
 800b3a2:	218a      	movs	r1, #138	; 0x8a
 800b3a4:	f000 fdea 	bl	800bf7c <__assert_func>
 800b3a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b3ac:	6006      	str	r6, [r0, #0]
 800b3ae:	60c6      	str	r6, [r0, #12]
 800b3b0:	b13c      	cbz	r4, 800b3c2 <_Bfree+0x3a>
 800b3b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b3b4:	6862      	ldr	r2, [r4, #4]
 800b3b6:	68db      	ldr	r3, [r3, #12]
 800b3b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b3bc:	6021      	str	r1, [r4, #0]
 800b3be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b3c2:	bd70      	pop	{r4, r5, r6, pc}
 800b3c4:	0800cfb5 	.word	0x0800cfb5
 800b3c8:	0800d098 	.word	0x0800d098

0800b3cc <__multadd>:
 800b3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3d0:	690d      	ldr	r5, [r1, #16]
 800b3d2:	4607      	mov	r7, r0
 800b3d4:	460c      	mov	r4, r1
 800b3d6:	461e      	mov	r6, r3
 800b3d8:	f101 0c14 	add.w	ip, r1, #20
 800b3dc:	2000      	movs	r0, #0
 800b3de:	f8dc 3000 	ldr.w	r3, [ip]
 800b3e2:	b299      	uxth	r1, r3
 800b3e4:	fb02 6101 	mla	r1, r2, r1, r6
 800b3e8:	0c1e      	lsrs	r6, r3, #16
 800b3ea:	0c0b      	lsrs	r3, r1, #16
 800b3ec:	fb02 3306 	mla	r3, r2, r6, r3
 800b3f0:	b289      	uxth	r1, r1
 800b3f2:	3001      	adds	r0, #1
 800b3f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b3f8:	4285      	cmp	r5, r0
 800b3fa:	f84c 1b04 	str.w	r1, [ip], #4
 800b3fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b402:	dcec      	bgt.n	800b3de <__multadd+0x12>
 800b404:	b30e      	cbz	r6, 800b44a <__multadd+0x7e>
 800b406:	68a3      	ldr	r3, [r4, #8]
 800b408:	42ab      	cmp	r3, r5
 800b40a:	dc19      	bgt.n	800b440 <__multadd+0x74>
 800b40c:	6861      	ldr	r1, [r4, #4]
 800b40e:	4638      	mov	r0, r7
 800b410:	3101      	adds	r1, #1
 800b412:	f7ff ff79 	bl	800b308 <_Balloc>
 800b416:	4680      	mov	r8, r0
 800b418:	b928      	cbnz	r0, 800b426 <__multadd+0x5a>
 800b41a:	4602      	mov	r2, r0
 800b41c:	4b0c      	ldr	r3, [pc, #48]	; (800b450 <__multadd+0x84>)
 800b41e:	480d      	ldr	r0, [pc, #52]	; (800b454 <__multadd+0x88>)
 800b420:	21b5      	movs	r1, #181	; 0xb5
 800b422:	f000 fdab 	bl	800bf7c <__assert_func>
 800b426:	6922      	ldr	r2, [r4, #16]
 800b428:	3202      	adds	r2, #2
 800b42a:	f104 010c 	add.w	r1, r4, #12
 800b42e:	0092      	lsls	r2, r2, #2
 800b430:	300c      	adds	r0, #12
 800b432:	f7ff ff5b 	bl	800b2ec <memcpy>
 800b436:	4621      	mov	r1, r4
 800b438:	4638      	mov	r0, r7
 800b43a:	f7ff ffa5 	bl	800b388 <_Bfree>
 800b43e:	4644      	mov	r4, r8
 800b440:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b444:	3501      	adds	r5, #1
 800b446:	615e      	str	r6, [r3, #20]
 800b448:	6125      	str	r5, [r4, #16]
 800b44a:	4620      	mov	r0, r4
 800b44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b450:	0800d027 	.word	0x0800d027
 800b454:	0800d098 	.word	0x0800d098

0800b458 <__hi0bits>:
 800b458:	0c03      	lsrs	r3, r0, #16
 800b45a:	041b      	lsls	r3, r3, #16
 800b45c:	b9d3      	cbnz	r3, 800b494 <__hi0bits+0x3c>
 800b45e:	0400      	lsls	r0, r0, #16
 800b460:	2310      	movs	r3, #16
 800b462:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b466:	bf04      	itt	eq
 800b468:	0200      	lsleq	r0, r0, #8
 800b46a:	3308      	addeq	r3, #8
 800b46c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b470:	bf04      	itt	eq
 800b472:	0100      	lsleq	r0, r0, #4
 800b474:	3304      	addeq	r3, #4
 800b476:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b47a:	bf04      	itt	eq
 800b47c:	0080      	lsleq	r0, r0, #2
 800b47e:	3302      	addeq	r3, #2
 800b480:	2800      	cmp	r0, #0
 800b482:	db05      	blt.n	800b490 <__hi0bits+0x38>
 800b484:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b488:	f103 0301 	add.w	r3, r3, #1
 800b48c:	bf08      	it	eq
 800b48e:	2320      	moveq	r3, #32
 800b490:	4618      	mov	r0, r3
 800b492:	4770      	bx	lr
 800b494:	2300      	movs	r3, #0
 800b496:	e7e4      	b.n	800b462 <__hi0bits+0xa>

0800b498 <__lo0bits>:
 800b498:	6803      	ldr	r3, [r0, #0]
 800b49a:	f013 0207 	ands.w	r2, r3, #7
 800b49e:	4601      	mov	r1, r0
 800b4a0:	d00b      	beq.n	800b4ba <__lo0bits+0x22>
 800b4a2:	07da      	lsls	r2, r3, #31
 800b4a4:	d423      	bmi.n	800b4ee <__lo0bits+0x56>
 800b4a6:	0798      	lsls	r0, r3, #30
 800b4a8:	bf49      	itett	mi
 800b4aa:	085b      	lsrmi	r3, r3, #1
 800b4ac:	089b      	lsrpl	r3, r3, #2
 800b4ae:	2001      	movmi	r0, #1
 800b4b0:	600b      	strmi	r3, [r1, #0]
 800b4b2:	bf5c      	itt	pl
 800b4b4:	600b      	strpl	r3, [r1, #0]
 800b4b6:	2002      	movpl	r0, #2
 800b4b8:	4770      	bx	lr
 800b4ba:	b298      	uxth	r0, r3
 800b4bc:	b9a8      	cbnz	r0, 800b4ea <__lo0bits+0x52>
 800b4be:	0c1b      	lsrs	r3, r3, #16
 800b4c0:	2010      	movs	r0, #16
 800b4c2:	b2da      	uxtb	r2, r3
 800b4c4:	b90a      	cbnz	r2, 800b4ca <__lo0bits+0x32>
 800b4c6:	3008      	adds	r0, #8
 800b4c8:	0a1b      	lsrs	r3, r3, #8
 800b4ca:	071a      	lsls	r2, r3, #28
 800b4cc:	bf04      	itt	eq
 800b4ce:	091b      	lsreq	r3, r3, #4
 800b4d0:	3004      	addeq	r0, #4
 800b4d2:	079a      	lsls	r2, r3, #30
 800b4d4:	bf04      	itt	eq
 800b4d6:	089b      	lsreq	r3, r3, #2
 800b4d8:	3002      	addeq	r0, #2
 800b4da:	07da      	lsls	r2, r3, #31
 800b4dc:	d403      	bmi.n	800b4e6 <__lo0bits+0x4e>
 800b4de:	085b      	lsrs	r3, r3, #1
 800b4e0:	f100 0001 	add.w	r0, r0, #1
 800b4e4:	d005      	beq.n	800b4f2 <__lo0bits+0x5a>
 800b4e6:	600b      	str	r3, [r1, #0]
 800b4e8:	4770      	bx	lr
 800b4ea:	4610      	mov	r0, r2
 800b4ec:	e7e9      	b.n	800b4c2 <__lo0bits+0x2a>
 800b4ee:	2000      	movs	r0, #0
 800b4f0:	4770      	bx	lr
 800b4f2:	2020      	movs	r0, #32
 800b4f4:	4770      	bx	lr
	...

0800b4f8 <__i2b>:
 800b4f8:	b510      	push	{r4, lr}
 800b4fa:	460c      	mov	r4, r1
 800b4fc:	2101      	movs	r1, #1
 800b4fe:	f7ff ff03 	bl	800b308 <_Balloc>
 800b502:	4602      	mov	r2, r0
 800b504:	b928      	cbnz	r0, 800b512 <__i2b+0x1a>
 800b506:	4b05      	ldr	r3, [pc, #20]	; (800b51c <__i2b+0x24>)
 800b508:	4805      	ldr	r0, [pc, #20]	; (800b520 <__i2b+0x28>)
 800b50a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b50e:	f000 fd35 	bl	800bf7c <__assert_func>
 800b512:	2301      	movs	r3, #1
 800b514:	6144      	str	r4, [r0, #20]
 800b516:	6103      	str	r3, [r0, #16]
 800b518:	bd10      	pop	{r4, pc}
 800b51a:	bf00      	nop
 800b51c:	0800d027 	.word	0x0800d027
 800b520:	0800d098 	.word	0x0800d098

0800b524 <__multiply>:
 800b524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b528:	4691      	mov	r9, r2
 800b52a:	690a      	ldr	r2, [r1, #16]
 800b52c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b530:	429a      	cmp	r2, r3
 800b532:	bfb8      	it	lt
 800b534:	460b      	movlt	r3, r1
 800b536:	460c      	mov	r4, r1
 800b538:	bfbc      	itt	lt
 800b53a:	464c      	movlt	r4, r9
 800b53c:	4699      	movlt	r9, r3
 800b53e:	6927      	ldr	r7, [r4, #16]
 800b540:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b544:	68a3      	ldr	r3, [r4, #8]
 800b546:	6861      	ldr	r1, [r4, #4]
 800b548:	eb07 060a 	add.w	r6, r7, sl
 800b54c:	42b3      	cmp	r3, r6
 800b54e:	b085      	sub	sp, #20
 800b550:	bfb8      	it	lt
 800b552:	3101      	addlt	r1, #1
 800b554:	f7ff fed8 	bl	800b308 <_Balloc>
 800b558:	b930      	cbnz	r0, 800b568 <__multiply+0x44>
 800b55a:	4602      	mov	r2, r0
 800b55c:	4b44      	ldr	r3, [pc, #272]	; (800b670 <__multiply+0x14c>)
 800b55e:	4845      	ldr	r0, [pc, #276]	; (800b674 <__multiply+0x150>)
 800b560:	f240 115d 	movw	r1, #349	; 0x15d
 800b564:	f000 fd0a 	bl	800bf7c <__assert_func>
 800b568:	f100 0514 	add.w	r5, r0, #20
 800b56c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b570:	462b      	mov	r3, r5
 800b572:	2200      	movs	r2, #0
 800b574:	4543      	cmp	r3, r8
 800b576:	d321      	bcc.n	800b5bc <__multiply+0x98>
 800b578:	f104 0314 	add.w	r3, r4, #20
 800b57c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b580:	f109 0314 	add.w	r3, r9, #20
 800b584:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b588:	9202      	str	r2, [sp, #8]
 800b58a:	1b3a      	subs	r2, r7, r4
 800b58c:	3a15      	subs	r2, #21
 800b58e:	f022 0203 	bic.w	r2, r2, #3
 800b592:	3204      	adds	r2, #4
 800b594:	f104 0115 	add.w	r1, r4, #21
 800b598:	428f      	cmp	r7, r1
 800b59a:	bf38      	it	cc
 800b59c:	2204      	movcc	r2, #4
 800b59e:	9201      	str	r2, [sp, #4]
 800b5a0:	9a02      	ldr	r2, [sp, #8]
 800b5a2:	9303      	str	r3, [sp, #12]
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d80c      	bhi.n	800b5c2 <__multiply+0x9e>
 800b5a8:	2e00      	cmp	r6, #0
 800b5aa:	dd03      	ble.n	800b5b4 <__multiply+0x90>
 800b5ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d05a      	beq.n	800b66a <__multiply+0x146>
 800b5b4:	6106      	str	r6, [r0, #16]
 800b5b6:	b005      	add	sp, #20
 800b5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5bc:	f843 2b04 	str.w	r2, [r3], #4
 800b5c0:	e7d8      	b.n	800b574 <__multiply+0x50>
 800b5c2:	f8b3 a000 	ldrh.w	sl, [r3]
 800b5c6:	f1ba 0f00 	cmp.w	sl, #0
 800b5ca:	d024      	beq.n	800b616 <__multiply+0xf2>
 800b5cc:	f104 0e14 	add.w	lr, r4, #20
 800b5d0:	46a9      	mov	r9, r5
 800b5d2:	f04f 0c00 	mov.w	ip, #0
 800b5d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b5da:	f8d9 1000 	ldr.w	r1, [r9]
 800b5de:	fa1f fb82 	uxth.w	fp, r2
 800b5e2:	b289      	uxth	r1, r1
 800b5e4:	fb0a 110b 	mla	r1, sl, fp, r1
 800b5e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b5ec:	f8d9 2000 	ldr.w	r2, [r9]
 800b5f0:	4461      	add	r1, ip
 800b5f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b5f6:	fb0a c20b 	mla	r2, sl, fp, ip
 800b5fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b5fe:	b289      	uxth	r1, r1
 800b600:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b604:	4577      	cmp	r7, lr
 800b606:	f849 1b04 	str.w	r1, [r9], #4
 800b60a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b60e:	d8e2      	bhi.n	800b5d6 <__multiply+0xb2>
 800b610:	9a01      	ldr	r2, [sp, #4]
 800b612:	f845 c002 	str.w	ip, [r5, r2]
 800b616:	9a03      	ldr	r2, [sp, #12]
 800b618:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b61c:	3304      	adds	r3, #4
 800b61e:	f1b9 0f00 	cmp.w	r9, #0
 800b622:	d020      	beq.n	800b666 <__multiply+0x142>
 800b624:	6829      	ldr	r1, [r5, #0]
 800b626:	f104 0c14 	add.w	ip, r4, #20
 800b62a:	46ae      	mov	lr, r5
 800b62c:	f04f 0a00 	mov.w	sl, #0
 800b630:	f8bc b000 	ldrh.w	fp, [ip]
 800b634:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b638:	fb09 220b 	mla	r2, r9, fp, r2
 800b63c:	4492      	add	sl, r2
 800b63e:	b289      	uxth	r1, r1
 800b640:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b644:	f84e 1b04 	str.w	r1, [lr], #4
 800b648:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b64c:	f8be 1000 	ldrh.w	r1, [lr]
 800b650:	0c12      	lsrs	r2, r2, #16
 800b652:	fb09 1102 	mla	r1, r9, r2, r1
 800b656:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b65a:	4567      	cmp	r7, ip
 800b65c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b660:	d8e6      	bhi.n	800b630 <__multiply+0x10c>
 800b662:	9a01      	ldr	r2, [sp, #4]
 800b664:	50a9      	str	r1, [r5, r2]
 800b666:	3504      	adds	r5, #4
 800b668:	e79a      	b.n	800b5a0 <__multiply+0x7c>
 800b66a:	3e01      	subs	r6, #1
 800b66c:	e79c      	b.n	800b5a8 <__multiply+0x84>
 800b66e:	bf00      	nop
 800b670:	0800d027 	.word	0x0800d027
 800b674:	0800d098 	.word	0x0800d098

0800b678 <__pow5mult>:
 800b678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b67c:	4615      	mov	r5, r2
 800b67e:	f012 0203 	ands.w	r2, r2, #3
 800b682:	4606      	mov	r6, r0
 800b684:	460f      	mov	r7, r1
 800b686:	d007      	beq.n	800b698 <__pow5mult+0x20>
 800b688:	4c25      	ldr	r4, [pc, #148]	; (800b720 <__pow5mult+0xa8>)
 800b68a:	3a01      	subs	r2, #1
 800b68c:	2300      	movs	r3, #0
 800b68e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b692:	f7ff fe9b 	bl	800b3cc <__multadd>
 800b696:	4607      	mov	r7, r0
 800b698:	10ad      	asrs	r5, r5, #2
 800b69a:	d03d      	beq.n	800b718 <__pow5mult+0xa0>
 800b69c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b69e:	b97c      	cbnz	r4, 800b6c0 <__pow5mult+0x48>
 800b6a0:	2010      	movs	r0, #16
 800b6a2:	f7ff fe1b 	bl	800b2dc <malloc>
 800b6a6:	4602      	mov	r2, r0
 800b6a8:	6270      	str	r0, [r6, #36]	; 0x24
 800b6aa:	b928      	cbnz	r0, 800b6b8 <__pow5mult+0x40>
 800b6ac:	4b1d      	ldr	r3, [pc, #116]	; (800b724 <__pow5mult+0xac>)
 800b6ae:	481e      	ldr	r0, [pc, #120]	; (800b728 <__pow5mult+0xb0>)
 800b6b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b6b4:	f000 fc62 	bl	800bf7c <__assert_func>
 800b6b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b6bc:	6004      	str	r4, [r0, #0]
 800b6be:	60c4      	str	r4, [r0, #12]
 800b6c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b6c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b6c8:	b94c      	cbnz	r4, 800b6de <__pow5mult+0x66>
 800b6ca:	f240 2171 	movw	r1, #625	; 0x271
 800b6ce:	4630      	mov	r0, r6
 800b6d0:	f7ff ff12 	bl	800b4f8 <__i2b>
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b6da:	4604      	mov	r4, r0
 800b6dc:	6003      	str	r3, [r0, #0]
 800b6de:	f04f 0900 	mov.w	r9, #0
 800b6e2:	07eb      	lsls	r3, r5, #31
 800b6e4:	d50a      	bpl.n	800b6fc <__pow5mult+0x84>
 800b6e6:	4639      	mov	r1, r7
 800b6e8:	4622      	mov	r2, r4
 800b6ea:	4630      	mov	r0, r6
 800b6ec:	f7ff ff1a 	bl	800b524 <__multiply>
 800b6f0:	4639      	mov	r1, r7
 800b6f2:	4680      	mov	r8, r0
 800b6f4:	4630      	mov	r0, r6
 800b6f6:	f7ff fe47 	bl	800b388 <_Bfree>
 800b6fa:	4647      	mov	r7, r8
 800b6fc:	106d      	asrs	r5, r5, #1
 800b6fe:	d00b      	beq.n	800b718 <__pow5mult+0xa0>
 800b700:	6820      	ldr	r0, [r4, #0]
 800b702:	b938      	cbnz	r0, 800b714 <__pow5mult+0x9c>
 800b704:	4622      	mov	r2, r4
 800b706:	4621      	mov	r1, r4
 800b708:	4630      	mov	r0, r6
 800b70a:	f7ff ff0b 	bl	800b524 <__multiply>
 800b70e:	6020      	str	r0, [r4, #0]
 800b710:	f8c0 9000 	str.w	r9, [r0]
 800b714:	4604      	mov	r4, r0
 800b716:	e7e4      	b.n	800b6e2 <__pow5mult+0x6a>
 800b718:	4638      	mov	r0, r7
 800b71a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b71e:	bf00      	nop
 800b720:	0800d1e8 	.word	0x0800d1e8
 800b724:	0800cfb5 	.word	0x0800cfb5
 800b728:	0800d098 	.word	0x0800d098

0800b72c <__lshift>:
 800b72c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b730:	460c      	mov	r4, r1
 800b732:	6849      	ldr	r1, [r1, #4]
 800b734:	6923      	ldr	r3, [r4, #16]
 800b736:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b73a:	68a3      	ldr	r3, [r4, #8]
 800b73c:	4607      	mov	r7, r0
 800b73e:	4691      	mov	r9, r2
 800b740:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b744:	f108 0601 	add.w	r6, r8, #1
 800b748:	42b3      	cmp	r3, r6
 800b74a:	db0b      	blt.n	800b764 <__lshift+0x38>
 800b74c:	4638      	mov	r0, r7
 800b74e:	f7ff fddb 	bl	800b308 <_Balloc>
 800b752:	4605      	mov	r5, r0
 800b754:	b948      	cbnz	r0, 800b76a <__lshift+0x3e>
 800b756:	4602      	mov	r2, r0
 800b758:	4b2a      	ldr	r3, [pc, #168]	; (800b804 <__lshift+0xd8>)
 800b75a:	482b      	ldr	r0, [pc, #172]	; (800b808 <__lshift+0xdc>)
 800b75c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b760:	f000 fc0c 	bl	800bf7c <__assert_func>
 800b764:	3101      	adds	r1, #1
 800b766:	005b      	lsls	r3, r3, #1
 800b768:	e7ee      	b.n	800b748 <__lshift+0x1c>
 800b76a:	2300      	movs	r3, #0
 800b76c:	f100 0114 	add.w	r1, r0, #20
 800b770:	f100 0210 	add.w	r2, r0, #16
 800b774:	4618      	mov	r0, r3
 800b776:	4553      	cmp	r3, sl
 800b778:	db37      	blt.n	800b7ea <__lshift+0xbe>
 800b77a:	6920      	ldr	r0, [r4, #16]
 800b77c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b780:	f104 0314 	add.w	r3, r4, #20
 800b784:	f019 091f 	ands.w	r9, r9, #31
 800b788:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b78c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b790:	d02f      	beq.n	800b7f2 <__lshift+0xc6>
 800b792:	f1c9 0e20 	rsb	lr, r9, #32
 800b796:	468a      	mov	sl, r1
 800b798:	f04f 0c00 	mov.w	ip, #0
 800b79c:	681a      	ldr	r2, [r3, #0]
 800b79e:	fa02 f209 	lsl.w	r2, r2, r9
 800b7a2:	ea42 020c 	orr.w	r2, r2, ip
 800b7a6:	f84a 2b04 	str.w	r2, [sl], #4
 800b7aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7ae:	4298      	cmp	r0, r3
 800b7b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b7b4:	d8f2      	bhi.n	800b79c <__lshift+0x70>
 800b7b6:	1b03      	subs	r3, r0, r4
 800b7b8:	3b15      	subs	r3, #21
 800b7ba:	f023 0303 	bic.w	r3, r3, #3
 800b7be:	3304      	adds	r3, #4
 800b7c0:	f104 0215 	add.w	r2, r4, #21
 800b7c4:	4290      	cmp	r0, r2
 800b7c6:	bf38      	it	cc
 800b7c8:	2304      	movcc	r3, #4
 800b7ca:	f841 c003 	str.w	ip, [r1, r3]
 800b7ce:	f1bc 0f00 	cmp.w	ip, #0
 800b7d2:	d001      	beq.n	800b7d8 <__lshift+0xac>
 800b7d4:	f108 0602 	add.w	r6, r8, #2
 800b7d8:	3e01      	subs	r6, #1
 800b7da:	4638      	mov	r0, r7
 800b7dc:	612e      	str	r6, [r5, #16]
 800b7de:	4621      	mov	r1, r4
 800b7e0:	f7ff fdd2 	bl	800b388 <_Bfree>
 800b7e4:	4628      	mov	r0, r5
 800b7e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	e7c1      	b.n	800b776 <__lshift+0x4a>
 800b7f2:	3904      	subs	r1, #4
 800b7f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b7fc:	4298      	cmp	r0, r3
 800b7fe:	d8f9      	bhi.n	800b7f4 <__lshift+0xc8>
 800b800:	e7ea      	b.n	800b7d8 <__lshift+0xac>
 800b802:	bf00      	nop
 800b804:	0800d027 	.word	0x0800d027
 800b808:	0800d098 	.word	0x0800d098

0800b80c <__mcmp>:
 800b80c:	b530      	push	{r4, r5, lr}
 800b80e:	6902      	ldr	r2, [r0, #16]
 800b810:	690c      	ldr	r4, [r1, #16]
 800b812:	1b12      	subs	r2, r2, r4
 800b814:	d10e      	bne.n	800b834 <__mcmp+0x28>
 800b816:	f100 0314 	add.w	r3, r0, #20
 800b81a:	3114      	adds	r1, #20
 800b81c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b820:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b824:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b828:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b82c:	42a5      	cmp	r5, r4
 800b82e:	d003      	beq.n	800b838 <__mcmp+0x2c>
 800b830:	d305      	bcc.n	800b83e <__mcmp+0x32>
 800b832:	2201      	movs	r2, #1
 800b834:	4610      	mov	r0, r2
 800b836:	bd30      	pop	{r4, r5, pc}
 800b838:	4283      	cmp	r3, r0
 800b83a:	d3f3      	bcc.n	800b824 <__mcmp+0x18>
 800b83c:	e7fa      	b.n	800b834 <__mcmp+0x28>
 800b83e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b842:	e7f7      	b.n	800b834 <__mcmp+0x28>

0800b844 <__mdiff>:
 800b844:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b848:	460c      	mov	r4, r1
 800b84a:	4606      	mov	r6, r0
 800b84c:	4611      	mov	r1, r2
 800b84e:	4620      	mov	r0, r4
 800b850:	4690      	mov	r8, r2
 800b852:	f7ff ffdb 	bl	800b80c <__mcmp>
 800b856:	1e05      	subs	r5, r0, #0
 800b858:	d110      	bne.n	800b87c <__mdiff+0x38>
 800b85a:	4629      	mov	r1, r5
 800b85c:	4630      	mov	r0, r6
 800b85e:	f7ff fd53 	bl	800b308 <_Balloc>
 800b862:	b930      	cbnz	r0, 800b872 <__mdiff+0x2e>
 800b864:	4b3a      	ldr	r3, [pc, #232]	; (800b950 <__mdiff+0x10c>)
 800b866:	4602      	mov	r2, r0
 800b868:	f240 2132 	movw	r1, #562	; 0x232
 800b86c:	4839      	ldr	r0, [pc, #228]	; (800b954 <__mdiff+0x110>)
 800b86e:	f000 fb85 	bl	800bf7c <__assert_func>
 800b872:	2301      	movs	r3, #1
 800b874:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b878:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b87c:	bfa4      	itt	ge
 800b87e:	4643      	movge	r3, r8
 800b880:	46a0      	movge	r8, r4
 800b882:	4630      	mov	r0, r6
 800b884:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b888:	bfa6      	itte	ge
 800b88a:	461c      	movge	r4, r3
 800b88c:	2500      	movge	r5, #0
 800b88e:	2501      	movlt	r5, #1
 800b890:	f7ff fd3a 	bl	800b308 <_Balloc>
 800b894:	b920      	cbnz	r0, 800b8a0 <__mdiff+0x5c>
 800b896:	4b2e      	ldr	r3, [pc, #184]	; (800b950 <__mdiff+0x10c>)
 800b898:	4602      	mov	r2, r0
 800b89a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b89e:	e7e5      	b.n	800b86c <__mdiff+0x28>
 800b8a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b8a4:	6926      	ldr	r6, [r4, #16]
 800b8a6:	60c5      	str	r5, [r0, #12]
 800b8a8:	f104 0914 	add.w	r9, r4, #20
 800b8ac:	f108 0514 	add.w	r5, r8, #20
 800b8b0:	f100 0e14 	add.w	lr, r0, #20
 800b8b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b8b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b8bc:	f108 0210 	add.w	r2, r8, #16
 800b8c0:	46f2      	mov	sl, lr
 800b8c2:	2100      	movs	r1, #0
 800b8c4:	f859 3b04 	ldr.w	r3, [r9], #4
 800b8c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b8cc:	fa1f f883 	uxth.w	r8, r3
 800b8d0:	fa11 f18b 	uxtah	r1, r1, fp
 800b8d4:	0c1b      	lsrs	r3, r3, #16
 800b8d6:	eba1 0808 	sub.w	r8, r1, r8
 800b8da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b8de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b8e2:	fa1f f888 	uxth.w	r8, r8
 800b8e6:	1419      	asrs	r1, r3, #16
 800b8e8:	454e      	cmp	r6, r9
 800b8ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b8ee:	f84a 3b04 	str.w	r3, [sl], #4
 800b8f2:	d8e7      	bhi.n	800b8c4 <__mdiff+0x80>
 800b8f4:	1b33      	subs	r3, r6, r4
 800b8f6:	3b15      	subs	r3, #21
 800b8f8:	f023 0303 	bic.w	r3, r3, #3
 800b8fc:	3304      	adds	r3, #4
 800b8fe:	3415      	adds	r4, #21
 800b900:	42a6      	cmp	r6, r4
 800b902:	bf38      	it	cc
 800b904:	2304      	movcc	r3, #4
 800b906:	441d      	add	r5, r3
 800b908:	4473      	add	r3, lr
 800b90a:	469e      	mov	lr, r3
 800b90c:	462e      	mov	r6, r5
 800b90e:	4566      	cmp	r6, ip
 800b910:	d30e      	bcc.n	800b930 <__mdiff+0xec>
 800b912:	f10c 0203 	add.w	r2, ip, #3
 800b916:	1b52      	subs	r2, r2, r5
 800b918:	f022 0203 	bic.w	r2, r2, #3
 800b91c:	3d03      	subs	r5, #3
 800b91e:	45ac      	cmp	ip, r5
 800b920:	bf38      	it	cc
 800b922:	2200      	movcc	r2, #0
 800b924:	441a      	add	r2, r3
 800b926:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b92a:	b17b      	cbz	r3, 800b94c <__mdiff+0x108>
 800b92c:	6107      	str	r7, [r0, #16]
 800b92e:	e7a3      	b.n	800b878 <__mdiff+0x34>
 800b930:	f856 8b04 	ldr.w	r8, [r6], #4
 800b934:	fa11 f288 	uxtah	r2, r1, r8
 800b938:	1414      	asrs	r4, r2, #16
 800b93a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b93e:	b292      	uxth	r2, r2
 800b940:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b944:	f84e 2b04 	str.w	r2, [lr], #4
 800b948:	1421      	asrs	r1, r4, #16
 800b94a:	e7e0      	b.n	800b90e <__mdiff+0xca>
 800b94c:	3f01      	subs	r7, #1
 800b94e:	e7ea      	b.n	800b926 <__mdiff+0xe2>
 800b950:	0800d027 	.word	0x0800d027
 800b954:	0800d098 	.word	0x0800d098

0800b958 <__d2b>:
 800b958:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b95c:	4689      	mov	r9, r1
 800b95e:	2101      	movs	r1, #1
 800b960:	ec57 6b10 	vmov	r6, r7, d0
 800b964:	4690      	mov	r8, r2
 800b966:	f7ff fccf 	bl	800b308 <_Balloc>
 800b96a:	4604      	mov	r4, r0
 800b96c:	b930      	cbnz	r0, 800b97c <__d2b+0x24>
 800b96e:	4602      	mov	r2, r0
 800b970:	4b25      	ldr	r3, [pc, #148]	; (800ba08 <__d2b+0xb0>)
 800b972:	4826      	ldr	r0, [pc, #152]	; (800ba0c <__d2b+0xb4>)
 800b974:	f240 310a 	movw	r1, #778	; 0x30a
 800b978:	f000 fb00 	bl	800bf7c <__assert_func>
 800b97c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b980:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b984:	bb35      	cbnz	r5, 800b9d4 <__d2b+0x7c>
 800b986:	2e00      	cmp	r6, #0
 800b988:	9301      	str	r3, [sp, #4]
 800b98a:	d028      	beq.n	800b9de <__d2b+0x86>
 800b98c:	4668      	mov	r0, sp
 800b98e:	9600      	str	r6, [sp, #0]
 800b990:	f7ff fd82 	bl	800b498 <__lo0bits>
 800b994:	9900      	ldr	r1, [sp, #0]
 800b996:	b300      	cbz	r0, 800b9da <__d2b+0x82>
 800b998:	9a01      	ldr	r2, [sp, #4]
 800b99a:	f1c0 0320 	rsb	r3, r0, #32
 800b99e:	fa02 f303 	lsl.w	r3, r2, r3
 800b9a2:	430b      	orrs	r3, r1
 800b9a4:	40c2      	lsrs	r2, r0
 800b9a6:	6163      	str	r3, [r4, #20]
 800b9a8:	9201      	str	r2, [sp, #4]
 800b9aa:	9b01      	ldr	r3, [sp, #4]
 800b9ac:	61a3      	str	r3, [r4, #24]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	bf14      	ite	ne
 800b9b2:	2202      	movne	r2, #2
 800b9b4:	2201      	moveq	r2, #1
 800b9b6:	6122      	str	r2, [r4, #16]
 800b9b8:	b1d5      	cbz	r5, 800b9f0 <__d2b+0x98>
 800b9ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b9be:	4405      	add	r5, r0
 800b9c0:	f8c9 5000 	str.w	r5, [r9]
 800b9c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b9c8:	f8c8 0000 	str.w	r0, [r8]
 800b9cc:	4620      	mov	r0, r4
 800b9ce:	b003      	add	sp, #12
 800b9d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b9d8:	e7d5      	b.n	800b986 <__d2b+0x2e>
 800b9da:	6161      	str	r1, [r4, #20]
 800b9dc:	e7e5      	b.n	800b9aa <__d2b+0x52>
 800b9de:	a801      	add	r0, sp, #4
 800b9e0:	f7ff fd5a 	bl	800b498 <__lo0bits>
 800b9e4:	9b01      	ldr	r3, [sp, #4]
 800b9e6:	6163      	str	r3, [r4, #20]
 800b9e8:	2201      	movs	r2, #1
 800b9ea:	6122      	str	r2, [r4, #16]
 800b9ec:	3020      	adds	r0, #32
 800b9ee:	e7e3      	b.n	800b9b8 <__d2b+0x60>
 800b9f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b9f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b9f8:	f8c9 0000 	str.w	r0, [r9]
 800b9fc:	6918      	ldr	r0, [r3, #16]
 800b9fe:	f7ff fd2b 	bl	800b458 <__hi0bits>
 800ba02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ba06:	e7df      	b.n	800b9c8 <__d2b+0x70>
 800ba08:	0800d027 	.word	0x0800d027
 800ba0c:	0800d098 	.word	0x0800d098

0800ba10 <_calloc_r>:
 800ba10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba12:	fba1 2402 	umull	r2, r4, r1, r2
 800ba16:	b94c      	cbnz	r4, 800ba2c <_calloc_r+0x1c>
 800ba18:	4611      	mov	r1, r2
 800ba1a:	9201      	str	r2, [sp, #4]
 800ba1c:	f000 f87a 	bl	800bb14 <_malloc_r>
 800ba20:	9a01      	ldr	r2, [sp, #4]
 800ba22:	4605      	mov	r5, r0
 800ba24:	b930      	cbnz	r0, 800ba34 <_calloc_r+0x24>
 800ba26:	4628      	mov	r0, r5
 800ba28:	b003      	add	sp, #12
 800ba2a:	bd30      	pop	{r4, r5, pc}
 800ba2c:	220c      	movs	r2, #12
 800ba2e:	6002      	str	r2, [r0, #0]
 800ba30:	2500      	movs	r5, #0
 800ba32:	e7f8      	b.n	800ba26 <_calloc_r+0x16>
 800ba34:	4621      	mov	r1, r4
 800ba36:	f7fd fdf1 	bl	800961c <memset>
 800ba3a:	e7f4      	b.n	800ba26 <_calloc_r+0x16>

0800ba3c <_free_r>:
 800ba3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba3e:	2900      	cmp	r1, #0
 800ba40:	d044      	beq.n	800bacc <_free_r+0x90>
 800ba42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba46:	9001      	str	r0, [sp, #4]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	f1a1 0404 	sub.w	r4, r1, #4
 800ba4e:	bfb8      	it	lt
 800ba50:	18e4      	addlt	r4, r4, r3
 800ba52:	f000 fb19 	bl	800c088 <__malloc_lock>
 800ba56:	4a1e      	ldr	r2, [pc, #120]	; (800bad0 <_free_r+0x94>)
 800ba58:	9801      	ldr	r0, [sp, #4]
 800ba5a:	6813      	ldr	r3, [r2, #0]
 800ba5c:	b933      	cbnz	r3, 800ba6c <_free_r+0x30>
 800ba5e:	6063      	str	r3, [r4, #4]
 800ba60:	6014      	str	r4, [r2, #0]
 800ba62:	b003      	add	sp, #12
 800ba64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba68:	f000 bb14 	b.w	800c094 <__malloc_unlock>
 800ba6c:	42a3      	cmp	r3, r4
 800ba6e:	d908      	bls.n	800ba82 <_free_r+0x46>
 800ba70:	6825      	ldr	r5, [r4, #0]
 800ba72:	1961      	adds	r1, r4, r5
 800ba74:	428b      	cmp	r3, r1
 800ba76:	bf01      	itttt	eq
 800ba78:	6819      	ldreq	r1, [r3, #0]
 800ba7a:	685b      	ldreq	r3, [r3, #4]
 800ba7c:	1949      	addeq	r1, r1, r5
 800ba7e:	6021      	streq	r1, [r4, #0]
 800ba80:	e7ed      	b.n	800ba5e <_free_r+0x22>
 800ba82:	461a      	mov	r2, r3
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	b10b      	cbz	r3, 800ba8c <_free_r+0x50>
 800ba88:	42a3      	cmp	r3, r4
 800ba8a:	d9fa      	bls.n	800ba82 <_free_r+0x46>
 800ba8c:	6811      	ldr	r1, [r2, #0]
 800ba8e:	1855      	adds	r5, r2, r1
 800ba90:	42a5      	cmp	r5, r4
 800ba92:	d10b      	bne.n	800baac <_free_r+0x70>
 800ba94:	6824      	ldr	r4, [r4, #0]
 800ba96:	4421      	add	r1, r4
 800ba98:	1854      	adds	r4, r2, r1
 800ba9a:	42a3      	cmp	r3, r4
 800ba9c:	6011      	str	r1, [r2, #0]
 800ba9e:	d1e0      	bne.n	800ba62 <_free_r+0x26>
 800baa0:	681c      	ldr	r4, [r3, #0]
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	6053      	str	r3, [r2, #4]
 800baa6:	4421      	add	r1, r4
 800baa8:	6011      	str	r1, [r2, #0]
 800baaa:	e7da      	b.n	800ba62 <_free_r+0x26>
 800baac:	d902      	bls.n	800bab4 <_free_r+0x78>
 800baae:	230c      	movs	r3, #12
 800bab0:	6003      	str	r3, [r0, #0]
 800bab2:	e7d6      	b.n	800ba62 <_free_r+0x26>
 800bab4:	6825      	ldr	r5, [r4, #0]
 800bab6:	1961      	adds	r1, r4, r5
 800bab8:	428b      	cmp	r3, r1
 800baba:	bf04      	itt	eq
 800babc:	6819      	ldreq	r1, [r3, #0]
 800babe:	685b      	ldreq	r3, [r3, #4]
 800bac0:	6063      	str	r3, [r4, #4]
 800bac2:	bf04      	itt	eq
 800bac4:	1949      	addeq	r1, r1, r5
 800bac6:	6021      	streq	r1, [r4, #0]
 800bac8:	6054      	str	r4, [r2, #4]
 800baca:	e7ca      	b.n	800ba62 <_free_r+0x26>
 800bacc:	b003      	add	sp, #12
 800bace:	bd30      	pop	{r4, r5, pc}
 800bad0:	20001830 	.word	0x20001830

0800bad4 <sbrk_aligned>:
 800bad4:	b570      	push	{r4, r5, r6, lr}
 800bad6:	4e0e      	ldr	r6, [pc, #56]	; (800bb10 <sbrk_aligned+0x3c>)
 800bad8:	460c      	mov	r4, r1
 800bada:	6831      	ldr	r1, [r6, #0]
 800badc:	4605      	mov	r5, r0
 800bade:	b911      	cbnz	r1, 800bae6 <sbrk_aligned+0x12>
 800bae0:	f000 f9e6 	bl	800beb0 <_sbrk_r>
 800bae4:	6030      	str	r0, [r6, #0]
 800bae6:	4621      	mov	r1, r4
 800bae8:	4628      	mov	r0, r5
 800baea:	f000 f9e1 	bl	800beb0 <_sbrk_r>
 800baee:	1c43      	adds	r3, r0, #1
 800baf0:	d00a      	beq.n	800bb08 <sbrk_aligned+0x34>
 800baf2:	1cc4      	adds	r4, r0, #3
 800baf4:	f024 0403 	bic.w	r4, r4, #3
 800baf8:	42a0      	cmp	r0, r4
 800bafa:	d007      	beq.n	800bb0c <sbrk_aligned+0x38>
 800bafc:	1a21      	subs	r1, r4, r0
 800bafe:	4628      	mov	r0, r5
 800bb00:	f000 f9d6 	bl	800beb0 <_sbrk_r>
 800bb04:	3001      	adds	r0, #1
 800bb06:	d101      	bne.n	800bb0c <sbrk_aligned+0x38>
 800bb08:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bb0c:	4620      	mov	r0, r4
 800bb0e:	bd70      	pop	{r4, r5, r6, pc}
 800bb10:	20001834 	.word	0x20001834

0800bb14 <_malloc_r>:
 800bb14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb18:	1ccd      	adds	r5, r1, #3
 800bb1a:	f025 0503 	bic.w	r5, r5, #3
 800bb1e:	3508      	adds	r5, #8
 800bb20:	2d0c      	cmp	r5, #12
 800bb22:	bf38      	it	cc
 800bb24:	250c      	movcc	r5, #12
 800bb26:	2d00      	cmp	r5, #0
 800bb28:	4607      	mov	r7, r0
 800bb2a:	db01      	blt.n	800bb30 <_malloc_r+0x1c>
 800bb2c:	42a9      	cmp	r1, r5
 800bb2e:	d905      	bls.n	800bb3c <_malloc_r+0x28>
 800bb30:	230c      	movs	r3, #12
 800bb32:	603b      	str	r3, [r7, #0]
 800bb34:	2600      	movs	r6, #0
 800bb36:	4630      	mov	r0, r6
 800bb38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb3c:	4e2e      	ldr	r6, [pc, #184]	; (800bbf8 <_malloc_r+0xe4>)
 800bb3e:	f000 faa3 	bl	800c088 <__malloc_lock>
 800bb42:	6833      	ldr	r3, [r6, #0]
 800bb44:	461c      	mov	r4, r3
 800bb46:	bb34      	cbnz	r4, 800bb96 <_malloc_r+0x82>
 800bb48:	4629      	mov	r1, r5
 800bb4a:	4638      	mov	r0, r7
 800bb4c:	f7ff ffc2 	bl	800bad4 <sbrk_aligned>
 800bb50:	1c43      	adds	r3, r0, #1
 800bb52:	4604      	mov	r4, r0
 800bb54:	d14d      	bne.n	800bbf2 <_malloc_r+0xde>
 800bb56:	6834      	ldr	r4, [r6, #0]
 800bb58:	4626      	mov	r6, r4
 800bb5a:	2e00      	cmp	r6, #0
 800bb5c:	d140      	bne.n	800bbe0 <_malloc_r+0xcc>
 800bb5e:	6823      	ldr	r3, [r4, #0]
 800bb60:	4631      	mov	r1, r6
 800bb62:	4638      	mov	r0, r7
 800bb64:	eb04 0803 	add.w	r8, r4, r3
 800bb68:	f000 f9a2 	bl	800beb0 <_sbrk_r>
 800bb6c:	4580      	cmp	r8, r0
 800bb6e:	d13a      	bne.n	800bbe6 <_malloc_r+0xd2>
 800bb70:	6821      	ldr	r1, [r4, #0]
 800bb72:	3503      	adds	r5, #3
 800bb74:	1a6d      	subs	r5, r5, r1
 800bb76:	f025 0503 	bic.w	r5, r5, #3
 800bb7a:	3508      	adds	r5, #8
 800bb7c:	2d0c      	cmp	r5, #12
 800bb7e:	bf38      	it	cc
 800bb80:	250c      	movcc	r5, #12
 800bb82:	4629      	mov	r1, r5
 800bb84:	4638      	mov	r0, r7
 800bb86:	f7ff ffa5 	bl	800bad4 <sbrk_aligned>
 800bb8a:	3001      	adds	r0, #1
 800bb8c:	d02b      	beq.n	800bbe6 <_malloc_r+0xd2>
 800bb8e:	6823      	ldr	r3, [r4, #0]
 800bb90:	442b      	add	r3, r5
 800bb92:	6023      	str	r3, [r4, #0]
 800bb94:	e00e      	b.n	800bbb4 <_malloc_r+0xa0>
 800bb96:	6822      	ldr	r2, [r4, #0]
 800bb98:	1b52      	subs	r2, r2, r5
 800bb9a:	d41e      	bmi.n	800bbda <_malloc_r+0xc6>
 800bb9c:	2a0b      	cmp	r2, #11
 800bb9e:	d916      	bls.n	800bbce <_malloc_r+0xba>
 800bba0:	1961      	adds	r1, r4, r5
 800bba2:	42a3      	cmp	r3, r4
 800bba4:	6025      	str	r5, [r4, #0]
 800bba6:	bf18      	it	ne
 800bba8:	6059      	strne	r1, [r3, #4]
 800bbaa:	6863      	ldr	r3, [r4, #4]
 800bbac:	bf08      	it	eq
 800bbae:	6031      	streq	r1, [r6, #0]
 800bbb0:	5162      	str	r2, [r4, r5]
 800bbb2:	604b      	str	r3, [r1, #4]
 800bbb4:	4638      	mov	r0, r7
 800bbb6:	f104 060b 	add.w	r6, r4, #11
 800bbba:	f000 fa6b 	bl	800c094 <__malloc_unlock>
 800bbbe:	f026 0607 	bic.w	r6, r6, #7
 800bbc2:	1d23      	adds	r3, r4, #4
 800bbc4:	1af2      	subs	r2, r6, r3
 800bbc6:	d0b6      	beq.n	800bb36 <_malloc_r+0x22>
 800bbc8:	1b9b      	subs	r3, r3, r6
 800bbca:	50a3      	str	r3, [r4, r2]
 800bbcc:	e7b3      	b.n	800bb36 <_malloc_r+0x22>
 800bbce:	6862      	ldr	r2, [r4, #4]
 800bbd0:	42a3      	cmp	r3, r4
 800bbd2:	bf0c      	ite	eq
 800bbd4:	6032      	streq	r2, [r6, #0]
 800bbd6:	605a      	strne	r2, [r3, #4]
 800bbd8:	e7ec      	b.n	800bbb4 <_malloc_r+0xa0>
 800bbda:	4623      	mov	r3, r4
 800bbdc:	6864      	ldr	r4, [r4, #4]
 800bbde:	e7b2      	b.n	800bb46 <_malloc_r+0x32>
 800bbe0:	4634      	mov	r4, r6
 800bbe2:	6876      	ldr	r6, [r6, #4]
 800bbe4:	e7b9      	b.n	800bb5a <_malloc_r+0x46>
 800bbe6:	230c      	movs	r3, #12
 800bbe8:	603b      	str	r3, [r7, #0]
 800bbea:	4638      	mov	r0, r7
 800bbec:	f000 fa52 	bl	800c094 <__malloc_unlock>
 800bbf0:	e7a1      	b.n	800bb36 <_malloc_r+0x22>
 800bbf2:	6025      	str	r5, [r4, #0]
 800bbf4:	e7de      	b.n	800bbb4 <_malloc_r+0xa0>
 800bbf6:	bf00      	nop
 800bbf8:	20001830 	.word	0x20001830

0800bbfc <__sfputc_r>:
 800bbfc:	6893      	ldr	r3, [r2, #8]
 800bbfe:	3b01      	subs	r3, #1
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	b410      	push	{r4}
 800bc04:	6093      	str	r3, [r2, #8]
 800bc06:	da08      	bge.n	800bc1a <__sfputc_r+0x1e>
 800bc08:	6994      	ldr	r4, [r2, #24]
 800bc0a:	42a3      	cmp	r3, r4
 800bc0c:	db01      	blt.n	800bc12 <__sfputc_r+0x16>
 800bc0e:	290a      	cmp	r1, #10
 800bc10:	d103      	bne.n	800bc1a <__sfputc_r+0x1e>
 800bc12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc16:	f7fe ba01 	b.w	800a01c <__swbuf_r>
 800bc1a:	6813      	ldr	r3, [r2, #0]
 800bc1c:	1c58      	adds	r0, r3, #1
 800bc1e:	6010      	str	r0, [r2, #0]
 800bc20:	7019      	strb	r1, [r3, #0]
 800bc22:	4608      	mov	r0, r1
 800bc24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc28:	4770      	bx	lr

0800bc2a <__sfputs_r>:
 800bc2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc2c:	4606      	mov	r6, r0
 800bc2e:	460f      	mov	r7, r1
 800bc30:	4614      	mov	r4, r2
 800bc32:	18d5      	adds	r5, r2, r3
 800bc34:	42ac      	cmp	r4, r5
 800bc36:	d101      	bne.n	800bc3c <__sfputs_r+0x12>
 800bc38:	2000      	movs	r0, #0
 800bc3a:	e007      	b.n	800bc4c <__sfputs_r+0x22>
 800bc3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc40:	463a      	mov	r2, r7
 800bc42:	4630      	mov	r0, r6
 800bc44:	f7ff ffda 	bl	800bbfc <__sfputc_r>
 800bc48:	1c43      	adds	r3, r0, #1
 800bc4a:	d1f3      	bne.n	800bc34 <__sfputs_r+0xa>
 800bc4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc50 <_vfiprintf_r>:
 800bc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc54:	460d      	mov	r5, r1
 800bc56:	b09d      	sub	sp, #116	; 0x74
 800bc58:	4614      	mov	r4, r2
 800bc5a:	4698      	mov	r8, r3
 800bc5c:	4606      	mov	r6, r0
 800bc5e:	b118      	cbz	r0, 800bc68 <_vfiprintf_r+0x18>
 800bc60:	6983      	ldr	r3, [r0, #24]
 800bc62:	b90b      	cbnz	r3, 800bc68 <_vfiprintf_r+0x18>
 800bc64:	f7ff fa30 	bl	800b0c8 <__sinit>
 800bc68:	4b89      	ldr	r3, [pc, #548]	; (800be90 <_vfiprintf_r+0x240>)
 800bc6a:	429d      	cmp	r5, r3
 800bc6c:	d11b      	bne.n	800bca6 <_vfiprintf_r+0x56>
 800bc6e:	6875      	ldr	r5, [r6, #4]
 800bc70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc72:	07d9      	lsls	r1, r3, #31
 800bc74:	d405      	bmi.n	800bc82 <_vfiprintf_r+0x32>
 800bc76:	89ab      	ldrh	r3, [r5, #12]
 800bc78:	059a      	lsls	r2, r3, #22
 800bc7a:	d402      	bmi.n	800bc82 <_vfiprintf_r+0x32>
 800bc7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc7e:	f7ff fac6 	bl	800b20e <__retarget_lock_acquire_recursive>
 800bc82:	89ab      	ldrh	r3, [r5, #12]
 800bc84:	071b      	lsls	r3, r3, #28
 800bc86:	d501      	bpl.n	800bc8c <_vfiprintf_r+0x3c>
 800bc88:	692b      	ldr	r3, [r5, #16]
 800bc8a:	b9eb      	cbnz	r3, 800bcc8 <_vfiprintf_r+0x78>
 800bc8c:	4629      	mov	r1, r5
 800bc8e:	4630      	mov	r0, r6
 800bc90:	f7fe fa16 	bl	800a0c0 <__swsetup_r>
 800bc94:	b1c0      	cbz	r0, 800bcc8 <_vfiprintf_r+0x78>
 800bc96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc98:	07dc      	lsls	r4, r3, #31
 800bc9a:	d50e      	bpl.n	800bcba <_vfiprintf_r+0x6a>
 800bc9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bca0:	b01d      	add	sp, #116	; 0x74
 800bca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bca6:	4b7b      	ldr	r3, [pc, #492]	; (800be94 <_vfiprintf_r+0x244>)
 800bca8:	429d      	cmp	r5, r3
 800bcaa:	d101      	bne.n	800bcb0 <_vfiprintf_r+0x60>
 800bcac:	68b5      	ldr	r5, [r6, #8]
 800bcae:	e7df      	b.n	800bc70 <_vfiprintf_r+0x20>
 800bcb0:	4b79      	ldr	r3, [pc, #484]	; (800be98 <_vfiprintf_r+0x248>)
 800bcb2:	429d      	cmp	r5, r3
 800bcb4:	bf08      	it	eq
 800bcb6:	68f5      	ldreq	r5, [r6, #12]
 800bcb8:	e7da      	b.n	800bc70 <_vfiprintf_r+0x20>
 800bcba:	89ab      	ldrh	r3, [r5, #12]
 800bcbc:	0598      	lsls	r0, r3, #22
 800bcbe:	d4ed      	bmi.n	800bc9c <_vfiprintf_r+0x4c>
 800bcc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcc2:	f7ff faa5 	bl	800b210 <__retarget_lock_release_recursive>
 800bcc6:	e7e9      	b.n	800bc9c <_vfiprintf_r+0x4c>
 800bcc8:	2300      	movs	r3, #0
 800bcca:	9309      	str	r3, [sp, #36]	; 0x24
 800bccc:	2320      	movs	r3, #32
 800bcce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bcd2:	f8cd 800c 	str.w	r8, [sp, #12]
 800bcd6:	2330      	movs	r3, #48	; 0x30
 800bcd8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800be9c <_vfiprintf_r+0x24c>
 800bcdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bce0:	f04f 0901 	mov.w	r9, #1
 800bce4:	4623      	mov	r3, r4
 800bce6:	469a      	mov	sl, r3
 800bce8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcec:	b10a      	cbz	r2, 800bcf2 <_vfiprintf_r+0xa2>
 800bcee:	2a25      	cmp	r2, #37	; 0x25
 800bcf0:	d1f9      	bne.n	800bce6 <_vfiprintf_r+0x96>
 800bcf2:	ebba 0b04 	subs.w	fp, sl, r4
 800bcf6:	d00b      	beq.n	800bd10 <_vfiprintf_r+0xc0>
 800bcf8:	465b      	mov	r3, fp
 800bcfa:	4622      	mov	r2, r4
 800bcfc:	4629      	mov	r1, r5
 800bcfe:	4630      	mov	r0, r6
 800bd00:	f7ff ff93 	bl	800bc2a <__sfputs_r>
 800bd04:	3001      	adds	r0, #1
 800bd06:	f000 80aa 	beq.w	800be5e <_vfiprintf_r+0x20e>
 800bd0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd0c:	445a      	add	r2, fp
 800bd0e:	9209      	str	r2, [sp, #36]	; 0x24
 800bd10:	f89a 3000 	ldrb.w	r3, [sl]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	f000 80a2 	beq.w	800be5e <_vfiprintf_r+0x20e>
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd24:	f10a 0a01 	add.w	sl, sl, #1
 800bd28:	9304      	str	r3, [sp, #16]
 800bd2a:	9307      	str	r3, [sp, #28]
 800bd2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd30:	931a      	str	r3, [sp, #104]	; 0x68
 800bd32:	4654      	mov	r4, sl
 800bd34:	2205      	movs	r2, #5
 800bd36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd3a:	4858      	ldr	r0, [pc, #352]	; (800be9c <_vfiprintf_r+0x24c>)
 800bd3c:	f7f4 fa58 	bl	80001f0 <memchr>
 800bd40:	9a04      	ldr	r2, [sp, #16]
 800bd42:	b9d8      	cbnz	r0, 800bd7c <_vfiprintf_r+0x12c>
 800bd44:	06d1      	lsls	r1, r2, #27
 800bd46:	bf44      	itt	mi
 800bd48:	2320      	movmi	r3, #32
 800bd4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd4e:	0713      	lsls	r3, r2, #28
 800bd50:	bf44      	itt	mi
 800bd52:	232b      	movmi	r3, #43	; 0x2b
 800bd54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd58:	f89a 3000 	ldrb.w	r3, [sl]
 800bd5c:	2b2a      	cmp	r3, #42	; 0x2a
 800bd5e:	d015      	beq.n	800bd8c <_vfiprintf_r+0x13c>
 800bd60:	9a07      	ldr	r2, [sp, #28]
 800bd62:	4654      	mov	r4, sl
 800bd64:	2000      	movs	r0, #0
 800bd66:	f04f 0c0a 	mov.w	ip, #10
 800bd6a:	4621      	mov	r1, r4
 800bd6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd70:	3b30      	subs	r3, #48	; 0x30
 800bd72:	2b09      	cmp	r3, #9
 800bd74:	d94e      	bls.n	800be14 <_vfiprintf_r+0x1c4>
 800bd76:	b1b0      	cbz	r0, 800bda6 <_vfiprintf_r+0x156>
 800bd78:	9207      	str	r2, [sp, #28]
 800bd7a:	e014      	b.n	800bda6 <_vfiprintf_r+0x156>
 800bd7c:	eba0 0308 	sub.w	r3, r0, r8
 800bd80:	fa09 f303 	lsl.w	r3, r9, r3
 800bd84:	4313      	orrs	r3, r2
 800bd86:	9304      	str	r3, [sp, #16]
 800bd88:	46a2      	mov	sl, r4
 800bd8a:	e7d2      	b.n	800bd32 <_vfiprintf_r+0xe2>
 800bd8c:	9b03      	ldr	r3, [sp, #12]
 800bd8e:	1d19      	adds	r1, r3, #4
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	9103      	str	r1, [sp, #12]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	bfbb      	ittet	lt
 800bd98:	425b      	neglt	r3, r3
 800bd9a:	f042 0202 	orrlt.w	r2, r2, #2
 800bd9e:	9307      	strge	r3, [sp, #28]
 800bda0:	9307      	strlt	r3, [sp, #28]
 800bda2:	bfb8      	it	lt
 800bda4:	9204      	strlt	r2, [sp, #16]
 800bda6:	7823      	ldrb	r3, [r4, #0]
 800bda8:	2b2e      	cmp	r3, #46	; 0x2e
 800bdaa:	d10c      	bne.n	800bdc6 <_vfiprintf_r+0x176>
 800bdac:	7863      	ldrb	r3, [r4, #1]
 800bdae:	2b2a      	cmp	r3, #42	; 0x2a
 800bdb0:	d135      	bne.n	800be1e <_vfiprintf_r+0x1ce>
 800bdb2:	9b03      	ldr	r3, [sp, #12]
 800bdb4:	1d1a      	adds	r2, r3, #4
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	9203      	str	r2, [sp, #12]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	bfb8      	it	lt
 800bdbe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bdc2:	3402      	adds	r4, #2
 800bdc4:	9305      	str	r3, [sp, #20]
 800bdc6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800beac <_vfiprintf_r+0x25c>
 800bdca:	7821      	ldrb	r1, [r4, #0]
 800bdcc:	2203      	movs	r2, #3
 800bdce:	4650      	mov	r0, sl
 800bdd0:	f7f4 fa0e 	bl	80001f0 <memchr>
 800bdd4:	b140      	cbz	r0, 800bde8 <_vfiprintf_r+0x198>
 800bdd6:	2340      	movs	r3, #64	; 0x40
 800bdd8:	eba0 000a 	sub.w	r0, r0, sl
 800bddc:	fa03 f000 	lsl.w	r0, r3, r0
 800bde0:	9b04      	ldr	r3, [sp, #16]
 800bde2:	4303      	orrs	r3, r0
 800bde4:	3401      	adds	r4, #1
 800bde6:	9304      	str	r3, [sp, #16]
 800bde8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdec:	482c      	ldr	r0, [pc, #176]	; (800bea0 <_vfiprintf_r+0x250>)
 800bdee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bdf2:	2206      	movs	r2, #6
 800bdf4:	f7f4 f9fc 	bl	80001f0 <memchr>
 800bdf8:	2800      	cmp	r0, #0
 800bdfa:	d03f      	beq.n	800be7c <_vfiprintf_r+0x22c>
 800bdfc:	4b29      	ldr	r3, [pc, #164]	; (800bea4 <_vfiprintf_r+0x254>)
 800bdfe:	bb1b      	cbnz	r3, 800be48 <_vfiprintf_r+0x1f8>
 800be00:	9b03      	ldr	r3, [sp, #12]
 800be02:	3307      	adds	r3, #7
 800be04:	f023 0307 	bic.w	r3, r3, #7
 800be08:	3308      	adds	r3, #8
 800be0a:	9303      	str	r3, [sp, #12]
 800be0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be0e:	443b      	add	r3, r7
 800be10:	9309      	str	r3, [sp, #36]	; 0x24
 800be12:	e767      	b.n	800bce4 <_vfiprintf_r+0x94>
 800be14:	fb0c 3202 	mla	r2, ip, r2, r3
 800be18:	460c      	mov	r4, r1
 800be1a:	2001      	movs	r0, #1
 800be1c:	e7a5      	b.n	800bd6a <_vfiprintf_r+0x11a>
 800be1e:	2300      	movs	r3, #0
 800be20:	3401      	adds	r4, #1
 800be22:	9305      	str	r3, [sp, #20]
 800be24:	4619      	mov	r1, r3
 800be26:	f04f 0c0a 	mov.w	ip, #10
 800be2a:	4620      	mov	r0, r4
 800be2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be30:	3a30      	subs	r2, #48	; 0x30
 800be32:	2a09      	cmp	r2, #9
 800be34:	d903      	bls.n	800be3e <_vfiprintf_r+0x1ee>
 800be36:	2b00      	cmp	r3, #0
 800be38:	d0c5      	beq.n	800bdc6 <_vfiprintf_r+0x176>
 800be3a:	9105      	str	r1, [sp, #20]
 800be3c:	e7c3      	b.n	800bdc6 <_vfiprintf_r+0x176>
 800be3e:	fb0c 2101 	mla	r1, ip, r1, r2
 800be42:	4604      	mov	r4, r0
 800be44:	2301      	movs	r3, #1
 800be46:	e7f0      	b.n	800be2a <_vfiprintf_r+0x1da>
 800be48:	ab03      	add	r3, sp, #12
 800be4a:	9300      	str	r3, [sp, #0]
 800be4c:	462a      	mov	r2, r5
 800be4e:	4b16      	ldr	r3, [pc, #88]	; (800bea8 <_vfiprintf_r+0x258>)
 800be50:	a904      	add	r1, sp, #16
 800be52:	4630      	mov	r0, r6
 800be54:	f7fd fc8a 	bl	800976c <_printf_float>
 800be58:	4607      	mov	r7, r0
 800be5a:	1c78      	adds	r0, r7, #1
 800be5c:	d1d6      	bne.n	800be0c <_vfiprintf_r+0x1bc>
 800be5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be60:	07d9      	lsls	r1, r3, #31
 800be62:	d405      	bmi.n	800be70 <_vfiprintf_r+0x220>
 800be64:	89ab      	ldrh	r3, [r5, #12]
 800be66:	059a      	lsls	r2, r3, #22
 800be68:	d402      	bmi.n	800be70 <_vfiprintf_r+0x220>
 800be6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be6c:	f7ff f9d0 	bl	800b210 <__retarget_lock_release_recursive>
 800be70:	89ab      	ldrh	r3, [r5, #12]
 800be72:	065b      	lsls	r3, r3, #25
 800be74:	f53f af12 	bmi.w	800bc9c <_vfiprintf_r+0x4c>
 800be78:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be7a:	e711      	b.n	800bca0 <_vfiprintf_r+0x50>
 800be7c:	ab03      	add	r3, sp, #12
 800be7e:	9300      	str	r3, [sp, #0]
 800be80:	462a      	mov	r2, r5
 800be82:	4b09      	ldr	r3, [pc, #36]	; (800bea8 <_vfiprintf_r+0x258>)
 800be84:	a904      	add	r1, sp, #16
 800be86:	4630      	mov	r0, r6
 800be88:	f7fd ff14 	bl	8009cb4 <_printf_i>
 800be8c:	e7e4      	b.n	800be58 <_vfiprintf_r+0x208>
 800be8e:	bf00      	nop
 800be90:	0800d058 	.word	0x0800d058
 800be94:	0800d078 	.word	0x0800d078
 800be98:	0800d038 	.word	0x0800d038
 800be9c:	0800d1f4 	.word	0x0800d1f4
 800bea0:	0800d1fe 	.word	0x0800d1fe
 800bea4:	0800976d 	.word	0x0800976d
 800bea8:	0800bc2b 	.word	0x0800bc2b
 800beac:	0800d1fa 	.word	0x0800d1fa

0800beb0 <_sbrk_r>:
 800beb0:	b538      	push	{r3, r4, r5, lr}
 800beb2:	4d06      	ldr	r5, [pc, #24]	; (800becc <_sbrk_r+0x1c>)
 800beb4:	2300      	movs	r3, #0
 800beb6:	4604      	mov	r4, r0
 800beb8:	4608      	mov	r0, r1
 800beba:	602b      	str	r3, [r5, #0]
 800bebc:	f7f6 fa8e 	bl	80023dc <_sbrk>
 800bec0:	1c43      	adds	r3, r0, #1
 800bec2:	d102      	bne.n	800beca <_sbrk_r+0x1a>
 800bec4:	682b      	ldr	r3, [r5, #0]
 800bec6:	b103      	cbz	r3, 800beca <_sbrk_r+0x1a>
 800bec8:	6023      	str	r3, [r4, #0]
 800beca:	bd38      	pop	{r3, r4, r5, pc}
 800becc:	20001838 	.word	0x20001838

0800bed0 <__sread>:
 800bed0:	b510      	push	{r4, lr}
 800bed2:	460c      	mov	r4, r1
 800bed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bed8:	f000 f8e2 	bl	800c0a0 <_read_r>
 800bedc:	2800      	cmp	r0, #0
 800bede:	bfab      	itete	ge
 800bee0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bee2:	89a3      	ldrhlt	r3, [r4, #12]
 800bee4:	181b      	addge	r3, r3, r0
 800bee6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800beea:	bfac      	ite	ge
 800beec:	6563      	strge	r3, [r4, #84]	; 0x54
 800beee:	81a3      	strhlt	r3, [r4, #12]
 800bef0:	bd10      	pop	{r4, pc}

0800bef2 <__swrite>:
 800bef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bef6:	461f      	mov	r7, r3
 800bef8:	898b      	ldrh	r3, [r1, #12]
 800befa:	05db      	lsls	r3, r3, #23
 800befc:	4605      	mov	r5, r0
 800befe:	460c      	mov	r4, r1
 800bf00:	4616      	mov	r6, r2
 800bf02:	d505      	bpl.n	800bf10 <__swrite+0x1e>
 800bf04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf08:	2302      	movs	r3, #2
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	f000 f898 	bl	800c040 <_lseek_r>
 800bf10:	89a3      	ldrh	r3, [r4, #12]
 800bf12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bf1a:	81a3      	strh	r3, [r4, #12]
 800bf1c:	4632      	mov	r2, r6
 800bf1e:	463b      	mov	r3, r7
 800bf20:	4628      	mov	r0, r5
 800bf22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf26:	f000 b817 	b.w	800bf58 <_write_r>

0800bf2a <__sseek>:
 800bf2a:	b510      	push	{r4, lr}
 800bf2c:	460c      	mov	r4, r1
 800bf2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf32:	f000 f885 	bl	800c040 <_lseek_r>
 800bf36:	1c43      	adds	r3, r0, #1
 800bf38:	89a3      	ldrh	r3, [r4, #12]
 800bf3a:	bf15      	itete	ne
 800bf3c:	6560      	strne	r0, [r4, #84]	; 0x54
 800bf3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bf42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bf46:	81a3      	strheq	r3, [r4, #12]
 800bf48:	bf18      	it	ne
 800bf4a:	81a3      	strhne	r3, [r4, #12]
 800bf4c:	bd10      	pop	{r4, pc}

0800bf4e <__sclose>:
 800bf4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf52:	f000 b831 	b.w	800bfb8 <_close_r>
	...

0800bf58 <_write_r>:
 800bf58:	b538      	push	{r3, r4, r5, lr}
 800bf5a:	4d07      	ldr	r5, [pc, #28]	; (800bf78 <_write_r+0x20>)
 800bf5c:	4604      	mov	r4, r0
 800bf5e:	4608      	mov	r0, r1
 800bf60:	4611      	mov	r1, r2
 800bf62:	2200      	movs	r2, #0
 800bf64:	602a      	str	r2, [r5, #0]
 800bf66:	461a      	mov	r2, r3
 800bf68:	f7f6 f9e7 	bl	800233a <_write>
 800bf6c:	1c43      	adds	r3, r0, #1
 800bf6e:	d102      	bne.n	800bf76 <_write_r+0x1e>
 800bf70:	682b      	ldr	r3, [r5, #0]
 800bf72:	b103      	cbz	r3, 800bf76 <_write_r+0x1e>
 800bf74:	6023      	str	r3, [r4, #0]
 800bf76:	bd38      	pop	{r3, r4, r5, pc}
 800bf78:	20001838 	.word	0x20001838

0800bf7c <__assert_func>:
 800bf7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf7e:	4614      	mov	r4, r2
 800bf80:	461a      	mov	r2, r3
 800bf82:	4b09      	ldr	r3, [pc, #36]	; (800bfa8 <__assert_func+0x2c>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	4605      	mov	r5, r0
 800bf88:	68d8      	ldr	r0, [r3, #12]
 800bf8a:	b14c      	cbz	r4, 800bfa0 <__assert_func+0x24>
 800bf8c:	4b07      	ldr	r3, [pc, #28]	; (800bfac <__assert_func+0x30>)
 800bf8e:	9100      	str	r1, [sp, #0]
 800bf90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bf94:	4906      	ldr	r1, [pc, #24]	; (800bfb0 <__assert_func+0x34>)
 800bf96:	462b      	mov	r3, r5
 800bf98:	f000 f81e 	bl	800bfd8 <fiprintf>
 800bf9c:	f000 f89f 	bl	800c0de <abort>
 800bfa0:	4b04      	ldr	r3, [pc, #16]	; (800bfb4 <__assert_func+0x38>)
 800bfa2:	461c      	mov	r4, r3
 800bfa4:	e7f3      	b.n	800bf8e <__assert_func+0x12>
 800bfa6:	bf00      	nop
 800bfa8:	20000100 	.word	0x20000100
 800bfac:	0800d205 	.word	0x0800d205
 800bfb0:	0800d212 	.word	0x0800d212
 800bfb4:	0800d240 	.word	0x0800d240

0800bfb8 <_close_r>:
 800bfb8:	b538      	push	{r3, r4, r5, lr}
 800bfba:	4d06      	ldr	r5, [pc, #24]	; (800bfd4 <_close_r+0x1c>)
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	4604      	mov	r4, r0
 800bfc0:	4608      	mov	r0, r1
 800bfc2:	602b      	str	r3, [r5, #0]
 800bfc4:	f7f6 f9d5 	bl	8002372 <_close>
 800bfc8:	1c43      	adds	r3, r0, #1
 800bfca:	d102      	bne.n	800bfd2 <_close_r+0x1a>
 800bfcc:	682b      	ldr	r3, [r5, #0]
 800bfce:	b103      	cbz	r3, 800bfd2 <_close_r+0x1a>
 800bfd0:	6023      	str	r3, [r4, #0]
 800bfd2:	bd38      	pop	{r3, r4, r5, pc}
 800bfd4:	20001838 	.word	0x20001838

0800bfd8 <fiprintf>:
 800bfd8:	b40e      	push	{r1, r2, r3}
 800bfda:	b503      	push	{r0, r1, lr}
 800bfdc:	4601      	mov	r1, r0
 800bfde:	ab03      	add	r3, sp, #12
 800bfe0:	4805      	ldr	r0, [pc, #20]	; (800bff8 <fiprintf+0x20>)
 800bfe2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfe6:	6800      	ldr	r0, [r0, #0]
 800bfe8:	9301      	str	r3, [sp, #4]
 800bfea:	f7ff fe31 	bl	800bc50 <_vfiprintf_r>
 800bfee:	b002      	add	sp, #8
 800bff0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bff4:	b003      	add	sp, #12
 800bff6:	4770      	bx	lr
 800bff8:	20000100 	.word	0x20000100

0800bffc <_fstat_r>:
 800bffc:	b538      	push	{r3, r4, r5, lr}
 800bffe:	4d07      	ldr	r5, [pc, #28]	; (800c01c <_fstat_r+0x20>)
 800c000:	2300      	movs	r3, #0
 800c002:	4604      	mov	r4, r0
 800c004:	4608      	mov	r0, r1
 800c006:	4611      	mov	r1, r2
 800c008:	602b      	str	r3, [r5, #0]
 800c00a:	f7f6 f9be 	bl	800238a <_fstat>
 800c00e:	1c43      	adds	r3, r0, #1
 800c010:	d102      	bne.n	800c018 <_fstat_r+0x1c>
 800c012:	682b      	ldr	r3, [r5, #0]
 800c014:	b103      	cbz	r3, 800c018 <_fstat_r+0x1c>
 800c016:	6023      	str	r3, [r4, #0]
 800c018:	bd38      	pop	{r3, r4, r5, pc}
 800c01a:	bf00      	nop
 800c01c:	20001838 	.word	0x20001838

0800c020 <_isatty_r>:
 800c020:	b538      	push	{r3, r4, r5, lr}
 800c022:	4d06      	ldr	r5, [pc, #24]	; (800c03c <_isatty_r+0x1c>)
 800c024:	2300      	movs	r3, #0
 800c026:	4604      	mov	r4, r0
 800c028:	4608      	mov	r0, r1
 800c02a:	602b      	str	r3, [r5, #0]
 800c02c:	f7f6 f9bd 	bl	80023aa <_isatty>
 800c030:	1c43      	adds	r3, r0, #1
 800c032:	d102      	bne.n	800c03a <_isatty_r+0x1a>
 800c034:	682b      	ldr	r3, [r5, #0]
 800c036:	b103      	cbz	r3, 800c03a <_isatty_r+0x1a>
 800c038:	6023      	str	r3, [r4, #0]
 800c03a:	bd38      	pop	{r3, r4, r5, pc}
 800c03c:	20001838 	.word	0x20001838

0800c040 <_lseek_r>:
 800c040:	b538      	push	{r3, r4, r5, lr}
 800c042:	4d07      	ldr	r5, [pc, #28]	; (800c060 <_lseek_r+0x20>)
 800c044:	4604      	mov	r4, r0
 800c046:	4608      	mov	r0, r1
 800c048:	4611      	mov	r1, r2
 800c04a:	2200      	movs	r2, #0
 800c04c:	602a      	str	r2, [r5, #0]
 800c04e:	461a      	mov	r2, r3
 800c050:	f7f6 f9b6 	bl	80023c0 <_lseek>
 800c054:	1c43      	adds	r3, r0, #1
 800c056:	d102      	bne.n	800c05e <_lseek_r+0x1e>
 800c058:	682b      	ldr	r3, [r5, #0]
 800c05a:	b103      	cbz	r3, 800c05e <_lseek_r+0x1e>
 800c05c:	6023      	str	r3, [r4, #0]
 800c05e:	bd38      	pop	{r3, r4, r5, pc}
 800c060:	20001838 	.word	0x20001838

0800c064 <__ascii_mbtowc>:
 800c064:	b082      	sub	sp, #8
 800c066:	b901      	cbnz	r1, 800c06a <__ascii_mbtowc+0x6>
 800c068:	a901      	add	r1, sp, #4
 800c06a:	b142      	cbz	r2, 800c07e <__ascii_mbtowc+0x1a>
 800c06c:	b14b      	cbz	r3, 800c082 <__ascii_mbtowc+0x1e>
 800c06e:	7813      	ldrb	r3, [r2, #0]
 800c070:	600b      	str	r3, [r1, #0]
 800c072:	7812      	ldrb	r2, [r2, #0]
 800c074:	1e10      	subs	r0, r2, #0
 800c076:	bf18      	it	ne
 800c078:	2001      	movne	r0, #1
 800c07a:	b002      	add	sp, #8
 800c07c:	4770      	bx	lr
 800c07e:	4610      	mov	r0, r2
 800c080:	e7fb      	b.n	800c07a <__ascii_mbtowc+0x16>
 800c082:	f06f 0001 	mvn.w	r0, #1
 800c086:	e7f8      	b.n	800c07a <__ascii_mbtowc+0x16>

0800c088 <__malloc_lock>:
 800c088:	4801      	ldr	r0, [pc, #4]	; (800c090 <__malloc_lock+0x8>)
 800c08a:	f7ff b8c0 	b.w	800b20e <__retarget_lock_acquire_recursive>
 800c08e:	bf00      	nop
 800c090:	2000182c 	.word	0x2000182c

0800c094 <__malloc_unlock>:
 800c094:	4801      	ldr	r0, [pc, #4]	; (800c09c <__malloc_unlock+0x8>)
 800c096:	f7ff b8bb 	b.w	800b210 <__retarget_lock_release_recursive>
 800c09a:	bf00      	nop
 800c09c:	2000182c 	.word	0x2000182c

0800c0a0 <_read_r>:
 800c0a0:	b538      	push	{r3, r4, r5, lr}
 800c0a2:	4d07      	ldr	r5, [pc, #28]	; (800c0c0 <_read_r+0x20>)
 800c0a4:	4604      	mov	r4, r0
 800c0a6:	4608      	mov	r0, r1
 800c0a8:	4611      	mov	r1, r2
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	602a      	str	r2, [r5, #0]
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	f7f6 f926 	bl	8002300 <_read>
 800c0b4:	1c43      	adds	r3, r0, #1
 800c0b6:	d102      	bne.n	800c0be <_read_r+0x1e>
 800c0b8:	682b      	ldr	r3, [r5, #0]
 800c0ba:	b103      	cbz	r3, 800c0be <_read_r+0x1e>
 800c0bc:	6023      	str	r3, [r4, #0]
 800c0be:	bd38      	pop	{r3, r4, r5, pc}
 800c0c0:	20001838 	.word	0x20001838

0800c0c4 <__ascii_wctomb>:
 800c0c4:	b149      	cbz	r1, 800c0da <__ascii_wctomb+0x16>
 800c0c6:	2aff      	cmp	r2, #255	; 0xff
 800c0c8:	bf85      	ittet	hi
 800c0ca:	238a      	movhi	r3, #138	; 0x8a
 800c0cc:	6003      	strhi	r3, [r0, #0]
 800c0ce:	700a      	strbls	r2, [r1, #0]
 800c0d0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c0d4:	bf98      	it	ls
 800c0d6:	2001      	movls	r0, #1
 800c0d8:	4770      	bx	lr
 800c0da:	4608      	mov	r0, r1
 800c0dc:	4770      	bx	lr

0800c0de <abort>:
 800c0de:	b508      	push	{r3, lr}
 800c0e0:	2006      	movs	r0, #6
 800c0e2:	f000 f82b 	bl	800c13c <raise>
 800c0e6:	2001      	movs	r0, #1
 800c0e8:	f7f6 f900 	bl	80022ec <_exit>

0800c0ec <_raise_r>:
 800c0ec:	291f      	cmp	r1, #31
 800c0ee:	b538      	push	{r3, r4, r5, lr}
 800c0f0:	4604      	mov	r4, r0
 800c0f2:	460d      	mov	r5, r1
 800c0f4:	d904      	bls.n	800c100 <_raise_r+0x14>
 800c0f6:	2316      	movs	r3, #22
 800c0f8:	6003      	str	r3, [r0, #0]
 800c0fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c0fe:	bd38      	pop	{r3, r4, r5, pc}
 800c100:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c102:	b112      	cbz	r2, 800c10a <_raise_r+0x1e>
 800c104:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c108:	b94b      	cbnz	r3, 800c11e <_raise_r+0x32>
 800c10a:	4620      	mov	r0, r4
 800c10c:	f000 f830 	bl	800c170 <_getpid_r>
 800c110:	462a      	mov	r2, r5
 800c112:	4601      	mov	r1, r0
 800c114:	4620      	mov	r0, r4
 800c116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c11a:	f000 b817 	b.w	800c14c <_kill_r>
 800c11e:	2b01      	cmp	r3, #1
 800c120:	d00a      	beq.n	800c138 <_raise_r+0x4c>
 800c122:	1c59      	adds	r1, r3, #1
 800c124:	d103      	bne.n	800c12e <_raise_r+0x42>
 800c126:	2316      	movs	r3, #22
 800c128:	6003      	str	r3, [r0, #0]
 800c12a:	2001      	movs	r0, #1
 800c12c:	e7e7      	b.n	800c0fe <_raise_r+0x12>
 800c12e:	2400      	movs	r4, #0
 800c130:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c134:	4628      	mov	r0, r5
 800c136:	4798      	blx	r3
 800c138:	2000      	movs	r0, #0
 800c13a:	e7e0      	b.n	800c0fe <_raise_r+0x12>

0800c13c <raise>:
 800c13c:	4b02      	ldr	r3, [pc, #8]	; (800c148 <raise+0xc>)
 800c13e:	4601      	mov	r1, r0
 800c140:	6818      	ldr	r0, [r3, #0]
 800c142:	f7ff bfd3 	b.w	800c0ec <_raise_r>
 800c146:	bf00      	nop
 800c148:	20000100 	.word	0x20000100

0800c14c <_kill_r>:
 800c14c:	b538      	push	{r3, r4, r5, lr}
 800c14e:	4d07      	ldr	r5, [pc, #28]	; (800c16c <_kill_r+0x20>)
 800c150:	2300      	movs	r3, #0
 800c152:	4604      	mov	r4, r0
 800c154:	4608      	mov	r0, r1
 800c156:	4611      	mov	r1, r2
 800c158:	602b      	str	r3, [r5, #0]
 800c15a:	f7f6 f8b7 	bl	80022cc <_kill>
 800c15e:	1c43      	adds	r3, r0, #1
 800c160:	d102      	bne.n	800c168 <_kill_r+0x1c>
 800c162:	682b      	ldr	r3, [r5, #0]
 800c164:	b103      	cbz	r3, 800c168 <_kill_r+0x1c>
 800c166:	6023      	str	r3, [r4, #0]
 800c168:	bd38      	pop	{r3, r4, r5, pc}
 800c16a:	bf00      	nop
 800c16c:	20001838 	.word	0x20001838

0800c170 <_getpid_r>:
 800c170:	f7f6 b8a4 	b.w	80022bc <_getpid>

0800c174 <asinf>:
 800c174:	b508      	push	{r3, lr}
 800c176:	ed2d 8b02 	vpush	{d8}
 800c17a:	eeb0 8a40 	vmov.f32	s16, s0
 800c17e:	f000 f87f 	bl	800c280 <__ieee754_asinf>
 800c182:	eeb4 8a48 	vcmp.f32	s16, s16
 800c186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c18a:	eef0 8a40 	vmov.f32	s17, s0
 800c18e:	d615      	bvs.n	800c1bc <asinf+0x48>
 800c190:	eeb0 0a48 	vmov.f32	s0, s16
 800c194:	f000 fdc2 	bl	800cd1c <fabsf>
 800c198:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c19c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c1a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1a4:	dd0a      	ble.n	800c1bc <asinf+0x48>
 800c1a6:	f7fd fa0f 	bl	80095c8 <__errno>
 800c1aa:	ecbd 8b02 	vpop	{d8}
 800c1ae:	2321      	movs	r3, #33	; 0x21
 800c1b0:	6003      	str	r3, [r0, #0]
 800c1b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c1b6:	4804      	ldr	r0, [pc, #16]	; (800c1c8 <asinf+0x54>)
 800c1b8:	f000 bdc4 	b.w	800cd44 <nanf>
 800c1bc:	eeb0 0a68 	vmov.f32	s0, s17
 800c1c0:	ecbd 8b02 	vpop	{d8}
 800c1c4:	bd08      	pop	{r3, pc}
 800c1c6:	bf00      	nop
 800c1c8:	0800d240 	.word	0x0800d240

0800c1cc <atan2f>:
 800c1cc:	f000 b93e 	b.w	800c44c <__ieee754_atan2f>

0800c1d0 <powf>:
 800c1d0:	b508      	push	{r3, lr}
 800c1d2:	ed2d 8b04 	vpush	{d8-d9}
 800c1d6:	eeb0 8a60 	vmov.f32	s16, s1
 800c1da:	eeb0 9a40 	vmov.f32	s18, s0
 800c1de:	f000 f9d5 	bl	800c58c <__ieee754_powf>
 800c1e2:	eeb4 8a48 	vcmp.f32	s16, s16
 800c1e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1ea:	eef0 8a40 	vmov.f32	s17, s0
 800c1ee:	d63e      	bvs.n	800c26e <powf+0x9e>
 800c1f0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800c1f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1f8:	d112      	bne.n	800c220 <powf+0x50>
 800c1fa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c1fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c202:	d039      	beq.n	800c278 <powf+0xa8>
 800c204:	eeb0 0a48 	vmov.f32	s0, s16
 800c208:	f000 fd8f 	bl	800cd2a <finitef>
 800c20c:	b378      	cbz	r0, 800c26e <powf+0x9e>
 800c20e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c216:	d52a      	bpl.n	800c26e <powf+0x9e>
 800c218:	f7fd f9d6 	bl	80095c8 <__errno>
 800c21c:	2322      	movs	r3, #34	; 0x22
 800c21e:	e014      	b.n	800c24a <powf+0x7a>
 800c220:	f000 fd83 	bl	800cd2a <finitef>
 800c224:	b998      	cbnz	r0, 800c24e <powf+0x7e>
 800c226:	eeb0 0a49 	vmov.f32	s0, s18
 800c22a:	f000 fd7e 	bl	800cd2a <finitef>
 800c22e:	b170      	cbz	r0, 800c24e <powf+0x7e>
 800c230:	eeb0 0a48 	vmov.f32	s0, s16
 800c234:	f000 fd79 	bl	800cd2a <finitef>
 800c238:	b148      	cbz	r0, 800c24e <powf+0x7e>
 800c23a:	eef4 8a68 	vcmp.f32	s17, s17
 800c23e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c242:	d7e9      	bvc.n	800c218 <powf+0x48>
 800c244:	f7fd f9c0 	bl	80095c8 <__errno>
 800c248:	2321      	movs	r3, #33	; 0x21
 800c24a:	6003      	str	r3, [r0, #0]
 800c24c:	e00f      	b.n	800c26e <powf+0x9e>
 800c24e:	eef5 8a40 	vcmp.f32	s17, #0.0
 800c252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c256:	d10a      	bne.n	800c26e <powf+0x9e>
 800c258:	eeb0 0a49 	vmov.f32	s0, s18
 800c25c:	f000 fd65 	bl	800cd2a <finitef>
 800c260:	b128      	cbz	r0, 800c26e <powf+0x9e>
 800c262:	eeb0 0a48 	vmov.f32	s0, s16
 800c266:	f000 fd60 	bl	800cd2a <finitef>
 800c26a:	2800      	cmp	r0, #0
 800c26c:	d1d4      	bne.n	800c218 <powf+0x48>
 800c26e:	eeb0 0a68 	vmov.f32	s0, s17
 800c272:	ecbd 8b04 	vpop	{d8-d9}
 800c276:	bd08      	pop	{r3, pc}
 800c278:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800c27c:	e7f7      	b.n	800c26e <powf+0x9e>
	...

0800c280 <__ieee754_asinf>:
 800c280:	b538      	push	{r3, r4, r5, lr}
 800c282:	ee10 5a10 	vmov	r5, s0
 800c286:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800c28a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800c28e:	ed2d 8b04 	vpush	{d8-d9}
 800c292:	d10c      	bne.n	800c2ae <__ieee754_asinf+0x2e>
 800c294:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800c40c <__ieee754_asinf+0x18c>
 800c298:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800c410 <__ieee754_asinf+0x190>
 800c29c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c2a0:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c2a4:	eeb0 0a67 	vmov.f32	s0, s15
 800c2a8:	ecbd 8b04 	vpop	{d8-d9}
 800c2ac:	bd38      	pop	{r3, r4, r5, pc}
 800c2ae:	dd04      	ble.n	800c2ba <__ieee754_asinf+0x3a>
 800c2b0:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c2b4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800c2b8:	e7f6      	b.n	800c2a8 <__ieee754_asinf+0x28>
 800c2ba:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800c2be:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800c2c2:	da0b      	bge.n	800c2dc <__ieee754_asinf+0x5c>
 800c2c4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800c2c8:	da52      	bge.n	800c370 <__ieee754_asinf+0xf0>
 800c2ca:	eddf 7a52 	vldr	s15, [pc, #328]	; 800c414 <__ieee754_asinf+0x194>
 800c2ce:	ee70 7a27 	vadd.f32	s15, s0, s15
 800c2d2:	eef4 7ae8 	vcmpe.f32	s15, s17
 800c2d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2da:	dce5      	bgt.n	800c2a8 <__ieee754_asinf+0x28>
 800c2dc:	f000 fd1e 	bl	800cd1c <fabsf>
 800c2e0:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800c2e4:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800c2e8:	ee20 8a08 	vmul.f32	s16, s0, s16
 800c2ec:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800c418 <__ieee754_asinf+0x198>
 800c2f0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800c41c <__ieee754_asinf+0x19c>
 800c2f4:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800c420 <__ieee754_asinf+0x1a0>
 800c2f8:	eea8 7a27 	vfma.f32	s14, s16, s15
 800c2fc:	eddf 7a49 	vldr	s15, [pc, #292]	; 800c424 <__ieee754_asinf+0x1a4>
 800c300:	eee7 7a08 	vfma.f32	s15, s14, s16
 800c304:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800c428 <__ieee754_asinf+0x1a8>
 800c308:	eea7 7a88 	vfma.f32	s14, s15, s16
 800c30c:	eddf 7a47 	vldr	s15, [pc, #284]	; 800c42c <__ieee754_asinf+0x1ac>
 800c310:	eee7 7a08 	vfma.f32	s15, s14, s16
 800c314:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800c430 <__ieee754_asinf+0x1b0>
 800c318:	eea7 9a88 	vfma.f32	s18, s15, s16
 800c31c:	eddf 7a45 	vldr	s15, [pc, #276]	; 800c434 <__ieee754_asinf+0x1b4>
 800c320:	eee8 7a07 	vfma.f32	s15, s16, s14
 800c324:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800c438 <__ieee754_asinf+0x1b8>
 800c328:	eea7 7a88 	vfma.f32	s14, s15, s16
 800c32c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800c43c <__ieee754_asinf+0x1bc>
 800c330:	eee7 7a08 	vfma.f32	s15, s14, s16
 800c334:	eeb0 0a48 	vmov.f32	s0, s16
 800c338:	eee7 8a88 	vfma.f32	s17, s15, s16
 800c33c:	f000 fbf4 	bl	800cb28 <__ieee754_sqrtf>
 800c340:	4b3f      	ldr	r3, [pc, #252]	; (800c440 <__ieee754_asinf+0x1c0>)
 800c342:	ee29 9a08 	vmul.f32	s18, s18, s16
 800c346:	429c      	cmp	r4, r3
 800c348:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800c34c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c350:	dd3d      	ble.n	800c3ce <__ieee754_asinf+0x14e>
 800c352:	eea0 0a06 	vfma.f32	s0, s0, s12
 800c356:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800c444 <__ieee754_asinf+0x1c4>
 800c35a:	eee0 7a26 	vfma.f32	s15, s0, s13
 800c35e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800c410 <__ieee754_asinf+0x190>
 800c362:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c366:	2d00      	cmp	r5, #0
 800c368:	bfd8      	it	le
 800c36a:	eeb1 0a40 	vnegle.f32	s0, s0
 800c36e:	e79b      	b.n	800c2a8 <__ieee754_asinf+0x28>
 800c370:	ee60 7a00 	vmul.f32	s15, s0, s0
 800c374:	eddf 6a28 	vldr	s13, [pc, #160]	; 800c418 <__ieee754_asinf+0x198>
 800c378:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800c41c <__ieee754_asinf+0x19c>
 800c37c:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800c430 <__ieee754_asinf+0x1b0>
 800c380:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800c384:	eddf 6a27 	vldr	s13, [pc, #156]	; 800c424 <__ieee754_asinf+0x1a4>
 800c388:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c38c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800c428 <__ieee754_asinf+0x1a8>
 800c390:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c394:	eddf 6a25 	vldr	s13, [pc, #148]	; 800c42c <__ieee754_asinf+0x1ac>
 800c398:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c39c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800c420 <__ieee754_asinf+0x1a0>
 800c3a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c3a4:	eddf 6a23 	vldr	s13, [pc, #140]	; 800c434 <__ieee754_asinf+0x1b4>
 800c3a8:	eee7 6a86 	vfma.f32	s13, s15, s12
 800c3ac:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800c438 <__ieee754_asinf+0x1b8>
 800c3b0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800c3b4:	eddf 6a21 	vldr	s13, [pc, #132]	; 800c43c <__ieee754_asinf+0x1bc>
 800c3b8:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c3bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c3c0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800c3c4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800c3c8:	eea0 0a27 	vfma.f32	s0, s0, s15
 800c3cc:	e76c      	b.n	800c2a8 <__ieee754_asinf+0x28>
 800c3ce:	ee10 3a10 	vmov	r3, s0
 800c3d2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c3d6:	f023 030f 	bic.w	r3, r3, #15
 800c3da:	ee07 3a10 	vmov	s14, r3
 800c3de:	eea7 8a47 	vfms.f32	s16, s14, s14
 800c3e2:	ee70 7a07 	vadd.f32	s15, s0, s14
 800c3e6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c3ea:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800c3ee:	eddf 7a07 	vldr	s15, [pc, #28]	; 800c40c <__ieee754_asinf+0x18c>
 800c3f2:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800c3f6:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800c3fa:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800c448 <__ieee754_asinf+0x1c8>
 800c3fe:	eeb0 6a40 	vmov.f32	s12, s0
 800c402:	eea7 6a66 	vfms.f32	s12, s14, s13
 800c406:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800c40a:	e7aa      	b.n	800c362 <__ieee754_asinf+0xe2>
 800c40c:	b33bbd2e 	.word	0xb33bbd2e
 800c410:	3fc90fdb 	.word	0x3fc90fdb
 800c414:	7149f2ca 	.word	0x7149f2ca
 800c418:	3811ef08 	.word	0x3811ef08
 800c41c:	3a4f7f04 	.word	0x3a4f7f04
 800c420:	3e2aaaab 	.word	0x3e2aaaab
 800c424:	bd241146 	.word	0xbd241146
 800c428:	3e4e0aa8 	.word	0x3e4e0aa8
 800c42c:	bea6b090 	.word	0xbea6b090
 800c430:	3d9dc62e 	.word	0x3d9dc62e
 800c434:	bf303361 	.word	0xbf303361
 800c438:	4001572d 	.word	0x4001572d
 800c43c:	c019d139 	.word	0xc019d139
 800c440:	3f799999 	.word	0x3f799999
 800c444:	333bbd2e 	.word	0x333bbd2e
 800c448:	3f490fdb 	.word	0x3f490fdb

0800c44c <__ieee754_atan2f>:
 800c44c:	ee10 2a90 	vmov	r2, s1
 800c450:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800c454:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c458:	b510      	push	{r4, lr}
 800c45a:	eef0 7a40 	vmov.f32	s15, s0
 800c45e:	dc06      	bgt.n	800c46e <__ieee754_atan2f+0x22>
 800c460:	ee10 0a10 	vmov	r0, s0
 800c464:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800c468:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c46c:	dd04      	ble.n	800c478 <__ieee754_atan2f+0x2c>
 800c46e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800c472:	eeb0 0a67 	vmov.f32	s0, s15
 800c476:	bd10      	pop	{r4, pc}
 800c478:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800c47c:	d103      	bne.n	800c486 <__ieee754_atan2f+0x3a>
 800c47e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c482:	f000 bb77 	b.w	800cb74 <atanf>
 800c486:	1794      	asrs	r4, r2, #30
 800c488:	f004 0402 	and.w	r4, r4, #2
 800c48c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800c490:	b943      	cbnz	r3, 800c4a4 <__ieee754_atan2f+0x58>
 800c492:	2c02      	cmp	r4, #2
 800c494:	d05e      	beq.n	800c554 <__ieee754_atan2f+0x108>
 800c496:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800c568 <__ieee754_atan2f+0x11c>
 800c49a:	2c03      	cmp	r4, #3
 800c49c:	bf08      	it	eq
 800c49e:	eef0 7a47 	vmoveq.f32	s15, s14
 800c4a2:	e7e6      	b.n	800c472 <__ieee754_atan2f+0x26>
 800c4a4:	b941      	cbnz	r1, 800c4b8 <__ieee754_atan2f+0x6c>
 800c4a6:	eddf 7a31 	vldr	s15, [pc, #196]	; 800c56c <__ieee754_atan2f+0x120>
 800c4aa:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800c570 <__ieee754_atan2f+0x124>
 800c4ae:	2800      	cmp	r0, #0
 800c4b0:	bfb8      	it	lt
 800c4b2:	eef0 7a40 	vmovlt.f32	s15, s0
 800c4b6:	e7dc      	b.n	800c472 <__ieee754_atan2f+0x26>
 800c4b8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c4bc:	d110      	bne.n	800c4e0 <__ieee754_atan2f+0x94>
 800c4be:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c4c2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800c4c6:	d107      	bne.n	800c4d8 <__ieee754_atan2f+0x8c>
 800c4c8:	2c02      	cmp	r4, #2
 800c4ca:	d846      	bhi.n	800c55a <__ieee754_atan2f+0x10e>
 800c4cc:	4b29      	ldr	r3, [pc, #164]	; (800c574 <__ieee754_atan2f+0x128>)
 800c4ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c4d2:	edd4 7a00 	vldr	s15, [r4]
 800c4d6:	e7cc      	b.n	800c472 <__ieee754_atan2f+0x26>
 800c4d8:	2c02      	cmp	r4, #2
 800c4da:	d841      	bhi.n	800c560 <__ieee754_atan2f+0x114>
 800c4dc:	4b26      	ldr	r3, [pc, #152]	; (800c578 <__ieee754_atan2f+0x12c>)
 800c4de:	e7f6      	b.n	800c4ce <__ieee754_atan2f+0x82>
 800c4e0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c4e4:	d0df      	beq.n	800c4a6 <__ieee754_atan2f+0x5a>
 800c4e6:	1a5b      	subs	r3, r3, r1
 800c4e8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800c4ec:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800c4f0:	da1a      	bge.n	800c528 <__ieee754_atan2f+0xdc>
 800c4f2:	2a00      	cmp	r2, #0
 800c4f4:	da01      	bge.n	800c4fa <__ieee754_atan2f+0xae>
 800c4f6:	313c      	adds	r1, #60	; 0x3c
 800c4f8:	db19      	blt.n	800c52e <__ieee754_atan2f+0xe2>
 800c4fa:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800c4fe:	f000 fc0d 	bl	800cd1c <fabsf>
 800c502:	f000 fb37 	bl	800cb74 <atanf>
 800c506:	eef0 7a40 	vmov.f32	s15, s0
 800c50a:	2c01      	cmp	r4, #1
 800c50c:	d012      	beq.n	800c534 <__ieee754_atan2f+0xe8>
 800c50e:	2c02      	cmp	r4, #2
 800c510:	d017      	beq.n	800c542 <__ieee754_atan2f+0xf6>
 800c512:	2c00      	cmp	r4, #0
 800c514:	d0ad      	beq.n	800c472 <__ieee754_atan2f+0x26>
 800c516:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800c57c <__ieee754_atan2f+0x130>
 800c51a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c51e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800c580 <__ieee754_atan2f+0x134>
 800c522:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c526:	e7a4      	b.n	800c472 <__ieee754_atan2f+0x26>
 800c528:	eddf 7a10 	vldr	s15, [pc, #64]	; 800c56c <__ieee754_atan2f+0x120>
 800c52c:	e7ed      	b.n	800c50a <__ieee754_atan2f+0xbe>
 800c52e:	eddf 7a15 	vldr	s15, [pc, #84]	; 800c584 <__ieee754_atan2f+0x138>
 800c532:	e7ea      	b.n	800c50a <__ieee754_atan2f+0xbe>
 800c534:	ee17 3a90 	vmov	r3, s15
 800c538:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c53c:	ee07 3a90 	vmov	s15, r3
 800c540:	e797      	b.n	800c472 <__ieee754_atan2f+0x26>
 800c542:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800c57c <__ieee754_atan2f+0x130>
 800c546:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c54a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800c580 <__ieee754_atan2f+0x134>
 800c54e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c552:	e78e      	b.n	800c472 <__ieee754_atan2f+0x26>
 800c554:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800c580 <__ieee754_atan2f+0x134>
 800c558:	e78b      	b.n	800c472 <__ieee754_atan2f+0x26>
 800c55a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800c588 <__ieee754_atan2f+0x13c>
 800c55e:	e788      	b.n	800c472 <__ieee754_atan2f+0x26>
 800c560:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c584 <__ieee754_atan2f+0x138>
 800c564:	e785      	b.n	800c472 <__ieee754_atan2f+0x26>
 800c566:	bf00      	nop
 800c568:	c0490fdb 	.word	0xc0490fdb
 800c56c:	3fc90fdb 	.word	0x3fc90fdb
 800c570:	bfc90fdb 	.word	0xbfc90fdb
 800c574:	0800d34c 	.word	0x0800d34c
 800c578:	0800d358 	.word	0x0800d358
 800c57c:	33bbbd2e 	.word	0x33bbbd2e
 800c580:	40490fdb 	.word	0x40490fdb
 800c584:	00000000 	.word	0x00000000
 800c588:	3f490fdb 	.word	0x3f490fdb

0800c58c <__ieee754_powf>:
 800c58c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c590:	ee10 4a90 	vmov	r4, s1
 800c594:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800c598:	ed2d 8b02 	vpush	{d8}
 800c59c:	ee10 6a10 	vmov	r6, s0
 800c5a0:	eeb0 8a40 	vmov.f32	s16, s0
 800c5a4:	eef0 8a60 	vmov.f32	s17, s1
 800c5a8:	d10c      	bne.n	800c5c4 <__ieee754_powf+0x38>
 800c5aa:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800c5ae:	0076      	lsls	r6, r6, #1
 800c5b0:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800c5b4:	f240 8296 	bls.w	800cae4 <__ieee754_powf+0x558>
 800c5b8:	ee38 0a28 	vadd.f32	s0, s16, s17
 800c5bc:	ecbd 8b02 	vpop	{d8}
 800c5c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5c4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800c5c8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c5cc:	dcf4      	bgt.n	800c5b8 <__ieee754_powf+0x2c>
 800c5ce:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800c5d2:	dd08      	ble.n	800c5e6 <__ieee754_powf+0x5a>
 800c5d4:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800c5d8:	d1ee      	bne.n	800c5b8 <__ieee754_powf+0x2c>
 800c5da:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800c5de:	0064      	lsls	r4, r4, #1
 800c5e0:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800c5e4:	e7e6      	b.n	800c5b4 <__ieee754_powf+0x28>
 800c5e6:	2e00      	cmp	r6, #0
 800c5e8:	da20      	bge.n	800c62c <__ieee754_powf+0xa0>
 800c5ea:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800c5ee:	da2d      	bge.n	800c64c <__ieee754_powf+0xc0>
 800c5f0:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800c5f4:	f2c0 827f 	blt.w	800caf6 <__ieee754_powf+0x56a>
 800c5f8:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800c5fc:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800c600:	fa48 f703 	asr.w	r7, r8, r3
 800c604:	fa07 f303 	lsl.w	r3, r7, r3
 800c608:	4543      	cmp	r3, r8
 800c60a:	f040 8274 	bne.w	800caf6 <__ieee754_powf+0x56a>
 800c60e:	f007 0701 	and.w	r7, r7, #1
 800c612:	f1c7 0702 	rsb	r7, r7, #2
 800c616:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800c61a:	d11f      	bne.n	800c65c <__ieee754_powf+0xd0>
 800c61c:	2c00      	cmp	r4, #0
 800c61e:	f280 8267 	bge.w	800caf0 <__ieee754_powf+0x564>
 800c622:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c626:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800c62a:	e7c7      	b.n	800c5bc <__ieee754_powf+0x30>
 800c62c:	2700      	movs	r7, #0
 800c62e:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800c632:	d1f0      	bne.n	800c616 <__ieee754_powf+0x8a>
 800c634:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800c638:	f000 8254 	beq.w	800cae4 <__ieee754_powf+0x558>
 800c63c:	dd08      	ble.n	800c650 <__ieee754_powf+0xc4>
 800c63e:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800c948 <__ieee754_powf+0x3bc>
 800c642:	2c00      	cmp	r4, #0
 800c644:	bfa8      	it	ge
 800c646:	eeb0 0a68 	vmovge.f32	s0, s17
 800c64a:	e7b7      	b.n	800c5bc <__ieee754_powf+0x30>
 800c64c:	2702      	movs	r7, #2
 800c64e:	e7ee      	b.n	800c62e <__ieee754_powf+0xa2>
 800c650:	2c00      	cmp	r4, #0
 800c652:	f280 824a 	bge.w	800caea <__ieee754_powf+0x55e>
 800c656:	eeb1 0a68 	vneg.f32	s0, s17
 800c65a:	e7af      	b.n	800c5bc <__ieee754_powf+0x30>
 800c65c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800c660:	d102      	bne.n	800c668 <__ieee754_powf+0xdc>
 800c662:	ee28 0a08 	vmul.f32	s0, s16, s16
 800c666:	e7a9      	b.n	800c5bc <__ieee754_powf+0x30>
 800c668:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800c66c:	eeb0 0a48 	vmov.f32	s0, s16
 800c670:	d107      	bne.n	800c682 <__ieee754_powf+0xf6>
 800c672:	2e00      	cmp	r6, #0
 800c674:	db05      	blt.n	800c682 <__ieee754_powf+0xf6>
 800c676:	ecbd 8b02 	vpop	{d8}
 800c67a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c67e:	f000 ba53 	b.w	800cb28 <__ieee754_sqrtf>
 800c682:	f000 fb4b 	bl	800cd1c <fabsf>
 800c686:	b125      	cbz	r5, 800c692 <__ieee754_powf+0x106>
 800c688:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800c68c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800c690:	d116      	bne.n	800c6c0 <__ieee754_powf+0x134>
 800c692:	2c00      	cmp	r4, #0
 800c694:	bfbc      	itt	lt
 800c696:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800c69a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800c69e:	2e00      	cmp	r6, #0
 800c6a0:	da8c      	bge.n	800c5bc <__ieee754_powf+0x30>
 800c6a2:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800c6a6:	ea55 0307 	orrs.w	r3, r5, r7
 800c6aa:	d104      	bne.n	800c6b6 <__ieee754_powf+0x12a>
 800c6ac:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c6b0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800c6b4:	e782      	b.n	800c5bc <__ieee754_powf+0x30>
 800c6b6:	2f01      	cmp	r7, #1
 800c6b8:	d180      	bne.n	800c5bc <__ieee754_powf+0x30>
 800c6ba:	eeb1 0a40 	vneg.f32	s0, s0
 800c6be:	e77d      	b.n	800c5bc <__ieee754_powf+0x30>
 800c6c0:	0ff0      	lsrs	r0, r6, #31
 800c6c2:	3801      	subs	r0, #1
 800c6c4:	ea57 0300 	orrs.w	r3, r7, r0
 800c6c8:	d104      	bne.n	800c6d4 <__ieee754_powf+0x148>
 800c6ca:	ee38 8a48 	vsub.f32	s16, s16, s16
 800c6ce:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800c6d2:	e773      	b.n	800c5bc <__ieee754_powf+0x30>
 800c6d4:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800c6d8:	dd74      	ble.n	800c7c4 <__ieee754_powf+0x238>
 800c6da:	4b9c      	ldr	r3, [pc, #624]	; (800c94c <__ieee754_powf+0x3c0>)
 800c6dc:	429d      	cmp	r5, r3
 800c6de:	dc08      	bgt.n	800c6f2 <__ieee754_powf+0x166>
 800c6e0:	2c00      	cmp	r4, #0
 800c6e2:	da0b      	bge.n	800c6fc <__ieee754_powf+0x170>
 800c6e4:	2000      	movs	r0, #0
 800c6e6:	ecbd 8b02 	vpop	{d8}
 800c6ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ee:	f000 ba3b 	b.w	800cb68 <__math_oflowf>
 800c6f2:	4b97      	ldr	r3, [pc, #604]	; (800c950 <__ieee754_powf+0x3c4>)
 800c6f4:	429d      	cmp	r5, r3
 800c6f6:	dd08      	ble.n	800c70a <__ieee754_powf+0x17e>
 800c6f8:	2c00      	cmp	r4, #0
 800c6fa:	dcf3      	bgt.n	800c6e4 <__ieee754_powf+0x158>
 800c6fc:	2000      	movs	r0, #0
 800c6fe:	ecbd 8b02 	vpop	{d8}
 800c702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c706:	f000 ba29 	b.w	800cb5c <__math_uflowf>
 800c70a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c70e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c712:	eddf 6a90 	vldr	s13, [pc, #576]	; 800c954 <__ieee754_powf+0x3c8>
 800c716:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800c71a:	eee0 6a67 	vfms.f32	s13, s0, s15
 800c71e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c722:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800c726:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c72a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c72e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800c958 <__ieee754_powf+0x3cc>
 800c732:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800c736:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800c95c <__ieee754_powf+0x3d0>
 800c73a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c73e:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800c960 <__ieee754_powf+0x3d4>
 800c742:	eef0 6a67 	vmov.f32	s13, s15
 800c746:	eee0 6a07 	vfma.f32	s13, s0, s14
 800c74a:	ee16 3a90 	vmov	r3, s13
 800c74e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c752:	f023 030f 	bic.w	r3, r3, #15
 800c756:	ee00 3a90 	vmov	s1, r3
 800c75a:	eee0 0a47 	vfms.f32	s1, s0, s14
 800c75e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c762:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800c766:	f024 040f 	bic.w	r4, r4, #15
 800c76a:	ee07 4a10 	vmov	s14, r4
 800c76e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800c772:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800c776:	ee07 3a90 	vmov	s15, r3
 800c77a:	eee7 0a27 	vfma.f32	s1, s14, s15
 800c77e:	3f01      	subs	r7, #1
 800c780:	ea57 0200 	orrs.w	r2, r7, r0
 800c784:	ee07 4a10 	vmov	s14, r4
 800c788:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c78c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800c790:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800c794:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800c798:	ee17 4a10 	vmov	r4, s14
 800c79c:	bf08      	it	eq
 800c79e:	eeb0 8a40 	vmoveq.f32	s16, s0
 800c7a2:	2c00      	cmp	r4, #0
 800c7a4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c7a8:	f340 817e 	ble.w	800caa8 <__ieee754_powf+0x51c>
 800c7ac:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800c7b0:	f340 80f8 	ble.w	800c9a4 <__ieee754_powf+0x418>
 800c7b4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c7b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7bc:	bf4c      	ite	mi
 800c7be:	2001      	movmi	r0, #1
 800c7c0:	2000      	movpl	r0, #0
 800c7c2:	e790      	b.n	800c6e6 <__ieee754_powf+0x15a>
 800c7c4:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800c7c8:	bf01      	itttt	eq
 800c7ca:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800c964 <__ieee754_powf+0x3d8>
 800c7ce:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800c7d2:	f06f 0217 	mvneq.w	r2, #23
 800c7d6:	ee17 5a90 	vmoveq	r5, s15
 800c7da:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800c7de:	bf18      	it	ne
 800c7e0:	2200      	movne	r2, #0
 800c7e2:	3b7f      	subs	r3, #127	; 0x7f
 800c7e4:	4413      	add	r3, r2
 800c7e6:	4a60      	ldr	r2, [pc, #384]	; (800c968 <__ieee754_powf+0x3dc>)
 800c7e8:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800c7ec:	4295      	cmp	r5, r2
 800c7ee:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800c7f2:	dd06      	ble.n	800c802 <__ieee754_powf+0x276>
 800c7f4:	4a5d      	ldr	r2, [pc, #372]	; (800c96c <__ieee754_powf+0x3e0>)
 800c7f6:	4295      	cmp	r5, r2
 800c7f8:	f340 80a4 	ble.w	800c944 <__ieee754_powf+0x3b8>
 800c7fc:	3301      	adds	r3, #1
 800c7fe:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800c802:	2500      	movs	r5, #0
 800c804:	4a5a      	ldr	r2, [pc, #360]	; (800c970 <__ieee754_powf+0x3e4>)
 800c806:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800c80a:	ee07 1a90 	vmov	s15, r1
 800c80e:	ed92 7a00 	vldr	s14, [r2]
 800c812:	4a58      	ldr	r2, [pc, #352]	; (800c974 <__ieee754_powf+0x3e8>)
 800c814:	ee37 6a27 	vadd.f32	s12, s14, s15
 800c818:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800c81c:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800c820:	1049      	asrs	r1, r1, #1
 800c822:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800c826:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800c82a:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800c82e:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800c832:	ee06 1a10 	vmov	s12, r1
 800c836:	ee65 4a26 	vmul.f32	s9, s10, s13
 800c83a:	ee36 7a47 	vsub.f32	s14, s12, s14
 800c83e:	ee14 6a90 	vmov	r6, s9
 800c842:	4016      	ands	r6, r2
 800c844:	ee05 6a90 	vmov	s11, r6
 800c848:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800c84c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c850:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800c978 <__ieee754_powf+0x3ec>
 800c854:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800c858:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800c85c:	ee25 6a26 	vmul.f32	s12, s10, s13
 800c860:	eddf 6a46 	vldr	s13, [pc, #280]	; 800c97c <__ieee754_powf+0x3f0>
 800c864:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800c868:	eddf 6a45 	vldr	s13, [pc, #276]	; 800c980 <__ieee754_powf+0x3f4>
 800c86c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c870:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800c954 <__ieee754_powf+0x3c8>
 800c874:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c878:	eddf 6a42 	vldr	s13, [pc, #264]	; 800c984 <__ieee754_powf+0x3f8>
 800c87c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c880:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800c988 <__ieee754_powf+0x3fc>
 800c884:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c888:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800c88c:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800c890:	ee66 6a86 	vmul.f32	s13, s13, s12
 800c894:	eee5 6a07 	vfma.f32	s13, s10, s14
 800c898:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800c89c:	eef0 7a45 	vmov.f32	s15, s10
 800c8a0:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800c8a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8a8:	ee17 1a90 	vmov	r1, s15
 800c8ac:	4011      	ands	r1, r2
 800c8ae:	ee07 1a90 	vmov	s15, r1
 800c8b2:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800c8b6:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800c8ba:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c8be:	ee27 7a24 	vmul.f32	s14, s14, s9
 800c8c2:	eea6 7a27 	vfma.f32	s14, s12, s15
 800c8c6:	eeb0 6a47 	vmov.f32	s12, s14
 800c8ca:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800c8ce:	ee16 1a10 	vmov	r1, s12
 800c8d2:	4011      	ands	r1, r2
 800c8d4:	ee06 1a90 	vmov	s13, r1
 800c8d8:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800c8dc:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800c98c <__ieee754_powf+0x400>
 800c8e0:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800c990 <__ieee754_powf+0x404>
 800c8e4:	ee37 7a66 	vsub.f32	s14, s14, s13
 800c8e8:	ee06 1a10 	vmov	s12, r1
 800c8ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8f0:	eddf 7a28 	vldr	s15, [pc, #160]	; 800c994 <__ieee754_powf+0x408>
 800c8f4:	4928      	ldr	r1, [pc, #160]	; (800c998 <__ieee754_powf+0x40c>)
 800c8f6:	eea6 7a27 	vfma.f32	s14, s12, s15
 800c8fa:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800c8fe:	edd1 7a00 	vldr	s15, [r1]
 800c902:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c906:	ee07 3a90 	vmov	s15, r3
 800c90a:	4b24      	ldr	r3, [pc, #144]	; (800c99c <__ieee754_powf+0x410>)
 800c90c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c910:	eef0 7a47 	vmov.f32	s15, s14
 800c914:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c918:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800c91c:	edd5 0a00 	vldr	s1, [r5]
 800c920:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800c924:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c928:	ee17 3a90 	vmov	r3, s15
 800c92c:	4013      	ands	r3, r2
 800c92e:	ee07 3a90 	vmov	s15, r3
 800c932:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800c936:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800c93a:	eee6 6a65 	vfms.f32	s13, s12, s11
 800c93e:	ee77 7a66 	vsub.f32	s15, s14, s13
 800c942:	e70e      	b.n	800c762 <__ieee754_powf+0x1d6>
 800c944:	2501      	movs	r5, #1
 800c946:	e75d      	b.n	800c804 <__ieee754_powf+0x278>
 800c948:	00000000 	.word	0x00000000
 800c94c:	3f7ffff3 	.word	0x3f7ffff3
 800c950:	3f800007 	.word	0x3f800007
 800c954:	3eaaaaab 	.word	0x3eaaaaab
 800c958:	3fb8aa3b 	.word	0x3fb8aa3b
 800c95c:	36eca570 	.word	0x36eca570
 800c960:	3fb8aa00 	.word	0x3fb8aa00
 800c964:	4b800000 	.word	0x4b800000
 800c968:	001cc471 	.word	0x001cc471
 800c96c:	005db3d6 	.word	0x005db3d6
 800c970:	0800d364 	.word	0x0800d364
 800c974:	fffff000 	.word	0xfffff000
 800c978:	3e6c3255 	.word	0x3e6c3255
 800c97c:	3e53f142 	.word	0x3e53f142
 800c980:	3e8ba305 	.word	0x3e8ba305
 800c984:	3edb6db7 	.word	0x3edb6db7
 800c988:	3f19999a 	.word	0x3f19999a
 800c98c:	3f76384f 	.word	0x3f76384f
 800c990:	3f763800 	.word	0x3f763800
 800c994:	369dc3a0 	.word	0x369dc3a0
 800c998:	0800d374 	.word	0x0800d374
 800c99c:	0800d36c 	.word	0x0800d36c
 800c9a0:	3338aa3c 	.word	0x3338aa3c
 800c9a4:	f040 8095 	bne.w	800cad2 <__ieee754_powf+0x546>
 800c9a8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800c9a0 <__ieee754_powf+0x414>
 800c9ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c9b0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800c9b4:	eef4 6ac7 	vcmpe.f32	s13, s14
 800c9b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9bc:	f73f aefa 	bgt.w	800c7b4 <__ieee754_powf+0x228>
 800c9c0:	15db      	asrs	r3, r3, #23
 800c9c2:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800c9c6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c9ca:	4103      	asrs	r3, r0
 800c9cc:	4423      	add	r3, r4
 800c9ce:	494b      	ldr	r1, [pc, #300]	; (800cafc <__ieee754_powf+0x570>)
 800c9d0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c9d4:	3a7f      	subs	r2, #127	; 0x7f
 800c9d6:	4111      	asrs	r1, r2
 800c9d8:	ea23 0101 	bic.w	r1, r3, r1
 800c9dc:	ee07 1a10 	vmov	s14, r1
 800c9e0:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800c9e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800c9e8:	f1c2 0217 	rsb	r2, r2, #23
 800c9ec:	4110      	asrs	r0, r2
 800c9ee:	2c00      	cmp	r4, #0
 800c9f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c9f4:	bfb8      	it	lt
 800c9f6:	4240      	neglt	r0, r0
 800c9f8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800c9fc:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800cb00 <__ieee754_powf+0x574>
 800ca00:	eddf 6a40 	vldr	s13, [pc, #256]	; 800cb04 <__ieee754_powf+0x578>
 800ca04:	ee17 3a10 	vmov	r3, s14
 800ca08:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ca0c:	f023 030f 	bic.w	r3, r3, #15
 800ca10:	ee07 3a10 	vmov	s14, r3
 800ca14:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca18:	ee27 0a00 	vmul.f32	s0, s14, s0
 800ca1c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800ca20:	eddf 7a39 	vldr	s15, [pc, #228]	; 800cb08 <__ieee754_powf+0x57c>
 800ca24:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800ca28:	eef0 7a40 	vmov.f32	s15, s0
 800ca2c:	eee7 7a26 	vfma.f32	s15, s14, s13
 800ca30:	eeb0 6a67 	vmov.f32	s12, s15
 800ca34:	eea7 6a66 	vfms.f32	s12, s14, s13
 800ca38:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800ca3c:	ee30 0a46 	vsub.f32	s0, s0, s12
 800ca40:	eddf 6a32 	vldr	s13, [pc, #200]	; 800cb0c <__ieee754_powf+0x580>
 800ca44:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800cb10 <__ieee754_powf+0x584>
 800ca48:	eee7 6a06 	vfma.f32	s13, s14, s12
 800ca4c:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800cb14 <__ieee754_powf+0x588>
 800ca50:	eea6 6a87 	vfma.f32	s12, s13, s14
 800ca54:	eddf 6a30 	vldr	s13, [pc, #192]	; 800cb18 <__ieee754_powf+0x58c>
 800ca58:	eee6 6a07 	vfma.f32	s13, s12, s14
 800ca5c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800cb1c <__ieee754_powf+0x590>
 800ca60:	eea6 6a87 	vfma.f32	s12, s13, s14
 800ca64:	eef0 6a67 	vmov.f32	s13, s15
 800ca68:	eee6 6a47 	vfms.f32	s13, s12, s14
 800ca6c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ca70:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800ca74:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800ca78:	eea7 0a80 	vfma.f32	s0, s15, s0
 800ca7c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800ca80:	ee37 0a40 	vsub.f32	s0, s14, s0
 800ca84:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ca88:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ca8c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ca90:	ee10 3a10 	vmov	r3, s0
 800ca94:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800ca98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ca9c:	da1f      	bge.n	800cade <__ieee754_powf+0x552>
 800ca9e:	f000 f957 	bl	800cd50 <scalbnf>
 800caa2:	ee20 0a08 	vmul.f32	s0, s0, s16
 800caa6:	e589      	b.n	800c5bc <__ieee754_powf+0x30>
 800caa8:	4a1d      	ldr	r2, [pc, #116]	; (800cb20 <__ieee754_powf+0x594>)
 800caaa:	4293      	cmp	r3, r2
 800caac:	dd07      	ble.n	800cabe <__ieee754_powf+0x532>
 800caae:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800cab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cab6:	bf4c      	ite	mi
 800cab8:	2001      	movmi	r0, #1
 800caba:	2000      	movpl	r0, #0
 800cabc:	e61f      	b.n	800c6fe <__ieee754_powf+0x172>
 800cabe:	d108      	bne.n	800cad2 <__ieee754_powf+0x546>
 800cac0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cac4:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800cac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cacc:	f6ff af78 	blt.w	800c9c0 <__ieee754_powf+0x434>
 800cad0:	e7ed      	b.n	800caae <__ieee754_powf+0x522>
 800cad2:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800cad6:	f73f af73 	bgt.w	800c9c0 <__ieee754_powf+0x434>
 800cada:	2000      	movs	r0, #0
 800cadc:	e78c      	b.n	800c9f8 <__ieee754_powf+0x46c>
 800cade:	ee00 3a10 	vmov	s0, r3
 800cae2:	e7de      	b.n	800caa2 <__ieee754_powf+0x516>
 800cae4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800cae8:	e568      	b.n	800c5bc <__ieee754_powf+0x30>
 800caea:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800cb24 <__ieee754_powf+0x598>
 800caee:	e565      	b.n	800c5bc <__ieee754_powf+0x30>
 800caf0:	eeb0 0a48 	vmov.f32	s0, s16
 800caf4:	e562      	b.n	800c5bc <__ieee754_powf+0x30>
 800caf6:	2700      	movs	r7, #0
 800caf8:	e58d      	b.n	800c616 <__ieee754_powf+0x8a>
 800cafa:	bf00      	nop
 800cafc:	007fffff 	.word	0x007fffff
 800cb00:	35bfbe8c 	.word	0x35bfbe8c
 800cb04:	3f317200 	.word	0x3f317200
 800cb08:	3f317218 	.word	0x3f317218
 800cb0c:	b5ddea0e 	.word	0xb5ddea0e
 800cb10:	3331bb4c 	.word	0x3331bb4c
 800cb14:	388ab355 	.word	0x388ab355
 800cb18:	bb360b61 	.word	0xbb360b61
 800cb1c:	3e2aaaab 	.word	0x3e2aaaab
 800cb20:	43160000 	.word	0x43160000
 800cb24:	00000000 	.word	0x00000000

0800cb28 <__ieee754_sqrtf>:
 800cb28:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800cb2c:	4770      	bx	lr

0800cb2e <with_errnof>:
 800cb2e:	b513      	push	{r0, r1, r4, lr}
 800cb30:	4604      	mov	r4, r0
 800cb32:	ed8d 0a01 	vstr	s0, [sp, #4]
 800cb36:	f7fc fd47 	bl	80095c8 <__errno>
 800cb3a:	ed9d 0a01 	vldr	s0, [sp, #4]
 800cb3e:	6004      	str	r4, [r0, #0]
 800cb40:	b002      	add	sp, #8
 800cb42:	bd10      	pop	{r4, pc}

0800cb44 <xflowf>:
 800cb44:	b130      	cbz	r0, 800cb54 <xflowf+0x10>
 800cb46:	eef1 7a40 	vneg.f32	s15, s0
 800cb4a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800cb4e:	2022      	movs	r0, #34	; 0x22
 800cb50:	f7ff bfed 	b.w	800cb2e <with_errnof>
 800cb54:	eef0 7a40 	vmov.f32	s15, s0
 800cb58:	e7f7      	b.n	800cb4a <xflowf+0x6>
	...

0800cb5c <__math_uflowf>:
 800cb5c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cb64 <__math_uflowf+0x8>
 800cb60:	f7ff bff0 	b.w	800cb44 <xflowf>
 800cb64:	10000000 	.word	0x10000000

0800cb68 <__math_oflowf>:
 800cb68:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cb70 <__math_oflowf+0x8>
 800cb6c:	f7ff bfea 	b.w	800cb44 <xflowf>
 800cb70:	70000000 	.word	0x70000000

0800cb74 <atanf>:
 800cb74:	b538      	push	{r3, r4, r5, lr}
 800cb76:	ee10 5a10 	vmov	r5, s0
 800cb7a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800cb7e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800cb82:	eef0 7a40 	vmov.f32	s15, s0
 800cb86:	db10      	blt.n	800cbaa <atanf+0x36>
 800cb88:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800cb8c:	dd04      	ble.n	800cb98 <atanf+0x24>
 800cb8e:	ee70 7a00 	vadd.f32	s15, s0, s0
 800cb92:	eeb0 0a67 	vmov.f32	s0, s15
 800cb96:	bd38      	pop	{r3, r4, r5, pc}
 800cb98:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800ccd0 <atanf+0x15c>
 800cb9c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800ccd4 <atanf+0x160>
 800cba0:	2d00      	cmp	r5, #0
 800cba2:	bfd8      	it	le
 800cba4:	eef0 7a40 	vmovle.f32	s15, s0
 800cba8:	e7f3      	b.n	800cb92 <atanf+0x1e>
 800cbaa:	4b4b      	ldr	r3, [pc, #300]	; (800ccd8 <atanf+0x164>)
 800cbac:	429c      	cmp	r4, r3
 800cbae:	dc10      	bgt.n	800cbd2 <atanf+0x5e>
 800cbb0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800cbb4:	da0a      	bge.n	800cbcc <atanf+0x58>
 800cbb6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800ccdc <atanf+0x168>
 800cbba:	ee30 7a07 	vadd.f32	s14, s0, s14
 800cbbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbc2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800cbc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbca:	dce2      	bgt.n	800cb92 <atanf+0x1e>
 800cbcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cbd0:	e013      	b.n	800cbfa <atanf+0x86>
 800cbd2:	f000 f8a3 	bl	800cd1c <fabsf>
 800cbd6:	4b42      	ldr	r3, [pc, #264]	; (800cce0 <atanf+0x16c>)
 800cbd8:	429c      	cmp	r4, r3
 800cbda:	dc4f      	bgt.n	800cc7c <atanf+0x108>
 800cbdc:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800cbe0:	429c      	cmp	r4, r3
 800cbe2:	dc41      	bgt.n	800cc68 <atanf+0xf4>
 800cbe4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800cbe8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800cbec:	eea0 7a27 	vfma.f32	s14, s0, s15
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cbf6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cbfa:	1c5a      	adds	r2, r3, #1
 800cbfc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800cc00:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800cce4 <atanf+0x170>
 800cc04:	eddf 5a38 	vldr	s11, [pc, #224]	; 800cce8 <atanf+0x174>
 800cc08:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800ccec <atanf+0x178>
 800cc0c:	ee66 6a06 	vmul.f32	s13, s12, s12
 800cc10:	eee6 5a87 	vfma.f32	s11, s13, s14
 800cc14:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800ccf0 <atanf+0x17c>
 800cc18:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800cc1c:	eddf 5a35 	vldr	s11, [pc, #212]	; 800ccf4 <atanf+0x180>
 800cc20:	eee7 5a26 	vfma.f32	s11, s14, s13
 800cc24:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800ccf8 <atanf+0x184>
 800cc28:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800cc2c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ccfc <atanf+0x188>
 800cc30:	eee7 5a26 	vfma.f32	s11, s14, s13
 800cc34:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800cd00 <atanf+0x18c>
 800cc38:	eea6 5a87 	vfma.f32	s10, s13, s14
 800cc3c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800cd04 <atanf+0x190>
 800cc40:	eea5 7a26 	vfma.f32	s14, s10, s13
 800cc44:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800cd08 <atanf+0x194>
 800cc48:	eea7 5a26 	vfma.f32	s10, s14, s13
 800cc4c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800cd0c <atanf+0x198>
 800cc50:	eea5 7a26 	vfma.f32	s14, s10, s13
 800cc54:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cc58:	eea5 7a86 	vfma.f32	s14, s11, s12
 800cc5c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cc60:	d121      	bne.n	800cca6 <atanf+0x132>
 800cc62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cc66:	e794      	b.n	800cb92 <atanf+0x1e>
 800cc68:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cc6c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800cc70:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cc74:	2301      	movs	r3, #1
 800cc76:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cc7a:	e7be      	b.n	800cbfa <atanf+0x86>
 800cc7c:	4b24      	ldr	r3, [pc, #144]	; (800cd10 <atanf+0x19c>)
 800cc7e:	429c      	cmp	r4, r3
 800cc80:	dc0b      	bgt.n	800cc9a <atanf+0x126>
 800cc82:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800cc86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc8a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800cc8e:	2302      	movs	r3, #2
 800cc90:	ee70 6a67 	vsub.f32	s13, s0, s15
 800cc94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc98:	e7af      	b.n	800cbfa <atanf+0x86>
 800cc9a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800cc9e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cca2:	2303      	movs	r3, #3
 800cca4:	e7a9      	b.n	800cbfa <atanf+0x86>
 800cca6:	4a1b      	ldr	r2, [pc, #108]	; (800cd14 <atanf+0x1a0>)
 800cca8:	491b      	ldr	r1, [pc, #108]	; (800cd18 <atanf+0x1a4>)
 800ccaa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ccae:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ccb2:	ed93 0a00 	vldr	s0, [r3]
 800ccb6:	ee37 7a40 	vsub.f32	s14, s14, s0
 800ccba:	ed92 0a00 	vldr	s0, [r2]
 800ccbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ccc2:	2d00      	cmp	r5, #0
 800ccc4:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ccc8:	bfb8      	it	lt
 800ccca:	eef1 7a67 	vneglt.f32	s15, s15
 800ccce:	e760      	b.n	800cb92 <atanf+0x1e>
 800ccd0:	3fc90fdb 	.word	0x3fc90fdb
 800ccd4:	bfc90fdb 	.word	0xbfc90fdb
 800ccd8:	3edfffff 	.word	0x3edfffff
 800ccdc:	7149f2ca 	.word	0x7149f2ca
 800cce0:	3f97ffff 	.word	0x3f97ffff
 800cce4:	3c8569d7 	.word	0x3c8569d7
 800cce8:	3d4bda59 	.word	0x3d4bda59
 800ccec:	bd6ef16b 	.word	0xbd6ef16b
 800ccf0:	3d886b35 	.word	0x3d886b35
 800ccf4:	3dba2e6e 	.word	0x3dba2e6e
 800ccf8:	3e124925 	.word	0x3e124925
 800ccfc:	3eaaaaab 	.word	0x3eaaaaab
 800cd00:	bd15a221 	.word	0xbd15a221
 800cd04:	bd9d8795 	.word	0xbd9d8795
 800cd08:	bde38e38 	.word	0xbde38e38
 800cd0c:	be4ccccd 	.word	0xbe4ccccd
 800cd10:	401bffff 	.word	0x401bffff
 800cd14:	0800d37c 	.word	0x0800d37c
 800cd18:	0800d38c 	.word	0x0800d38c

0800cd1c <fabsf>:
 800cd1c:	ee10 3a10 	vmov	r3, s0
 800cd20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cd24:	ee00 3a10 	vmov	s0, r3
 800cd28:	4770      	bx	lr

0800cd2a <finitef>:
 800cd2a:	b082      	sub	sp, #8
 800cd2c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800cd30:	9801      	ldr	r0, [sp, #4]
 800cd32:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800cd36:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800cd3a:	bfac      	ite	ge
 800cd3c:	2000      	movge	r0, #0
 800cd3e:	2001      	movlt	r0, #1
 800cd40:	b002      	add	sp, #8
 800cd42:	4770      	bx	lr

0800cd44 <nanf>:
 800cd44:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cd4c <nanf+0x8>
 800cd48:	4770      	bx	lr
 800cd4a:	bf00      	nop
 800cd4c:	7fc00000 	.word	0x7fc00000

0800cd50 <scalbnf>:
 800cd50:	ee10 3a10 	vmov	r3, s0
 800cd54:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800cd58:	d025      	beq.n	800cda6 <scalbnf+0x56>
 800cd5a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800cd5e:	d302      	bcc.n	800cd66 <scalbnf+0x16>
 800cd60:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cd64:	4770      	bx	lr
 800cd66:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800cd6a:	d122      	bne.n	800cdb2 <scalbnf+0x62>
 800cd6c:	4b2a      	ldr	r3, [pc, #168]	; (800ce18 <scalbnf+0xc8>)
 800cd6e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800ce1c <scalbnf+0xcc>
 800cd72:	4298      	cmp	r0, r3
 800cd74:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cd78:	db16      	blt.n	800cda8 <scalbnf+0x58>
 800cd7a:	ee10 3a10 	vmov	r3, s0
 800cd7e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800cd82:	3a19      	subs	r2, #25
 800cd84:	4402      	add	r2, r0
 800cd86:	2afe      	cmp	r2, #254	; 0xfe
 800cd88:	dd15      	ble.n	800cdb6 <scalbnf+0x66>
 800cd8a:	ee10 3a10 	vmov	r3, s0
 800cd8e:	eddf 7a24 	vldr	s15, [pc, #144]	; 800ce20 <scalbnf+0xd0>
 800cd92:	eddf 6a24 	vldr	s13, [pc, #144]	; 800ce24 <scalbnf+0xd4>
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	eeb0 7a67 	vmov.f32	s14, s15
 800cd9c:	bfb8      	it	lt
 800cd9e:	eef0 7a66 	vmovlt.f32	s15, s13
 800cda2:	ee27 0a27 	vmul.f32	s0, s14, s15
 800cda6:	4770      	bx	lr
 800cda8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800ce28 <scalbnf+0xd8>
 800cdac:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cdb0:	4770      	bx	lr
 800cdb2:	0dd2      	lsrs	r2, r2, #23
 800cdb4:	e7e6      	b.n	800cd84 <scalbnf+0x34>
 800cdb6:	2a00      	cmp	r2, #0
 800cdb8:	dd06      	ble.n	800cdc8 <scalbnf+0x78>
 800cdba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cdbe:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800cdc2:	ee00 3a10 	vmov	s0, r3
 800cdc6:	4770      	bx	lr
 800cdc8:	f112 0f16 	cmn.w	r2, #22
 800cdcc:	da1a      	bge.n	800ce04 <scalbnf+0xb4>
 800cdce:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cdd2:	4298      	cmp	r0, r3
 800cdd4:	ee10 3a10 	vmov	r3, s0
 800cdd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cddc:	dd0a      	ble.n	800cdf4 <scalbnf+0xa4>
 800cdde:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800ce20 <scalbnf+0xd0>
 800cde2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800ce24 <scalbnf+0xd4>
 800cde6:	eef0 7a40 	vmov.f32	s15, s0
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	bf18      	it	ne
 800cdee:	eeb0 0a47 	vmovne.f32	s0, s14
 800cdf2:	e7db      	b.n	800cdac <scalbnf+0x5c>
 800cdf4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800ce28 <scalbnf+0xd8>
 800cdf8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800ce2c <scalbnf+0xdc>
 800cdfc:	eef0 7a40 	vmov.f32	s15, s0
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	e7f3      	b.n	800cdec <scalbnf+0x9c>
 800ce04:	3219      	adds	r2, #25
 800ce06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ce0a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800ce0e:	eddf 7a08 	vldr	s15, [pc, #32]	; 800ce30 <scalbnf+0xe0>
 800ce12:	ee07 3a10 	vmov	s14, r3
 800ce16:	e7c4      	b.n	800cda2 <scalbnf+0x52>
 800ce18:	ffff3cb0 	.word	0xffff3cb0
 800ce1c:	4c000000 	.word	0x4c000000
 800ce20:	7149f2ca 	.word	0x7149f2ca
 800ce24:	f149f2ca 	.word	0xf149f2ca
 800ce28:	0da24260 	.word	0x0da24260
 800ce2c:	8da24260 	.word	0x8da24260
 800ce30:	33000000 	.word	0x33000000

0800ce34 <_init>:
 800ce34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce36:	bf00      	nop
 800ce38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce3a:	bc08      	pop	{r3}
 800ce3c:	469e      	mov	lr, r3
 800ce3e:	4770      	bx	lr

0800ce40 <_fini>:
 800ce40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce42:	bf00      	nop
 800ce44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce46:	bc08      	pop	{r3}
 800ce48:	469e      	mov	lr, r3
 800ce4a:	4770      	bx	lr
